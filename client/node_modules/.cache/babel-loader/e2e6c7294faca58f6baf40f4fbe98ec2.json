{"ast":null,"code":"import _slicedToArray from \"/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/containers/PiperChat/Contact.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../assets/images/p37605.png';\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar';\n\nvar contact = function contact(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showOptions = _useState2[0],\n      toggleShowOptions = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      updatePosition = _useState4[1]; // const [name, setName] = useState('');\n  // // const contactName = props.room.userIds.filter(username => username !== props.user).join('');\n  // // console.log(contactName)\n\n\n  var showOptionsHandler = function showOptionsHandler(event) {\n    var pos = {};\n    pos.x = event.clientX + 200;\n    pos.y = event.clientY;\n    toggleShowOptions(true);\n    updatePosition(pos);\n  };\n\n  var hideOptions = function hideOptions() {\n    toggleShowOptions(false);\n    updatePosition({});\n  }; // const getRoomName = async () => {\n  //     let contactName = await props.room.userIds.filter(user => user !== props.user);\n  //     setName(contactName.join(''))\n  //     console.log(contactName);\n  // } \n  // useEffect(()=> {\n  //     if(props.room.isPrivate /*&& contactName*/){\n  //         // console.log(props.room.userIds)\n  //         getRoomName();\n  //         // setName(contactName);\n  //     } else {\n  //         setName(props.room.name);\n  //     }\n  // });\n  // setInterval(()=> console.log(name), 1000)\n\n\n  var attachedClasses = [classes.Contact];\n  var unreadMessages = \"\";\n\n  if (props.Active) {\n    attachedClasses.push(classes.Active);\n  }\n\n  if (props.unopenedMessages[props.id]) {\n    unreadMessages = props.unopenedMessages[props.id].length;\n  }\n\n  var contact = null;\n\n  if (props.room) {\n    contact = React.createElement(\"div\", {\n      className: attachedClasses.join(' '),\n      onClick: props.clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: img,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, props.room.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, props.lastMessage)), React.createElement(\"div\", {\n      className: classes.FloatedRight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, unreadMessages), React.createElement(\"i\", {\n      onClick: showOptionsHandler,\n      className: \"fa fa-angle-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), showOptions && React.createElement(OptionsDropbar, {\n      position: position,\n      optionClicked: function optionClicked(event, option) {\n        return _this.optionClicked(option);\n      },\n      roomId: props.room.id,\n      show: showOptions,\n      hideOptions: hideOptions,\n      options: [{\n        name: 'Archive chat'\n      }, {\n        name: 'Mute'\n      }, {\n        name: !props.room.isPrivate ? 'Exit group' : 'Delete chat'\n      }, {\n        name: 'Pin chat'\n      }, {\n        name: 'Mark as unread'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })));\n  }\n\n  return contact;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps)(contact);","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/containers/PiperChat/Contact.js"],"names":["React","useState","useEffect","classes","img","connect","OptionsDropbar","contact","props","showOptions","toggleShowOptions","position","updatePosition","showOptionsHandler","event","pos","x","clientX","y","clientY","hideOptions","attachedClasses","Contact","unreadMessages","Active","push","unopenedMessages","id","length","room","join","clicked","name","lastMessage","FloatedRight","option","optionClicked","isPrivate","mapStateToProps","state","userId","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../assets/images/p37605.png'\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar';\n\nconst contact = props => {\n    const [showOptions, toggleShowOptions] = useState(false);\n    const [position, updatePosition] = useState({});\n    // const [name, setName] = useState('');\n    // // const contactName = props.room.userIds.filter(username => username !== props.user).join('');\n    // // console.log(contactName)\n    const showOptionsHandler = event => {\n        let pos = {};\n        pos.x = event.clientX + 200;\n        pos.y = event.clientY;\n        toggleShowOptions(true);\n        updatePosition(pos)\n    }\n    const hideOptions = () => {\n        toggleShowOptions(false);\n        updatePosition({})\n    }\n    // const getRoomName = async () => {\n    //     let contactName = await props.room.userIds.filter(user => user !== props.user);\n    //     setName(contactName.join(''))\n    //     console.log(contactName);\n    // } \n    // useEffect(()=> {\n    //     if(props.room.isPrivate /*&& contactName*/){\n    //         // console.log(props.room.userIds)\n    //         getRoomName();\n    //         // setName(contactName);\n    //     } else {\n    //         setName(props.room.name);\n    //     }\n        \n    // });\n    // setInterval(()=> console.log(name), 1000)\n    let attachedClasses = [classes.Contact];\n    let unreadMessages = \"\";\n    if (props.Active){\n        attachedClasses.push(classes.Active); \n    }\n    if (props.unopenedMessages[props.id]){\n        unreadMessages = props.unopenedMessages[props.id].length;\n    }\n    let contact = null;\n    if (props.room){\n        contact = (<div className={attachedClasses.join(' ')} onClick={props.clicked}>\n        <img src={img} alt=''/>\n        <div>\n            <p>{props.room.name}</p>\n            <p>{props.lastMessage}</p>\n        </div>\n        <div className={classes.FloatedRight}>\n            <span>{unreadMessages}</span>\n            <i onClick={showOptionsHandler} className=\"fa fa-angle-down\"></i>\n            { showOptions && \n                <OptionsDropbar position={position} \n                        optionClicked={(event, option) => this.optionClicked(option)}\n                        roomId={props.room.id}\n                        show={showOptions} \n                        hideOptions={hideOptions}\n                        options={[{name: 'Archive chat'},\n                        {name: 'Mute'},\n                        {name: !props.room.isPrivate? 'Exit group':'Delete chat'},\n                        {name: 'Pin chat'},\n                        {name: 'Mark as unread'}\n                        ]}/>}\n        </div>\n    </div>\n        )\n    }\n    return contact; \n}\nconst mapStateToProps = state => {\n    return {\n         userId: state.auth.userId\n    }\n}\nexport default connect(mapStateToProps)(contact);"]},"metadata":{},"sourceType":"module"}