{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store } from '../../../index';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nvar userId = localStorage.getItem('userId');\nvar room, sdp, callType;\nvar state = null; //setInterval(()=> console.log(caller.signalingState), 4000);\n\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {\n  console.log(member);\n});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id === room) {\n    alert('call Ended');\n  }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  if (msg.room === room) {\n    addIceCandidate(new RTCIceCandidate(msg.candidate));\n  }\n});\nchannel.bind(\"client-sdp\", function (msg) {\n  alert(JSON.stringify(msg));\n\n  if (msg.room === userId) {\n    store.dispatch({\n      type: actionTypes.ON_INCOMING_CALL,\n      callType: msg.callType,\n      caller: msg.from\n    });\n    setTimeout(function () {\n      channel.trigger(\"client-reject\", {\n        room: msg.room,\n        rejected: userId\n      });\n    }, 15000);\n    room = msg.room;\n    sdp = msg.sdp;\n    console.log(room, sdp);\n  }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  console.log(answer.room, room);\n\n  if (answer.room === room) {\n    console.log(\"answer received\");\n    var sessionDesc = new RTCSessionDescription(answer.sdp);\n    setRemoteDescription(sessionDesc);\n  }\n});\nexport var callAccepted = function callAccepted() {\n  alert('call accepted in room ' + room);\n  return function (dispatch) {\n    state = 'answerCall';\n    getCam();\n    dispatch({\n      type: actionTypes.CALL_ACCEPTED\n    });\n  };\n};\nexport var callRejected = function callRejected() {\n  return function (dispatch) {\n    channel.trigger(\"client-reject\", {\n      room: room,\n      rejected: userId\n    });\n    dispatch({\n      type: actionTypes.CALL_REJECTED\n    });\n  };\n};\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n}; //Create and send offer to remote peer on button click\n\n\nexport var callUser = function callUser(user, Type) {\n  room = user;\n  callType = Type;\n  return function (dispatch) {\n    getCam();\n    dispatch({\n      type: actionTypes.CALL_INIT\n    });\n  };\n};\n\nvar getCam = function getCam() {\n  alert('room: ' + room);\n  getMedia().then(function (stream) {\n    store.dispatch(onLocalStream(stream));\n    stream.getTracks().forEach(function (track) {\n      caller.addTrack(track, stream);\n    });\n\n    if (!state) {\n      alert('creating offer');\n      createOffer();\n    } else {\n      alert(state);\n      alert('sdp: ' + sdp);\n      alert('room: ' + room);\n      var sessionDesc = new RTCSessionDescription(sdp);\n      setRemoteDescription(sessionDesc);\n      createAnswer();\n      state = null;\n    }\n  }).catch(function (error) {\n    console.log(\"an error occured\", error);\n  });\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: callType === 'video' ? {\n      width: 1280,\n      height: 720,\n      frameRate: 15\n    } : false,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    dispatch(prepareCaller(channel)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      onIceCandidate(caller, evt);\n    }; //ontrack handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      dispatch(onTrack(evt));\n    };\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nvar addIceCandidate = function addIceCandidate(iceCandidate) {\n  return caller.addIceCandidate(iceCandidate);\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate,\n      room: room\n    });\n  }\n};\n\nvar setLocalDescription = function setLocalDescription(sessionDesc) {\n  return caller.setLocalDescription(sessionDesc);\n};\n\nvar setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  return caller.setRemoteDescription(sessionDesc);\n};\n\nvar addTrack = function addTrack(track, stream) {\n  caller.addTrack(track, stream);\n};\n\nvar createAnswer = function createAnswer() {\n  alert('createAnswer room: ' + room);\n  caller.createAnswer().then(function (sdp) {\n    var sessionDesc = new RTCSessionDescription(sdp);\n    setLocalDescription(sessionDesc);\n    channel.trigger(\"client-answer\", {\n      sdp: sdp,\n      room: room\n    });\n  });\n  ;\n};\n\nvar createOffer = function createOffer() {\n  caller.createOffer({\n    offerToReceiveVideo: true\n  }).then(function (desc) {\n    var sessionDesc = new RTCSessionDescription(desc);\n    setLocalDescription(sessionDesc);\n    channel.trigger(\"client-sdp\", {\n      sdp: desc,\n      room: room,\n      from: userId,\n      callType: callType\n    });\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\n\nexport var endCall = function endCall() {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.END_CALL\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","store","channel","subscribe","caller","window","RTCPeerConnection","userId","localStorage","getItem","room","sdp","callType","state","bind","members","member","console","log","id","alert","msg","addIceCandidate","RTCIceCandidate","candidate","JSON","stringify","dispatch","type","ON_INCOMING_CALL","from","setTimeout","trigger","rejected","answer","sessionDesc","RTCSessionDescription","setRemoteDescription","callAccepted","getCam","CALL_ACCEPTED","callRejected","CALL_REJECTED","onLocalStream","stream","ON_LOCAL_STREAM","callUser","user","Type","CALL_INIT","getMedia","then","getTracks","forEach","track","addTrack","createOffer","createAnswer","catch","error","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","audio","prepareCaller","PREPARE_CALLER","getCallerReady","onicecandidate","evt","onIceCandidate","ontrack","onTrack","ON_TRACK","remoteStream","streams","iceCandidate","peer","setLocalDescription","offerToReceiveVideo","desc","err","endCall","END_CALL"],"mappings":"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","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store }  from '../../../index';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\nconst userId = localStorage.getItem('userId');\nlet room, sdp, callType;\nlet state = null;\n\n//setInterval(()=> console.log(caller.signalingState), 4000);\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n         \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n    console.log(member);\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n    if (member.id === room) {\n      alert('call Ended');\n    }\n    \n});\nchannel.bind(\"client-candidate\", msg => {\n    if (msg.room === room) {\n      addIceCandidate(new RTCIceCandidate(msg.candidate));\n    }\n});\nchannel.bind(\"client-sdp\", msg => {\n    alert(JSON.stringify(msg));\n    if (msg.room === userId) {\n        store.dispatch({type: actionTypes.ON_INCOMING_CALL, callType: msg.callType, caller: msg.from});\n            setTimeout(() => {\n                channel.trigger(\"client-reject\", { room: msg.room, rejected: userId });\n            }, 15000)\n        room = msg.room;\n        sdp = msg.sdp;\n        console.log(room, sdp);\n        }\n});\n\n    channel.bind(\"client-answer\", answer => {\n        console.log(answer.room, room)\n        if (answer.room === room) {\n            console.log(\"answer received\");\n            let sessionDesc = new RTCSessionDescription(answer.sdp);\n            setRemoteDescription(sessionDesc);\n        }\n        });\n    \nexport const callAccepted = () => {\n    alert('call accepted in room ' + room);\n    return dispatch => {\n        state = 'answerCall';\n        getCam();\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\nexport const callRejected = () => {\n    return dispatch => {\n        channel.trigger(\"client-reject\", { room: room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\n//Create and send offer to remote peer on button click\nexport const callUser = (user, Type) => {\n    room = user;\n    callType = Type;\n    return dispatch => {\n        getCam();\n        dispatch({type: actionTypes.CALL_INIT})\n    }\n  }    \nconst getCam = () => {\n    alert('room: ' + room);\n    getMedia().then(stream => {\n        store.dispatch(onLocalStream(stream));\n        stream.getTracks().forEach(track => {\n            caller.addTrack(track, stream)\n        });    \n            if (!state){\n                alert('creating offer')\n                createOffer();\n            } else {\n                alert(state);\n                alert('sdp: ' + sdp);\n                alert('room: ' + room);\n        let sessionDesc = new RTCSessionDescription(sdp);\n        setRemoteDescription(sessionDesc);\n        createAnswer();\n        state = null;\n            }\n        })\n        .catch(error => {\n          console.log(\"an error occured\", error);\n        });\n}\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: callType === 'video' ? {width: 1280,\n            height: 720,\n            frameRate: 15}: false,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\n\nexport const getCallerReady = () => {\n    return dispatch => {\n     dispatch(prepareCaller(channel));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      onIceCandidate(caller, evt);\n    };\n    //ontrack handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n        dispatch(onTrack(evt));\n    };\n    }\n}\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\nconst addIceCandidate = iceCandidate => {\n    return caller.addIceCandidate(iceCandidate);\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {   \n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        room: room\n      });\n    }\n  }\n\nconst setLocalDescription = sessionDesc => {\n    return caller.setLocalDescription(sessionDesc);\n}\n\nconst setRemoteDescription = sessionDesc => {\n    return caller.setRemoteDescription(sessionDesc);\n}\n\nconst addTrack = (track, stream) => {\n  caller.addTrack(track, stream);\n}\n\nconst createAnswer = () => {\n    alert('createAnswer room: ' + room);\n    caller.createAnswer().then(sdp => {\n        let sessionDesc = new RTCSessionDescription(sdp);\n        setLocalDescription(sessionDesc);\n        channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: room\n        });\n    });;\n}\n\nconst createOffer = () => {        \n    caller.createOffer({offerToReceiveVideo: true}).then(desc => {\n        let sessionDesc = new RTCSessionDescription(desc);\n        setLocalDescription(sessionDesc);\n        channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: room,\n            from: userId,\n            callType: callType\n        });\n    })\n    .catch(err => console.log(err));\n}\nexport const endCall = () => {\n    return dispatch => {\n        dispatch({type: actionTypes.END_CALL});\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}