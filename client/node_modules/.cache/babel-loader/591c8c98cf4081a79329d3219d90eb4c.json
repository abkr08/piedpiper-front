{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/PiperChat/ChatScreen.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\n\nvar ChatScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      contacts: [],\n      roomId: null,\n      text: '',\n      messages: [],\n      showSideDrawer: false\n    };\n\n    _this.scrollToBottom = function () {\n      if (_this.scrollRef && _this.state.messages.length > 0) {\n        var lastElement = _this.scrollRef.children[_this.scrollRef.children.length - 1];\n        lastElement.scrollIntoView();\n      }\n    };\n\n    _this.getRooms = function () {\n      _this.setState({\n        contacts: _this.currentUser.rooms\n      }); //Subscribe to all rooms\n\n\n      _this.state.contacts.map(function (con) {\n        return _this.currentUser.subscribeToRoom({\n          roomId: con.id,\n          hooks: {\n            onMessage: function onMessage(message) {\n              console.log(message); //this.setState({messages: [...this.state.messages, message]});\n\n              _this.getMessages(message.roomId);\n\n              _this.scrollToBottom();\n            }\n          },\n          messageLimit: 100\n        });\n      });\n    };\n\n    _this.getMessages = function (id) {\n      _this.setState({\n        roomId: id\n      });\n\n      _this.currentUser.fetchMessages({\n        roomId: id,\n        //initialId: 42,\n        direction: 'older',\n        limit: 100\n      }).then(function (messages) {\n        _this.setState({\n          messages: messages\n        });\n\n        _this.scrollToBottom();\n      }).catch(function (err) {\n        console.log(\"Error fetching messages: \".concat(err));\n      });\n    };\n\n    _this.onChange = function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n\n      _this.currentUser.sendMessage({\n        text: _this.state.text,\n        roomId: _this.state.roomId\n      });\n\n      _this.setState({\n        text: ''\n      });\n    };\n\n    _this.toggleSideDrawer = function () {\n      _this.setState(function (prevState) {\n        return {\n          showSideDrawer: !prevState.showSideDrawer\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var chatManager = new ChatManager({\n        instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n        userId: this.props.userId,\n        tokenProvider: new TokenProvider({\n          url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n        })\n      });\n      chatManager.connect({\n        onAddedToRoom: function onAddedToRoom(room) {\n          _this2.getRooms();\n\n          _this2.setState({\n            showSideDrawer: false,\n            roomId: room.id\n          });\n\n          _this2.getMessages(room.id);\n        }\n      }).then(function (user) {\n        _this2.currentUser = user;\n\n        _this2.getRooms();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var chat = React.createElement(\"div\", {\n        className: classes.Chat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      });\n\n      if (this.state.roomId) {\n        chat = React.createElement(\"div\", {\n          className: classes.Chat,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: classes.Msgs,\n          ref: function ref(div) {\n            _this3.scrollRef = div;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, this.state.messages.map(function (msg) {\n          return React.createElement(Chat, {\n            sender: msg.senderId,\n            byCurrentUser: _this3.props.userId === msg.senderId,\n            text: msg.text,\n            key: msg.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          });\n        })), React.createElement(\"form\", {\n          onSubmit: this.onSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          onChange: this.onChange,\n          value: this.state.text,\n          name: \"text\",\n          type: \"text\",\n          placeholder: \"Enter message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ChatScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.ContactsPane,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.MenuBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        onClick: this.toggleSideDrawer,\n        className: \"fa fa-bars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(SideDrawer, {\n        show: this.state.showSideDrawer,\n        user: this.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Contacts\"), this.state.contacts.map(function (con) {\n        return React.createElement(Contact, {\n          key: con.id,\n          name: con.name,\n          Active: con.id === _this3.state.roomId,\n          clicked: function clicked() {\n            return _this3.getMessages(con.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        });\n      })), chat);\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.userId\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/PiperChat/ChatScreen.js"],"names":["React","Component","connect","ChatManager","TokenProvider","Contact","Chat","classes","SideDrawer","ChatScreen","state","contacts","roomId","text","messages","showSideDrawer","scrollToBottom","scrollRef","length","lastElement","children","scrollIntoView","getRooms","setState","currentUser","rooms","map","con","subscribeToRoom","id","hooks","onMessage","message","console","log","getMessages","messageLimit","fetchMessages","direction","limit","then","catch","err","onChange","event","target","value","onSubmit","preventDefault","sendMessage","toggleSideDrawer","prevState","chatManager","instanceLocator","userId","props","tokenProvider","url","onAddedToRoom","room","user","chat","Msgs","div","msg","senderId","ContactsPane","MenuBar","textAlign","name","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\n\n\n\nclass ChatScreen extends Component {\n\n    state = {\n        contacts: [],\n        roomId: null,\n        text: '',\n        messages: [],\n        showSideDrawer: false\n    }\n\n    componentDidMount () {\n        const chatManager = new ChatManager({\n            instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n            userId: this.props.userId,\n            tokenProvider: new TokenProvider({\n                url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n            }),\n        })\n      chatManager\n        .connect({\n            onAddedToRoom: room => {\n\n                this.getRooms();\n                this.setState({showSideDrawer: false, roomId: room.id});\n                this.getMessages(room.id);\n            }\n        })\n        .then(user => {\n            this.currentUser = user;\n            this.getRooms();\n\n        })\n        .catch(err => console.log(err));\n        \n        this.scrollToBottom();\n        \n    }\n\n    scrollToBottom = () => {\n       if (this.scrollRef && this.state.messages.length > 0){\n        let lastElement = this.scrollRef.children[this.scrollRef.children.length-1];\n        lastElement.scrollIntoView();\n    }\n}\n    getRooms = () => {\n        this.setState({contacts: this.currentUser.rooms});\n        //Subscribe to all rooms\n        this.state.contacts.map(con => {\n           return  this.currentUser.subscribeToRoom({\n                roomId: con.id,\n                hooks: {\n                  onMessage: message => {\n                      console.log(message);\n                    //this.setState({messages: [...this.state.messages, message]});\n                    this.getMessages(message.roomId);\n                    this.scrollToBottom();\n                  }\n                },\n                messageLimit: 100\n              })\n        })\n    }\n    getMessages = id => {\n        this.setState({roomId: id});\n        this.currentUser.fetchMessages({\n            roomId: id,\n            //initialId: 42,\n            direction: 'older',\n            limit: 100,\n          })\n            .then(messages => {\n              this.setState({messages});\n              this.scrollToBottom();\n            })\n            .catch(err => {\n              console.log(`Error fetching messages: ${err}`)\n            })\n    }\n\n    onChange = event => {\n        this.setState({text: event.target.value});\n    }\n    onSubmit = event => {\n        event.preventDefault();\n        this.currentUser.sendMessage({\n            text: this.state.text,\n            roomId: this.state.roomId\n        })\n        this.setState({text: ''});\n    }\n\n   toggleSideDrawer = () => {\n        this.setState(prevState => {\n            return {showSideDrawer: !prevState.showSideDrawer}});\n    }\n\n    render () {\n        \n        let chat = <div className={classes.Chat}></div>;\n        if (this.state.roomId){\n            chat = (\n            <div className={classes.Chat}>\n                <div className={classes.Msgs} ref={(div) => {this.scrollRef = div}}>\n                {\n                    this.state.messages.map(msg => {\n                        return <Chat sender={msg.senderId} byCurrentUser={this.props.userId === msg.senderId} text={msg.text} key={msg.id} />\n                    })\n                }\n                </div>\n           \n            <form onSubmit={this.onSubmit}>\n                <input onChange={this.onChange} value={this.state.text} name='text' type=\"text\" placeholder=\"Enter message\" />\n            </form>\n            </div>\n            );\n        }\n        return (\n            <div className={classes.ChatScreen}>\n                <div className={classes.ContactsPane} >\n                <div className={classes.MenuBar}>\n                    <i onClick = {this.toggleSideDrawer} className=\"fa fa-bars\"></i>\n                </div>\n                <SideDrawer show={this.state.showSideDrawer} \n                user={this.currentUser}\n                />\n                <h1 style={{textAlign: 'center'}}>Contacts</h1>\n                {this.state.contacts.map(con => {\n                    return <Contact key={con.id} name={con.name} Active= {con.id === this.state.roomId} clicked={() => this.getMessages(con.id)}/>\n                })}\n                </div>\n                {chat}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userId: state.userId\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);"]},"metadata":{},"sourceType":"module"}