{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\n\nvar prepareCaller = function prepareCaller(channel, caller) {\n  console.log(caller);\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel,\n    caller: caller\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.stream\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    console.log(caller);\n    dispatch(prepareCaller(channel, caller)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      console.log(evt); //this.remoteVideoRef.srcObject = evt.stream;\n\n      dispatch(onTrack(evt));\n    };\n  };\n};\nexport var addIceCandidate = function addIceCandidate(iceCandidate) {\n  caller.addIceCandidate(iceCandidate);\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate // room: room\n\n    });\n  }\n};\n\nexport var setLocalDescription = function setLocalDescription(sessionDesc) {\n  caller.setLocalDescription(sessionDesc);\n};\nexport var setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  caller.setRemoteDescription(sessionDesc);\n};\nexport var addTrack = function addTrack(track, stream) {};","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","channel","subscribe","caller","window","RTCPeerConnection","prepareCaller","console","log","type","PREPARE_CALLER","onTrack","track","ON_TRACK","remoteStream","stream","getCallerReady","dispatch","onicecandidate","evt","candidate","onIceCandidate","ontrack","addIceCandidate","iceCandidate","peer","trigger","setLocalDescription","sessionDesc","setRemoteDescription","addTrack"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,YAA7B;AAEA,IAAMC,OAAO,GAAGF,MAAM,CAACG,SAAP,CAAiB,oBAAjB,CAAhB;AACA,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,iBAAX,CAA6B;AAAC,gBAAa,CAAC;AAAC,YAAO;AAAR,GAAD;AAAd,CAA7B,CAAf;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACL,OAAD,EAAUE,MAAV,EAAqB;AACvCI,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,SAAO;AACHM,IAAAA,IAAI,EAAET,WAAW,CAACU,cADf;AAEHT,IAAAA,OAAO,EAAEA,OAFN;AAGHE,IAAAA,MAAM,EAAEA;AAHL,GAAP;AAKH,CAPD;;AAQA,IAAMQ,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACrB,SAAM;AACFH,IAAAA,IAAI,EAAET,WAAW,CAACa,QADhB;AAEFC,IAAAA,YAAY,EAAEF,KAAK,CAACG;AAFlB,GAAN;AAKH,CAND;;AAOA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAChC,SAAO,UAAAC,QAAQ,EAAI;AACfV,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACHc,IAAAA,QAAQ,CAACX,aAAa,CAACL,OAAD,EAAUE,MAAV,CAAd,CAAR,CAFkB,CAGnB;;AACAA,IAAAA,MAAM,CAACe,cAAP,GAAwB,UAAAC,GAAG,EAAI;AAC7B,UAAI,CAACA,GAAG,CAACC,SAAT,EAAoB;AACpBb,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AACAE,MAAAA,cAAc,CAAClB,MAAD,EAASgB,GAAT,CAAd;AACD,KALD,CAJmB,CAUnB;;;AACAhB,IAAAA,MAAM,CAACmB,OAAP,GAAiB,UAAAH,GAAG,EAAI;AACtBZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ,EADsB,CAE1B;;AACAF,MAAAA,QAAQ,CAACN,OAAO,CAACQ,GAAD,CAAR,CAAR;AACG,KAJD;AAKC,GAhBD;AAiBH,CAlBM;AAmBP,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,YAAY,EAAI;AAC3CrB,EAAAA,MAAM,CAACoB,eAAP,CAAuBC,YAAvB;AACH,CAFM;;AAIP,IAAMH,cAAc,GAAG,SAAjBA,cAAiB,CAACI,IAAD,EAAON,GAAP,EAAe;AAClC,MAAIA,GAAG,CAACC,SAAR,EAAmB;AACjBnB,IAAAA,OAAO,CAACyB,OAAR,CAAgB,kBAAhB,EAAoC;AAClCN,MAAAA,SAAS,EAAED,GAAG,CAACC,SADmB,CAElC;;AAFkC,KAApC;AAID;AACF,CAPH;;AASE,OAAO,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,WAAW,EAAI;AAChDzB,EAAAA,MAAM,CAACwB,mBAAP,CAA2BC,WAA3B;AACH,CAFQ;AAIT,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAD,WAAW,EAAI;AAC/CzB,EAAAA,MAAM,CAAC0B,oBAAP,CAA4BD,WAA5B;AACH,CAFM;AAIP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAClB,KAAD,EAAQG,MAAR,EAAmB,CAE1C,CAFM","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n    \nconst prepareCaller = (channel, caller) => {\n    console.log(caller);\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel,\n        caller: caller,\n    }\n}\nconst onTrack = track => {\n    return{\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.stream\n\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n        console.log(caller);\n     dispatch(prepareCaller(channel, caller));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    };\n    //onaddstream handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n      console.log(evt);\n  //this.remoteVideoRef.srcObject = evt.stream;\n  dispatch(onTrack(evt));\n    };\n    }\n}\nexport const addIceCandidate = iceCandidate => {\n    caller.addIceCandidate(iceCandidate);\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {\n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        // room: room\n      });\n    }\n  }\n\n  export const setLocalDescription = sessionDesc => {\n    caller.setLocalDescription(sessionDesc);\n}\n\nexport const setRemoteDescription = sessionDesc => {\n    caller.setRemoteDescription(sessionDesc);\n}\n\nexport const addTrack = (track, stream) => {\n\n}"]},"metadata":{},"sourceType":"module"}