{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.gotLocalStream = function (mediaStream) {\n      _this.localStream = mediaStream;\n      _this.localVideoRef.srcObject = mediaStream;\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.prepareCaller = function () {\n      //Initializing a peer connection\n      _this.caller = new RTCPeerConnection();\n      console.log(_this.caller); //Listen for ICE Candidates and send them to remote peers\n\n      _this.caller.onicecandidate = function (evt) {\n        alert('jjnkn');\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n\n        _this.onIceCandidate(_this.caller, evt);\n      }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n      _this.caller.onaddstream = function (evt) {\n        console.log(\"onaddstream called\");\n\n        if (window.URL) {\n          _this.remoteVideoRef.src = window.URL.createObjectURL(evt.stream);\n        } else {\n          _this.remoteVideoRef.src = evt.stream;\n        }\n      };\n    };\n\n    _this.onIceCandidate = function (peer, evt) {\n      alert('called');\n\n      if (evt.candidate) {\n        _this.channel.trigger(\"client-candidate\", {\n          \"candidate\": evt.candidate // \"room\": room\n\n        });\n      }\n    };\n\n    _this.getCam = function () {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    };\n\n    _this.callUser = function (user) {\n      _this.getCam().then(function (stream) {\n        if (window.URL) {\n          _this.localVideoRef.src = window.URL.createObjectURL(stream);\n        } else {\n          _this.localVideoRef.src = stream;\n        }\n\n        _this.toggleEndCallButton();\n\n        _this.caller.addStream(stream);\n\n        _this.localUserMedia = stream;\n\n        _this.caller.createOffer().then(function (desc) {\n          _this.caller.setLocalDescription(new RTCSessionDescription(desc));\n\n          _this.channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: user,\n            from: id\n          });\n\n          room = user;\n        });\n      }).catch(function (error) {\n        console.log(\"an error occured\", error);\n      });\n    };\n\n    _this.toggleEndCallButton = function () {// if (document.getElementById(\"endCall\").style.display == \"block\") {\n      //   document.getElementById(\"endCall\").style.display = \"none\";\n      // } else {\n      //   document.getElementById(\"endCall\").style.display = \"block\";\n      // }\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.channel = pusher.subscribe('presence-videocall'); // navigator.mediaDevices.getUserMedia({\n      //     video: true\n      // })\n      // .then(this.gotLocalStream)\n      // .catch(err => console.log(err));\n\n      this.GetRTCPeerConnection();\n      this.GetRTCSessionDescription();\n      this.GetRTCIceCandidate(); //prepare the caller to use peerconnection\n\n      this.prepareCaller();\n      this.channel.bind(\"client-candidate\", function (msg) {\n        if (msg.room) {\n          console.log(\"candidate received\");\n          this.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        ref: function ref(lVid) {\n          return _this2.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        ref: function ref(rVid) {\n          return _this2.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nexport default Video;","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","Video","gotLocalStream","mediaStream","localStream","localVideoRef","srcObject","GetRTCIceCandidate","window","RTCIceCandidate","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","prepareCaller","caller","console","log","onicecandidate","evt","alert","candidate","onIceCandidate","onaddstream","URL","remoteVideoRef","src","createObjectURL","stream","peer","channel","trigger","getCam","navigator","mediaDevices","getUserMedia","video","audio","callUser","user","then","toggleEndCallButton","addStream","localUserMedia","createOffer","desc","setLocalDescription","sdp","room","from","id","catch","error","subscribe","bind","msg","addIceCandidate","lVid","rVid"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nclass Video extends Component {\n    \n    componentDidMount () {\n        this.channel = pusher.subscribe('presence-videocall');\n            // navigator.mediaDevices.getUserMedia({\n            //     video: true\n            // })\n            // .then(this.gotLocalStream)\n            // .catch(err => console.log(err));\n            this.GetRTCPeerConnection();\n            this.GetRTCSessionDescription();\n            this.GetRTCIceCandidate();\n    //prepare the caller to use peerconnection\n            this.prepareCaller();\n            this.channel.bind(\"client-candidate\", function(msg) {\n                if(msg.room){\n                    console.log(\"candidate received\");\n                    this.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n                }\n            });\n    }\n\n    gotLocalStream = mediaStream => {\n        this.localStream = mediaStream;\n        this.localVideoRef.srcObject = mediaStream;\n    }\n\n     GetRTCIceCandidate = () => {\n       window.RTCIceCandidate =\n        window.RTCIceCandidate ||\n        window.webkitRTCIceCandidate ||\n        window.mozRTCIceCandidate ||\n        window.msRTCIceCandidate;\n  \n        return window.RTCIceCandidate;\n      }\n  \n       GetRTCPeerConnection = () => {\n        window.RTCPeerConnection =\n        window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n         window.msRTCPeerConnection;\n        return window.RTCPeerConnection;\n      }\n  \n       GetRTCSessionDescription = () => {\n        window.RTCSessionDescription =\n        window.RTCSessionDescription ||\n        window.webkitRTCSessionDescription ||\n        window.mozRTCSessionDescription ||\n        window.msRTCSessionDescription;\n        return window.RTCSessionDescription;\n      }\n       prepareCaller = () => {\n        //Initializing a peer connection\n        this.caller = new RTCPeerConnection();\n        console.log(this.caller);\n        //Listen for ICE Candidates and send them to remote peers\n        this.caller.onicecandidate = (evt) => {\n            alert('jjnkn');\n          if (!evt.candidate) return;\n          console.log(\"onicecandidate called\");\n          this.onIceCandidate(this.caller, evt);\n        };\n        //onaddstream handler to receive remote feed and show in remoteview video element\n        this.caller.onaddstream = (evt) => {\n          console.log(\"onaddstream called\");\n          if (window.URL) {\n            this.remoteVideoRef.src = window.URL.createObjectURL(\n              evt.stream\n            );\n          } else {\n            this.remoteVideoRef.src = evt.stream;\n          }\n        };\n      }\n      onIceCandidate = (peer, evt) => {\n          alert('called')\n        if (evt.candidate) {\n            this.channel.trigger(\"client-candidate\", {\n                \"candidate\": evt.candidate,\n                // \"room\": room\n            });\n        }\n    }\n    getCam = () => {\n        //Get local audio/video feed and show it in selfview video element\n        return navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n      }\n      //Create and send offer to remote peer on button click\n       callUser = (user) => {\n        this.getCam()\n          .then(stream => {\n            if (window.URL) {\n              this.localVideoRef.src = window.URL.createObjectURL(\n                stream\n              );\n            } else {\n                this.localVideoRef.src = stream;\n            }\n            this.toggleEndCallButton();\n            this.caller.addStream(stream);\n            this.localUserMedia = stream;\n            this.caller.createOffer().then((desc) => {\n              this.caller.setLocalDescription(new RTCSessionDescription(desc));\n              this.channel.trigger(\"client-sdp\", {\n                sdp: desc,\n                room: user,\n                from: id\n              });\n              room = user;\n            });\n          })\n          .catch(error => {\n            console.log(\"an error occured\", error);\n          });\n      }\n       toggleEndCallButton = () => {\n        // if (document.getElementById(\"endCall\").style.display == \"block\") {\n        //   document.getElementById(\"endCall\").style.display = \"none\";\n        // } else {\n        //   document.getElementById(\"endCall\").style.display = \"block\";\n        // }\n      }\n    render () {\n        return (\n            <div className={classes.Video}>\n                <video autoPlay ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\n\nexport default Video;"]},"metadata":{},"sourceType":"module"}