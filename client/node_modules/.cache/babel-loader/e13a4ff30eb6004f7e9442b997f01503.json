{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.gotLocalStream = function (mediaStream) {\n      _this.localStream = mediaStream;\n      _this.localVideoRef.srcObject = mediaStream;\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      // this.RTCIceCandidate =\n      //   this.RTCIceCandidate ||\n      //   this.webkitRTCIceCandidate ||\n      //   this.mozRTCIceCandidate ||\n      //   this.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      // this.RTCPeerConnection =\n      //   this.RTCPeerConnection ||\n      //   this.webkitRTCPeerConnection ||\n      //   this.mozRTCPeerConnection ||\n      //   this.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      // this.RTCSessionDescription =\n      //   this.RTCSessionDescription ||\n      //   this.webkitRTCSessionDescription ||\n      //   this.mozRTCSessionDescription ||\n      //   this.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.prepareCaller = function () {\n      //Initializing a peer connection\n      var caller = new window.RTCPeerConnection();\n      console.log(caller); //Listen for ICE Candidates and send them to remote peers\n\n      caller.onicecandidate = function (evt) {\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n\n        _this.onIceCandidate(caller, evt);\n      }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n      caller.onaddstream = function (evt) {\n        console.log(\"onaddstream called\");\n\n        if (_this.URL) {\n          _this.remoteVideoRef.srcObject = window.URL.createObjectURL(evt.stream);\n        } else {\n          _this.remoteVideoRef.srcObject = evt.stream;\n        }\n      };\n    };\n\n    _this.onIceCandidate = function (peer, evt) {\n      if (evt.candidate) {\n        channel.trigger(\"client-candidate\", {\n          \"candidate\": evt.candidate // \"room\": room\n\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //const channel = pusher.subscribe('presence-videocall');\n      // navigator.mediaDevices.getUserMedia({\n      //     video: true\n      // })\n      // .then(this.gotLocalStream)\n      // .catch(err => console.log(err));\n      this.GetRTCPeerConnection();\n      this.GetRTCSessionDescription();\n      this.GetRTCIceCandidate(); //prepare the caller to use peerconnection\n\n      this.prepareCaller();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        ref: function ref(lVid) {\n          return _this2.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        ref: function ref(rVid) {\n          return _this2.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nexport default Video;","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","Video","gotLocalStream","mediaStream","localStream","localVideoRef","srcObject","GetRTCIceCandidate","window","RTCIceCandidate","GetRTCPeerConnection","RTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","prepareCaller","caller","console","log","onicecandidate","evt","candidate","onIceCandidate","onaddstream","URL","remoteVideoRef","createObjectURL","stream","peer","channel","trigger","lVid","rVid"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;IACMC,K;;;;;;;;;;;;;;;;;;UAgBFC,c,GAAiB,UAAAC,WAAW,EAAI;AAC5B,YAAKC,WAAL,GAAmBD,WAAnB;AACA,YAAKE,aAAL,CAAmBC,SAAnB,GAA+BH,WAA/B;AACH,K;;UAEAI,kB,GAAqB,YAAM;AACxB;AACA;AACA;AACA;AACA;AAEA,aAAOC,MAAM,CAACC,eAAd;AACD,K;;UAEAC,oB,GAAuB,YAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAOF,MAAM,CAACG,iBAAd;AACD,K;;UAEAC,wB,GAA2B,YAAM;AAChC;AACA;AACA;AACA;AACA;AACA,aAAOJ,MAAM,CAACK,qBAAd;AACD,K;;UACAC,a,GAAgB,YAAM;AACrB;AACA,UAAMC,MAAM,GAAG,IAAIP,MAAM,CAACG,iBAAX,EAAf;AACFK,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAHuB,CAIrB;;AACAA,MAAAA,MAAM,CAACG,cAAP,GAAwB,UAACC,GAAD,EAAS;AAC/B,YAAI,CAACA,GAAG,CAACC,SAAT,EAAoB;AACpBJ,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,cAAKI,cAAL,CAAoBN,MAApB,EAA4BI,GAA5B;AACD,OAJD,CALqB,CAUrB;;;AACAJ,MAAAA,MAAM,CAACO,WAAP,GAAqB,UAACH,GAAD,EAAS;AAC5BH,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,YAAI,MAAKM,GAAT,EAAc;AACZ,gBAAKC,cAAL,CAAoBlB,SAApB,GAAgCE,MAAM,CAACe,GAAP,CAAWE,eAAX,CAC9BN,GAAG,CAACO,MAD0B,CAAhC;AAGD,SAJD,MAIO;AACL,gBAAKF,cAAL,CAAoBlB,SAApB,GAAgCa,GAAG,CAACO,MAApC;AACD;AACF,OATD;AAUD,K;;UACDL,c,GAAiB,UAACM,IAAD,EAAOR,GAAP,EAAe;AAC9B,UAAIA,GAAG,CAACC,SAAR,EAAmB;AACfQ,QAAAA,OAAO,CAACC,OAAR,CAAgB,kBAAhB,EAAoC;AAChC,uBAAaV,GAAG,CAACC,SADe,CAEhC;;AAFgC,SAApC;AAIH;AACJ,K;;;;;;;wCA3EoB;AACjB;AACI;AACA;AACA;AACA;AACA;AACA,WAAKV,oBAAL;AACA,WAAKE,wBAAL;AACA,WAAKL,kBAAL,GATa,CAUrB;;AACQ,WAAKO,aAAL;AACP;;;6BAgES;AAAA;;AACN,aACI;AAAK,QAAA,SAAS,EAAEf,OAAO,CAACE,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,GAAG,EAAE,aAAC6B,IAAD;AAAA,iBAAS,MAAI,CAACzB,aAAL,GAAqByB,IAA9B;AAAA,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,GAAG,EAAE,aAACC,IAAD;AAAA,iBAAS,MAAI,CAACP,cAAL,GAAsBO,IAA/B;AAAA,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAMH;;;;EArFejC,S;;AAwFpB,eAAeG,KAAf","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nclass Video extends Component {\n    \n    componentDidMount () {\n        //const channel = pusher.subscribe('presence-videocall');\n            // navigator.mediaDevices.getUserMedia({\n            //     video: true\n            // })\n            // .then(this.gotLocalStream)\n            // .catch(err => console.log(err));\n            this.GetRTCPeerConnection();\n            this.GetRTCSessionDescription();\n            this.GetRTCIceCandidate();\n    //prepare the caller to use peerconnection\n            this.prepareCaller();\n    }\n\n    gotLocalStream = mediaStream => {\n        this.localStream = mediaStream;\n        this.localVideoRef.srcObject = mediaStream;\n    }\n\n     GetRTCIceCandidate = () => {\n        // this.RTCIceCandidate =\n        //   this.RTCIceCandidate ||\n        //   this.webkitRTCIceCandidate ||\n        //   this.mozRTCIceCandidate ||\n        //   this.msRTCIceCandidate;\n  \n        return window.RTCIceCandidate;\n      }\n  \n       GetRTCPeerConnection = () => {\n        // this.RTCPeerConnection =\n        //   this.RTCPeerConnection ||\n        //   this.webkitRTCPeerConnection ||\n        //   this.mozRTCPeerConnection ||\n        //   this.msRTCPeerConnection;\n        return window.RTCPeerConnection;\n      }\n  \n       GetRTCSessionDescription = () => {\n        // this.RTCSessionDescription =\n        //   this.RTCSessionDescription ||\n        //   this.webkitRTCSessionDescription ||\n        //   this.mozRTCSessionDescription ||\n        //   this.msRTCSessionDescription;\n        return window.RTCSessionDescription;\n      }\n       prepareCaller = () => {\n        //Initializing a peer connection\n        const caller = new window.RTCPeerConnection();\n      console.log(caller);\n        //Listen for ICE Candidates and send them to remote peers\n        caller.onicecandidate = (evt) => {\n          if (!evt.candidate) return;\n          console.log(\"onicecandidate called\");\n          this.onIceCandidate(caller, evt);\n        };\n        //onaddstream handler to receive remote feed and show in remoteview video element\n        caller.onaddstream = (evt) => {\n          console.log(\"onaddstream called\");\n          if (this.URL) {\n            this.remoteVideoRef.srcObject = window.URL.createObjectURL(\n              evt.stream\n            );\n          } else {\n            this.remoteVideoRef.srcObject = evt.stream;\n          }\n        };\n      }\n      onIceCandidate = (peer, evt) => {\n        if (evt.candidate) {\n            channel.trigger(\"client-candidate\", {\n                \"candidate\": evt.candidate,\n                // \"room\": room\n            });\n        }\n    }\n    render () {\n        return (\n            <div className={classes.Video}>\n                <video autoPlay ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\n\nexport default Video;"]},"metadata":{},"sourceType":"module"}