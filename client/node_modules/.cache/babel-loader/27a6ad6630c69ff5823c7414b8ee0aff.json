{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/ChatScreen.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actionCreators from '../../store/actions/actionIndex';\n\nvar ChatScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      text: '',\n      showSideDrawer: false,\n      ContactNames: []\n    };\n\n    _this.scrollToBottom = function () {\n      if (_this.scrollRef && _this.props.messages.length > 0) {\n        var lastElement = _this.scrollRef.children[_this.scrollRef.children.length - 1];\n        lastElement.scrollIntoView();\n        console.log(lastElement);\n      }\n    };\n\n    _this.getMessages = function (room) {\n      _this.props.getMessages(room);\n\n      _this.scrollToBottom();\n    };\n\n    _this.onChange = function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      var data = {\n        text: _this.state.text,\n        roomId: _this.props.currentRoom.id\n      };\n\n      _this.props.sendMessage(data);\n\n      _this.setState({\n        text: ''\n      });\n    };\n\n    _this.toggleSideDrawer = function () {\n      _this.setState(function (prevState) {\n        return {\n          showSideDrawer: !prevState.showSideDrawer\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.chatInit();\n      this.props.getCallerReady();\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom(); // this.props.chatkitUser && this.props.chatkitUser.rooms.map(room => {\n      //     console.log(room.userIds)\n      //     let rooom = room.userIds.filter(name => name !== this.props.userId);\n      //     console.log(rooom)\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var chat = React.createElement(Modal, {\n        show: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n\n      if (this.props.currentRoom) {\n        chat = React.createElement(\"div\", {\n          className: classes.Chat,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(ChatScreenBar, {\n          room: this.props.currentRoom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: classes.Msgs,\n          ref: function ref(div) {\n            _this2.scrollRef = div;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, this.props.messages.map(function (msg) {\n          return React.createElement(Chat, {\n            sender: msg.senderId,\n            byCurrentUser: _this2.props.userId === msg.senderId,\n            text: msg.text,\n            key: msg.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          });\n        })), React.createElement(\"form\", {\n          onSubmit: this.onSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          onChange: this.onChange,\n          value: this.state.text,\n          name: \"text\",\n          type: \"text\",\n          placeholder: \"Enter message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        })));\n      } else {\n        chat = React.createElement(\"div\", {\n          className: classes.Chat,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      }\n\n      var contactsPane = null;\n\n      if (this.props.chatkitUser) {\n        contactsPane = React.createElement(\"div\", {\n          className: classes.ContactsPane,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(SideDrawer, {\n          show: this.state.showSideDrawer,\n          user: this.props.chatkitUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: classes.MenuBar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          onClick: this.toggleSideDrawer,\n          className: \"fa fa-bars\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        })), React.createElement(\"h1\", {\n          style: {\n            textAlign: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"Contacts\"), this.props.chatkitUser.rooms && this.props.chatkitUser.rooms.map(function (con) {\n          return React.createElement(Contact, {\n            key: con.id,\n            name: con.name,\n            room: con,\n            userId: _this2.props.userId,\n            unopenedMessages: _this2.props.unopenedMessages,\n            Active: _this2.props.currentRoom ? con.id === _this2.props.currentRoom.id : false,\n            clicked: function clicked() {\n              return _this2.getMessages(con);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          });\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ChatScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, contactsPane, chat);\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    channel: state.call.channel,\n    chatkitUser: state.chat.currentUser,\n    currentRoom: state.chat.currentRoom,\n    messages: state.chat.messages,\n    unopenedMessages: state.chat.unopenedMessages\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    chatInit: function chatInit() {\n      return dispatch(actionCreators.chatInit());\n    },\n    getCallerReady: function getCallerReady() {\n      return dispatch(actionCreators.getCallerReady());\n    },\n    getMessages: function getMessages(room) {\n      return dispatch(actionCreators.getMessages(room));\n    },\n    sendMessage: function sendMessage(data) {\n      return dispatch(actionCreators.sendMessage(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/ChatScreen.js"],"names":["React","Component","connect","Contact","Chat","classes","SideDrawer","ChatScreenBar","Modal","Spinner","actionCreators","ChatScreen","state","text","showSideDrawer","ContactNames","scrollToBottom","scrollRef","props","messages","length","lastElement","children","scrollIntoView","console","log","getMessages","room","onChange","event","setState","target","value","onSubmit","preventDefault","data","roomId","currentRoom","id","sendMessage","toggleSideDrawer","prevState","chatInit","getCallerReady","chat","Msgs","div","map","msg","senderId","userId","contactsPane","chatkitUser","ContactsPane","MenuBar","textAlign","rooms","con","name","unopenedMessages","mapStateToProps","auth","channel","call","currentUser","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actionCreators from '../../store/actions/actionIndex';\n\n\n\nclass ChatScreen extends Component {\n\n    state = {\n        text: '',\n        showSideDrawer: false,\n        ContactNames: []\n    }\n    componentDidMount () {\n        this.props.chatInit();\n        this.props.getCallerReady();\n        this.scrollToBottom();\n    }\n    scrollToBottom = () => {\n       if (this.scrollRef && this.props.messages.length > 0){\n        let lastElement = this.scrollRef.children[this.scrollRef.children.length-1];\n        lastElement.scrollIntoView();\n        console.log(lastElement);\n    }\n}\n    getMessages = room => { \n        this.props.getMessages(room);\n        this.scrollToBottom();\n    }\n\n    onChange = event => {\n        this.setState({text: event.target.value});\n    }\n    onSubmit = event => {\n        event.preventDefault();\n        let data = {\n            text: this.state.text,\n            roomId: this.props.currentRoom.id\n        }\n        this.props.sendMessage(data);\n        this.setState({text: ''});\n    }\n\n   toggleSideDrawer = () => {\n        this.setState(prevState => {\n            return {showSideDrawer: !prevState.showSideDrawer}});\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom();\n        // this.props.chatkitUser && this.props.chatkitUser.rooms.map(room => {\n        //     console.log(room.userIds)\n        //     let rooom = room.userIds.filter(name => name !== this.props.userId);\n        //     console.log(rooom)\n        // })\n    }\n    render () {  \n        \n        let chat = <Modal show={true}>\n                        <Spinner />\n                    </Modal>\n        if (this.props.currentRoom){\n            chat = (\n            <div className={classes.Chat}>\n                <ChatScreenBar room={this.props.currentRoom}/>\n                <div className={classes.Msgs} ref={(div) => {this.scrollRef = div}}>\n                {\n                    this.props.messages.map(msg => {\n                        return (\n                            <Chat sender={msg.senderId} byCurrentUser={this.props.userId === msg.senderId}\n                            text={msg.text} key={msg.id} />\n                        )\n\n                    })\n                }\n                </div>\n           \n            <form onSubmit={this.onSubmit}>\n                <input onChange={this.onChange} value={this.state.text} name='text' type=\"text\" placeholder=\"Enter message\" />\n            </form>\n            </div>\n            );\n        } else {\n            chat = (\n                <div className={classes.Chat}></div>\n            );\n        }\n        let contactsPane = null;\n        if (this.props.chatkitUser){\n            contactsPane = (\n                <div className={classes.ContactsPane} >\n                <SideDrawer show={this.state.showSideDrawer} \n                user={this.props.chatkitUser}\n                />\n                <div className={classes.MenuBar}>\n                    <i onClick = {this.toggleSideDrawer} className=\"fa fa-bars\"></i>\n                </div>\n                <h1 style={{textAlign: 'center'}}>Contacts</h1>\n                {this.props.chatkitUser.rooms && this.props.chatkitUser.rooms.map(con => {\n                    return <Contact key={con.id} name={con.name} \n                                room={con}\n                                userId={this.props.userId}\n                                unopenedMessages={this.props.unopenedMessages}\n                                Active={this.props.currentRoom ? \n                                    con.id === this.props.currentRoom.id : \n                                    false } \n                                clicked={() => this.getMessages(con)}\n                            />\n                })}\n                </div>\n            );\n            \n        }\n        return (\n            <div className={classes.ChatScreen}>\n                {contactsPane}\n                {chat}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        channel: state.call.channel,\n        chatkitUser: state.chat.currentUser,\n        currentRoom: state.chat.currentRoom,\n        messages: state.chat.messages,\n        unopenedMessages: state.chat.unopenedMessages\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        chatInit: () => dispatch(actionCreators.chatInit()),\n        getCallerReady: () => dispatch(actionCreators.getCallerReady()),\n        getMessages: room => dispatch(actionCreators.getMessages(room)),\n        sendMessage: data => dispatch(actionCreators.sendMessage(data))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);"]},"metadata":{},"sourceType":"module"}