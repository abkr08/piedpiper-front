{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Desktop/Pied Piper Chat/client/src/components/UI/OptionsDropbar/OptionsDropbar.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classes from './OptionsDropbar.module.css';\nimport * as chatActionCreators from '../../../store/actions/actionIndex';\n\nvar OptionsDropbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OptionsDropbar, _Component);\n\n  function OptionsDropbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OptionsDropbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OptionsDropbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      options: _this.props.options || []\n    };\n\n    _this.hideOptions = function (event) {\n      if (_this.optionsRef && !_this.optionsRef.contains(event.target)) {\n        _this.props.hideOptions();\n      }\n    };\n\n    _this.optionClicked = function (event, option) {\n      switch (option.name) {\n        case 'Archive chat':\n          alert('Archive chat');\n          break;\n\n        case 'Mute':\n          alert('Mute');\n          break;\n\n        case 'Delete chat' || 'Exit group':\n          _this.props.deleteChat(_this.props.roomId);\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(OptionsDropbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('click', this.hideOptions);\n      window.onresize = this.props.hideOptions;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.hideOptions);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = null;\n\n      if (this.props.show) {\n        options = React.createElement(\"ul\", {\n          ref: function ref(ul) {\n            return _this2.optionsRef = ul;\n          },\n          className: classes.OptionsDropbar,\n          style: {\n            top: this.props.position.y + 'px',\n            left: this.props.position.x - 200 + 'px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, this.state.options.map(function (option, i) {\n          return React.createElement(\"li\", {\n            key: i,\n            onClick: function onClick(event) {\n              return _this2.optionClicked(event, option);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, option.name);\n        }));\n      }\n\n      return options; // <div className={classes.OptionsDropbar}>{options}</div>;\n    }\n  }]);\n\n  return OptionsDropbar;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    deleteChat: function deleteChat(room) {\n      return dispatch(chatActionCreators.deleteChat(room));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(OptionsDropbar);","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/components/UI/OptionsDropbar/OptionsDropbar.js"],"names":["React","Component","connect","classes","chatActionCreators","OptionsDropbar","state","options","props","hideOptions","event","optionsRef","contains","target","optionClicked","option","name","alert","deleteChat","roomId","document","addEventListener","window","onresize","removeEventListener","show","ul","top","position","y","left","x","map","i","mapDispatchToProps","dispatch","room"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAO,KAAKC,kBAAZ,MAAoC,oCAApC;;IAEMC,c;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,OAAO,EAAE,MAAKC,KAAL,CAAWD,OAAX,IAAsB;AAD3B,K;;UAORE,W,GAAc,UAAAC,KAAK,EAAI;AACnB,UAAI,MAAKC,UAAL,IAAmB,CAAC,MAAKA,UAAL,CAAgBC,QAAhB,CAAyBF,KAAK,CAACG,MAA/B,CAAxB,EAA+D;AAC3D,cAAKL,KAAL,CAAWC,WAAX;AACH;AACJ,K;;UAIDK,a,GAAgB,UAACJ,KAAD,EAAQK,MAAR,EAAmB;AAC/B,cAAOA,MAAM,CAACC,IAAd;AACI,aAAK,cAAL;AACIC,UAAAA,KAAK,CAAC,cAAD,CAAL;AACA;;AACJ,aAAK,MAAL;AACIA,UAAAA,KAAK,CAAC,MAAD,CAAL;AACA;;AACJ,aAAK,iBAAiB,YAAtB;AACI,gBAAKT,KAAL,CAAWU,UAAX,CAAsB,MAAKV,KAAL,CAAWW,MAAjC;;AACA;;AACJ;AACI;AAXR;AAaH,K;;;;;;;wCA1BoB;AACjBC,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKZ,WAAxC;AACAa,MAAAA,MAAM,CAACC,QAAP,GAAkB,KAAKf,KAAL,CAAWC,WAA7B;AACH;;;2CAMqB;AAClBW,MAAAA,QAAQ,CAACI,mBAAT,CAA6B,OAA7B,EAAsC,KAAKf,WAA3C;AACH;;;6BAgBO;AAAA;;AACJ,UAAIF,OAAO,GAAG,IAAd;;AACA,UAAI,KAAKC,KAAL,CAAWiB,IAAf,EAAoB;AAChBlB,QAAAA,OAAO,GACH;AAAI,UAAA,GAAG,EAAG,aAAAmB,EAAE;AAAA,mBAAI,MAAI,CAACf,UAAL,GAAkBe,EAAtB;AAAA,WAAZ;AAAsC,UAAA,SAAS,EAAEvB,OAAO,CAACE,cAAzD;AAAyE,UAAA,KAAK,EAAE;AAACsB,YAAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWoB,QAAX,CAAoBC,CAApB,GAAyB,IAA/B;AAChFC,YAAAA,IAAI,EAAE,KAAKtB,KAAL,CAAWoB,QAAX,CAAoBG,CAApB,GAAwB,GAAxB,GAA8B;AAD4C,WAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGK,KAAKzB,KAAL,CAAWC,OAAX,CAAmByB,GAAnB,CAAuB,UAACjB,MAAD,EAASkB,CAAT,EAAe;AACnC,iBAAO;AAAI,YAAA,GAAG,EAAEA,CAAT;AAAY,YAAA,OAAO,EAAE,iBAACvB,KAAD;AAAA,qBAAS,MAAI,CAACI,aAAL,CAAmBJ,KAAnB,EAA0BK,MAA1B,CAAT;AAAA,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAmEA,MAAM,CAACC,IAA1E,CAAP;AACH,SAFA,CAHL,CADJ;AASH;;AACD,aAAOT,OAAP,CAbI,CAcJ;AACH;;;;EA/CwBN,S;;AAiD7B,IAAMiC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnC,SAAO;AACHjB,IAAAA,UAAU,EAAE,oBAAAkB,IAAI;AAAA,aAAID,QAAQ,CAAC/B,kBAAkB,CAACc,UAAnB,CAA8BkB,IAA9B,CAAD,CAAZ;AAAA;AADb,GAAP;AAGH,CAJD;;AAKA,eAAelC,OAAO,CAAC,IAAD,EAAOgC,kBAAP,CAAP,CAAkC7B,cAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classes from './OptionsDropbar.module.css';\nimport * as chatActionCreators from '../../../store/actions/actionIndex';\n\nclass OptionsDropbar extends Component {\n\n    state = {\n        options: this.props.options || []\n    }\n    componentDidMount () {\n        document.addEventListener('click', this.hideOptions);\n        window.onresize = this.props.hideOptions;\n    }\n    hideOptions = event => {\n        if (this.optionsRef && !this.optionsRef.contains(event.target)){\n            this.props.hideOptions();\n        }\n    }\n    componentWillUnmount(){\n        document.removeEventListener('click', this.hideOptions);\n    }\n    optionClicked = (event, option) => {\n        switch(option.name){\n            case 'Archive chat':\n                alert('Archive chat');\n                break;\n            case 'Mute': \n                alert('Mute');\n                break;\n            case 'Delete chat' || 'Exit group':\n                this.props.deleteChat(this.props.roomId)\n                break;\n            default:\n                break;\n        }\n    }\n    render(){\n        let options = null;\n        if (this.props.show){\n            options = (\n                <ul ref={ ul => this.optionsRef = ul} className={classes.OptionsDropbar} style={{top: this.props.position.y  + 'px',\n                left: this.props.position.x - 200 + 'px'\n                }}>\n                    {this.state.options.map((option, i) => {\n                        return <li key={i} onClick={(event)=>this.optionClicked(event, option)} >{option.name}</li>\n                    })}\n                </ul>\n            )\n        }\n        return options;\n        // <div className={classes.OptionsDropbar}>{options}</div>;\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        deleteChat: room => dispatch(chatActionCreators.deleteChat(room))\n    }\n}\nexport default connect(null, mapDispatchToProps)(OptionsDropbar);"]},"metadata":{},"sourceType":"module"}