{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store } from '../../../index';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nvar userId = localStorage.getItem('userId');\nvar sdp, callType;\nvar state = null;\nvar room = null; //setInterval(()=> console.log(caller.signalingState), 4000);\n\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {\n  console.log(member);\n});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id === room) {//   alert('call Ended');\n  }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  if (msg.room === room) {\n    addIceCandidate(new RTCIceCandidate(msg.candidate));\n  }\n});\nchannel.bind(\"client-sdp\", function (msg) {\n  alert(msg.room + ' and ' + userId);\n\n  if (msg.room === userId) {\n    store.dispatch({\n      type: actionTypes.ON_INCOMING_CALL,\n      callType: msg.callType,\n      caller: msg.from\n    }); // console.log(store);   \n    // setTimeout(() => {\n    //     channel.trigger(\"client-reject\", { room: msg.room, rejected: userId });\n    // }, 15000)\n    // while (!state){\n    // }\n\n    room = msg.room;\n    sdp = msg.sdp;\n    state = 'answerCall';\n    getCam();\n  }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  alert('line 48--' + answer.room, room);\n\n  if (answer.room === room) {\n    // alert(\"answer received\");\n    var sessionDesc = new RTCSessionDescription(answer.sdp);\n    setRemoteDescription(sessionDesc);\n  }\n});\nexport var callAccepted = function callAccepted() {\n  // alert('call accepted in room--57 ' + room);\n  return function (dispatch) {\n    state = 'answerCall'; // getCam(room);\n\n    dispatch({\n      type: actionTypes.CALL_ACCEPTED\n    });\n  };\n};\nexport var callRejected = function callRejected() {\n  return function (dispatch) {\n    channel.trigger(\"client-reject\", {\n      room: room,\n      rejected: userId\n    });\n    dispatch({\n      type: actionTypes.CALL_REJECTED\n    });\n  };\n};\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n}; //Create and send offer to remote peer on button click\n\n\nexport var callUser = function callUser(user, Type) {\n  // room = user;\n  callType = Type;\n  return function (dispatch) {\n    getCam(user);\n    dispatch({\n      type: actionTypes.CALL_INIT\n    });\n  };\n};\n\nvar getCam = function getCam() {\n  alert('line 86--' + room);\n  getMedia().then(function (stream) {\n    store.dispatch(onLocalStream(stream));\n    stream.getTracks().forEach(function (track) {\n      caller.addTrack(track, stream);\n    });\n\n    if (!state) {\n      createOffer(); // state = 'answerCall';\n    } else {\n      var sessionDesc = new RTCSessionDescription(sdp);\n      setRemoteDescription(sessionDesc); // alert('line 97--' + state + \" \" + room);\n\n      createAnswer();\n      state = null;\n    }\n  }).catch(function (error) {\n    console.log(\"an error occured\", error);\n  });\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: callType === 'video' ? {\n      width: 1280,\n      height: 720,\n      frameRate: 15\n    } : false,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    dispatch(prepareCaller(channel)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      onIceCandidate(caller, evt);\n    }; //ontrack handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      dispatch(onTrack(evt));\n    };\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nvar addIceCandidate = function addIceCandidate(iceCandidate) {\n  return caller.addIceCandidate(iceCandidate);\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate,\n      room: room\n    });\n  }\n};\n\nvar setLocalDescription = function setLocalDescription(sessionDesc) {\n  return caller.setLocalDescription(sessionDesc);\n};\n\nvar setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  return caller.setRemoteDescription(sessionDesc);\n};\n\nvar addTrack = function addTrack(track, stream) {\n  caller.addTrack(track, stream);\n};\n\nvar createAnswer = function createAnswer() {\n  // alert('createAnswer room: ' + receiver);\n  caller.createAnswer().then(function (sdp) {\n    var sessionDesc = new RTCSessionDescription(sdp);\n    setLocalDescription(sessionDesc);\n    channel.trigger(\"client-answer\", {\n      sdp: sdp,\n      room: room\n    });\n  });\n  ;\n};\n\nvar createOffer = function createOffer() {\n  alert('createOffer room--180: ' + room);\n  caller.createOffer({\n    offerToReceiveVideo: true,\n    offerToReceiveAudio: true\n  }).then(function (desc) {\n    var sessionDesc = new RTCSessionDescription(desc);\n    setLocalDescription(sessionDesc);\n    alert('createOffer room--184: ' + room);\n    channel.trigger(\"client-sdp\", {\n      sdp: desc,\n      room: room,\n      from: userId,\n      callType: callType\n    });\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\n\nexport var endCall = function endCall() {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.END_CALL\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","store","channel","subscribe","caller","window","RTCPeerConnection","userId","localStorage","getItem","sdp","callType","state","room","bind","members","member","console","log","id","msg","addIceCandidate","RTCIceCandidate","candidate","alert","dispatch","type","ON_INCOMING_CALL","from","getCam","answer","sessionDesc","RTCSessionDescription","setRemoteDescription","callAccepted","CALL_ACCEPTED","callRejected","trigger","rejected","CALL_REJECTED","onLocalStream","stream","ON_LOCAL_STREAM","callUser","user","Type","CALL_INIT","getMedia","then","getTracks","forEach","track","addTrack","createOffer","createAnswer","catch","error","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","audio","prepareCaller","PREPARE_CALLER","getCallerReady","onicecandidate","evt","onIceCandidate","ontrack","onTrack","ON_TRACK","remoteStream","streams","iceCandidate","peer","setLocalDescription","offerToReceiveVideo","offerToReceiveAudio","desc","err","endCall","END_CALL"],"mappings":"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","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store }  from '../../../index';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\nconst userId = localStorage.getItem('userId');\nlet sdp, callType;\nlet state = null;\nlet room = null;\n//setInterval(()=> console.log(caller.signalingState), 4000);\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n         \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n    console.log(member);\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n    if (member.id === room) {\n    //   alert('call Ended');\n    }\n    \n});\nchannel.bind(\"client-candidate\", msg => {\n    if (msg.room === room) {\n      addIceCandidate(new RTCIceCandidate(msg.candidate));\n    }\n});\nchannel.bind(\"client-sdp\", msg => {\n    alert(msg.room + ' and ' + userId);\n    if (msg.room === userId) {\n        store.dispatch({type: actionTypes.ON_INCOMING_CALL, callType: msg.callType, caller: msg.from});\n        // console.log(store);   \n        // setTimeout(() => {\n            //     channel.trigger(\"client-reject\", { room: msg.room, rejected: userId });\n            // }, 15000)\n        // while (!state){\n\n        // }\n        room = msg.room;\n        sdp = msg.sdp;\n        state = 'answerCall';\n        getCam();\n        }\n});\n\n    channel.bind(\"client-answer\", answer => {\n        alert('line 48--' + answer.room, room);\n        if (answer.room === room) {\n            // alert(\"answer received\");\n            let sessionDesc = new RTCSessionDescription(answer.sdp);\n            setRemoteDescription(sessionDesc);\n        }\n        });\n    \nexport const callAccepted = () => {\n    // alert('call accepted in room--57 ' + room);\n    return dispatch => {\n        state = 'answerCall';\n        // getCam(room);\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\nexport const callRejected = () => {\n    return dispatch => {\n        channel.trigger(\"client-reject\", { room: room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\n//Create and send offer to remote peer on button click\nexport const callUser = (user, Type) => {\n    // room = user;\n    callType = Type;\n    return dispatch => {\n        getCam(user);\n        dispatch({type: actionTypes.CALL_INIT})\n    }\n  }    \nconst getCam = () => {\n    alert('line 86--' + room);\n    getMedia().then(stream => {\n        store.dispatch(onLocalStream(stream));\n        stream.getTracks().forEach(track => {\n            caller.addTrack(track, stream)\n        });    \n            if (!state){\n                createOffer();\n                // state = 'answerCall';\n            } else {\n        let sessionDesc = new RTCSessionDescription(sdp);\n        setRemoteDescription(sessionDesc);\n        // alert('line 97--' + state + \" \" + room);\n        createAnswer();\n        state = null;\n            }\n        })\n        .catch(error => {\n          console.log(\"an error occured\", error);\n        });\n}\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: callType === 'video' ? {width: 1280,\n            height: 720,\n            frameRate: 15}: false,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\n\nexport const getCallerReady = () => {\n    return dispatch => {\n     dispatch(prepareCaller(channel));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      onIceCandidate(caller, evt);\n    };\n    //ontrack handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n        dispatch(onTrack(evt));\n    };\n    }\n}\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\nconst addIceCandidate = iceCandidate => {\n    return caller.addIceCandidate(iceCandidate);\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {   \n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        room: room\n      });\n    }\n  }\n\nconst setLocalDescription = sessionDesc => {\n    return caller.setLocalDescription(sessionDesc);\n}\n\nconst setRemoteDescription = sessionDesc => {\n    return caller.setRemoteDescription(sessionDesc);\n}\n\nconst addTrack = (track, stream) => {\n  caller.addTrack(track, stream);\n}\n\nconst createAnswer = () => {\n    // alert('createAnswer room: ' + receiver);\n    caller.createAnswer().then(sdp => {\n        let sessionDesc = new RTCSessionDescription(sdp);\n        setLocalDescription(sessionDesc);\n        channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: room\n        });\n    });;\n}\n\nconst createOffer = () => {    \n    alert('createOffer room--180: ' + room)    \n    caller.createOffer({offerToReceiveVideo: true, offerToReceiveAudio: true}).then(desc => {\n        let sessionDesc = new RTCSessionDescription(desc);\n        setLocalDescription(sessionDesc);\n        alert('createOffer room--184: ' + room) \n        channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: room,\n            from: userId,\n            callType: callType\n        });\n    })\n    .catch(err => console.log(err));\n}\nexport const endCall = () => {\n    return dispatch => {\n        dispatch({type: actionTypes.END_CALL});\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}