{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nvar channel = pusher.subscribe('presence-videocall');\n\nvar prepareCaller = function prepareCaller(channel, caller, remoteStream) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel,\n    caller: caller\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.stream\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    var caller = new window.RTCPeerConnection({\n      'iceServers': [{\n        'urls': 'stun:stun.l.google.com:19302'\n      }]\n    });\n    dispatch(prepareCaller(channel, caller)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      console.log(evt); //this.remoteVideoRef.srcObject = evt.stream;\n\n      dispatch(onTrack(evt));\n    };\n  };\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate // room: room\n\n    });\n  }\n};","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","channel","subscribe","prepareCaller","caller","remoteStream","type","PREPARE_CALLER","onTrack","track","ON_TRACK","stream","getCallerReady","dispatch","window","RTCPeerConnection","onicecandidate","evt","candidate","console","log","onIceCandidate","ontrack","peer","trigger"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,YAA7B;AAEA,IAAMC,OAAO,GAAGF,MAAM,CAACG,SAAP,CAAiB,oBAAjB,CAAhB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACF,OAAD,EAAUG,MAAV,EAAkBC,YAAlB,EAAmC;AACrD,SAAO;AACHC,IAAAA,IAAI,EAAEN,WAAW,CAACO,cADf;AAEHN,IAAAA,OAAO,EAAEA,OAFN;AAGHG,IAAAA,MAAM,EAAEA;AAHL,GAAP;AAKH,CAND;;AAOA,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AACrB,SAAM;AACFH,IAAAA,IAAI,EAAEN,WAAW,CAACU,QADhB;AAEFL,IAAAA,YAAY,EAAEI,KAAK,CAACE;AAFlB,GAAN;AAKH,CAND;;AAOA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAChC,SAAO,UAAAC,QAAQ,EAAI;AAClB,QAAMT,MAAM,GAAG,IAAIU,MAAM,CAACC,iBAAX,CAA6B;AAAC,oBAAa,CAAC;AAAC,gBAAO;AAAR,OAAD;AAAd,KAA7B,CAAf;AACAF,IAAAA,QAAQ,CAACV,aAAa,CAACF,OAAD,EAAUG,MAAV,CAAd,CAAR,CAFkB,CAGnB;;AACAA,IAAAA,MAAM,CAACY,cAAP,GAAwB,UAAAC,GAAG,EAAI;AAC7B,UAAI,CAACA,GAAG,CAACC,SAAT,EAAoB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAI,MAAAA,cAAc,CAACjB,MAAD,EAASa,GAAT,CAAd;AACD,KALD,CAJmB,CAUnB;;;AACAb,IAAAA,MAAM,CAACkB,OAAP,GAAiB,UAAAL,GAAG,EAAI;AACtBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EADsB,CAE1B;;AACAJ,MAAAA,QAAQ,CAACL,OAAO,CAACS,GAAD,CAAR,CAAR;AACG,KAJD;AAKC,GAhBD;AAiBH,CAlBM;;AAoBP,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACE,IAAD,EAAON,GAAP,EAAe;AAClC,MAAIA,GAAG,CAACC,SAAR,EAAmB;AACjBjB,IAAAA,OAAO,CAACuB,OAAR,CAAgB,kBAAhB,EAAoC;AAClCN,MAAAA,SAAS,EAAED,GAAG,CAACC,SADmB,CAElC;;AAFkC,KAApC;AAID;AACF,CAPH","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\n\nconst channel = pusher.subscribe('presence-videocall');\n\nconst prepareCaller = (channel, caller, remoteStream) => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel,\n        caller: caller,\n    }\n}\nconst onTrack = track => {\n    return{\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.stream\n\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n     const caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n     dispatch(prepareCaller(channel, caller));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    };\n    //onaddstream handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n      console.log(evt);\n  //this.remoteVideoRef.srcObject = evt.stream;\n  dispatch(onTrack(evt));\n    };\n    }\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {\n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        // room: room\n      });\n    }\n  }"]},"metadata":{},"sourceType":"module"}