{"ast":null,"code":"import _slicedToArray from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/Contact.js\";\nimport React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../images/p37605.png';\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar';\n\nvar contact = function contact(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showOptions = _useState2[0],\n      toggleShowOptions = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      updatePosition = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      name = _useState6[0],\n      setName = _useState6[1];\n\n  var contactName = props.room.userIds.filter(function (username) {\n    return username !== props.user;\n  }).join('');\n  setName(contactName);\n\n  var showOptionsHandler = function showOptionsHandler(event) {\n    var pos = {};\n    pos.x = event.clientX + 200;\n    pos.y = event.clientY;\n    toggleShowOptions(true);\n    updatePosition(pos);\n  };\n\n  var hideOptions = function hideOptions() {\n    toggleShowOptions(false);\n    updatePosition({});\n  };\n\n  useEffect(function () {\n    if (props.room.isPrivate && contactName) {\n      console.log(props.room.userIds);\n      setName(contactName);\n    } else {\n      setName(props.room.name);\n    }\n  }); // setInterval(()=> console.log(name), 1000)\n\n  var attachedClasses = [classes.Contact];\n  var unreadMessages = \"\";\n\n  if (props.Active) {\n    attachedClasses.push(classes.Active);\n  }\n\n  if (props.unopenedMessages[props.id]) {\n    unreadMessages = props.unopenedMessages[props.id].length;\n  }\n\n  var contact = null;\n\n  if (name !== '') {\n    contact = React.createElement(\"div\", {\n      className: attachedClasses.join(' '),\n      onClick: props.clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: img,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, props.lastMessage)), React.createElement(\"div\", {\n      className: classes.FloatedRight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, unreadMessages), React.createElement(\"i\", {\n      onClick: showOptionsHandler,\n      className: \"fa fa-angle-down\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), showOptions && React.createElement(OptionsDropbar, {\n      position: position // optionClicked={(event, option) => this.optionClicked(option)}\n      ,\n      roomId: props.room.id,\n      show: showOptions,\n      hideOptions: hideOptions,\n      options: [{\n        name: 'Archive chat'\n      }, {\n        name: 'Mute'\n      }, {\n        name: !props.room.isPrivate ? 'Exit group' : 'Delete chat'\n      }, {\n        name: 'Pin chat'\n      }, {\n        name: 'Mark as unread'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })));\n  }\n\n  return contact;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps)(contact);","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/Contact.js"],"names":["React","useState","useEffect","classes","img","connect","OptionsDropbar","contact","props","showOptions","toggleShowOptions","position","updatePosition","name","setName","contactName","room","userIds","filter","username","user","join","showOptionsHandler","event","pos","x","clientX","y","clientY","hideOptions","isPrivate","console","log","attachedClasses","Contact","unreadMessages","Active","push","unopenedMessages","id","length","clicked","lastMessage","FloatedRight","mapStateToProps","state","userId","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../images/p37605.png'\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar'\n\nconst contact = props => {\n    const [showOptions, toggleShowOptions] = useState(false);\n    const [position, updatePosition] = useState({});\n    const [name, setName] = useState('');\n    const contactName = props.room.userIds.filter(username => username !== props.user).join('');\n    setName(contactName);\n    const showOptionsHandler = event => {\n        let pos = {};\n        pos.x = event.clientX + 200;\n        pos.y = event.clientY;\n        toggleShowOptions(true);\n        updatePosition(pos)\n    }\n    const hideOptions = () => {\n        toggleShowOptions(false);\n        updatePosition({})\n    }\n    \n    useEffect(()=> {\n        if(props.room.isPrivate && contactName){\n            console.log(props.room.userIds)\n            setName(contactName);\n        } else {\n            setName(props.room.name);\n        }\n        \n    });\n    // setInterval(()=> console.log(name), 1000)\n    let attachedClasses = [classes.Contact];\n    let unreadMessages = \"\";\n    if (props.Active){\n        attachedClasses.push(classes.Active); \n    }\n    if (props.unopenedMessages[props.id]){\n        unreadMessages = props.unopenedMessages[props.id].length;\n    }\n    let contact = null;\n    if (name !== ''){\n        contact = (<div className={attachedClasses.join(' ')} onClick={props.clicked}>\n        <img src={img} alt=''/>\n        <div>\n            <p>{name}</p>\n            <p>{props.lastMessage}</p>\n        </div>\n        <div className={classes.FloatedRight}>\n            <span>{unreadMessages}</span>\n            <i onClick={showOptionsHandler} className=\"fa fa-angle-down\"></i>\n            { showOptions && \n                <OptionsDropbar position={position} \n                        // optionClicked={(event, option) => this.optionClicked(option)}\n                        roomId={props.room.id}\n                        show={showOptions} \n                        hideOptions={hideOptions}\n                        options={[{name: 'Archive chat'},\n                        {name: 'Mute'},\n                        {name: !props.room.isPrivate? 'Exit group':'Delete chat'},\n                        {name: 'Pin chat'},\n                        {name: 'Mark as unread'}\n                        ]}/>}\n        </div>\n    </div>\n        )\n    }\n    return contact; \n}\nconst mapStateToProps = state => {\n    return {\n         userId: state.auth.userId\n    }\n}\nexport default connect(mapStateToProps)(contact);"]},"metadata":{},"sourceType":"module"}