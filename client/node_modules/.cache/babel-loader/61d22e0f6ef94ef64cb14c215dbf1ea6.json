{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/PiperChat/ChatScreen.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as callActionCreators from '../../store/actions/actionIndex';\n\nvar ChatScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      contacts: [],\n      room: null,\n      text: '',\n      messages: [],\n      showSideDrawer: false\n    };\n\n    _this.getChannelReady = function () {\n      console.log(_this.props);\n\n      _this.props.channel.bind(\"client-candidate\", function (msg) {\n        // if (msg.room === this.state.room) {\n        _this.props.addIceCandidate(new RTCIceCandidate(msg.candidate)); //}\n\n      });\n\n      _this.props.channel.bind(\"client-sdp\", function (msg) {\n        alert('You\\'ve got a call!!');\n      });\n    };\n\n    _this.scrollToBottom = function () {\n      if (_this.scrollRef && _this.state.messages.length > 0) {\n        var lastElement = _this.scrollRef.children[_this.scrollRef.children.length - 1];\n        lastElement.scrollIntoView(\"smooth\");\n      }\n    };\n\n    _this.getRooms = function () {\n      _this.setState({\n        contacts: _this.currentUser.rooms\n      }); //Subscribe to all rooms\n\n\n      _this.state.contacts.map(function (con) {\n        return _this.currentUser.subscribeToRoom({\n          roomId: con.id,\n          hooks: {\n            onMessage: function onMessage(message) {\n              //this.setState({messages: [...this.state.messages, message]});\n              _this.getMessages(message.room);\n\n              _this.scrollToBottom();\n            }\n          },\n          messageLimit: 100\n        });\n      });\n    };\n\n    _this.getMessages = function (room) {\n      _this.setState({\n        room: room\n      });\n\n      _this.currentUser.fetchMessages({\n        roomId: room['id'],\n        //initialId: 42,\n        direction: 'older',\n        limit: 100\n      }).then(function (messages) {\n        _this.setState({\n          messages: messages\n        });\n\n        _this.scrollToBottom();\n      }).catch(function (err) {\n        console.log(\"Error fetching messages: \".concat(err));\n      });\n    };\n\n    _this.onChange = function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n\n      _this.currentUser.sendMessage({\n        text: _this.state.text,\n        roomId: _this.state.room.id\n      });\n\n      _this.setState({\n        text: ''\n      });\n    };\n\n    _this.toggleSideDrawer = function () {\n      _this.setState(function (prevState) {\n        return {\n          showSideDrawer: !prevState.showSideDrawer\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var chatManager = new ChatManager({\n        instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n        userId: this.props.userId,\n        tokenProvider: new TokenProvider({\n          url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n        })\n      });\n      chatManager.connect({\n        onAddedToRoom: function onAddedToRoom(room) {\n          _this2.getRooms();\n\n          _this2.setState({\n            showSideDrawer: false,\n            room: room\n          });\n\n          _this2.getMessages(room);\n        }\n      }).then(function (user) {\n        _this2.currentUser = user;\n\n        _this2.getRooms();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n      this.scrollToBottom();\n      this.props.prepareCaller();\n      this.getChannelReady();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var chat = React.createElement(\"div\", {\n        className: classes.Chat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n\n      if (this.state.room) {\n        chat = React.createElement(\"div\", {\n          className: classes.Chat,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(ChatScreenBar, {\n          room: this.state.room,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: classes.Msgs,\n          ref: function ref(div) {\n            _this3.scrollRef = div;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, this.state.messages.map(function (msg) {\n          return React.createElement(Chat, {\n            sender: msg.senderId,\n            byCurrentUser: _this3.props.userId === msg.senderId,\n            text: msg.text,\n            key: msg.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          });\n        })), React.createElement(\"form\", {\n          onSubmit: this.onSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          onChange: this.onChange,\n          value: this.state.text,\n          name: \"text\",\n          type: \"text\",\n          placeholder: \"Enter message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        })));\n      } else {\n        chat = React.createElement(Modal, {\n          show: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ChatScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.ContactsPane,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(SideDrawer, {\n        show: this.state.showSideDrawer,\n        user: this.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.MenuBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        onClick: this.toggleSideDrawer,\n        className: \"fa fa-bars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Contacts\"), this.state.room && this.state.contacts.map(function (con) {\n        return React.createElement(Contact, {\n          key: con.id,\n          name: con.name,\n          Active: con.id === _this3.state.room.id,\n          clicked: function clicked() {\n            return _this3.getMessages(con);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        });\n      })), chat);\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    channel: state.call.channel\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    prepareCaller: function prepareCaller() {\n      return dispatch(callActionCreators.getCallerReady());\n    },\n    addIceCandidate: function addIceCandidate(iceCandidate) {\n      return dispatch(callActionCreators.addIceCandidate(iceCandidate));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/PiperChat/ChatScreen.js"],"names":["React","Component","connect","ChatManager","TokenProvider","Contact","Chat","classes","SideDrawer","ChatScreenBar","Modal","Spinner","callActionCreators","ChatScreen","state","contacts","room","text","messages","showSideDrawer","getChannelReady","console","log","props","channel","bind","msg","addIceCandidate","RTCIceCandidate","candidate","alert","scrollToBottom","scrollRef","length","lastElement","children","scrollIntoView","getRooms","setState","currentUser","rooms","map","con","subscribeToRoom","roomId","id","hooks","onMessage","message","getMessages","messageLimit","fetchMessages","direction","limit","then","catch","err","onChange","event","target","value","onSubmit","preventDefault","sendMessage","toggleSideDrawer","prevState","chatManager","instanceLocator","userId","tokenProvider","url","onAddedToRoom","user","prepareCaller","chat","Msgs","div","senderId","ContactsPane","MenuBar","textAlign","name","mapStateToProps","auth","call","mapDispatchToProps","dispatch","getCallerReady","iceCandidate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as callActionCreators from '../../store/actions/actionIndex';\n\n\n\nclass ChatScreen extends Component {\n\n    state = {\n        contacts: [],\n        room: null,\n        text: '',\n        messages: [],\n        showSideDrawer: false\n    }\n\n    componentDidMount () {\n        const chatManager = new ChatManager({\n            instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n            userId: this.props.userId,\n            tokenProvider: new TokenProvider({\n                url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n            }),\n        })\n      chatManager\n        .connect({\n            onAddedToRoom: room => {\n\n                this.getRooms();\n                this.setState({showSideDrawer: false, room: room});\n                this.getMessages(room);\n            }\n        })\n        .then(user => {\n            this.currentUser = user;\n            this.getRooms();\n\n        })\n        .catch(err => console.log(err));\n        \n            this.scrollToBottom();\n            this.props.prepareCaller();\n            this.getChannelReady();\n    }\n\n    getChannelReady = () => {\n        console.log(this.props);\n        this.props.channel.bind(\"client-candidate\", msg => {\n\n            // if (msg.room === this.state.room) {\n              this.props.addIceCandidate(new RTCIceCandidate(msg.candidate));\n            //}\n          });\n        this.props.channel.bind(\"client-sdp\", msg => {\n              alert('You\\'ve got a call!!');\n          });\n    }\n\n    scrollToBottom = () => {\n       if (this.scrollRef && this.state.messages.length > 0){\n        let lastElement = this.scrollRef.children[this.scrollRef.children.length-1];\n        lastElement.scrollIntoView(\"smooth\");\n    }\n}\n    getRooms = () => {\n        this.setState({contacts: this.currentUser.rooms});\n        //Subscribe to all rooms\n        this.state.contacts.map(con => {\n           return  this.currentUser.subscribeToRoom({\n                roomId: con.id,\n                hooks: {\n                  onMessage: message => {\n                    //this.setState({messages: [...this.state.messages, message]});\n                    this.getMessages(message.room);\n                    this.scrollToBottom();\n                  }\n                },\n                messageLimit: 100\n              })\n        })\n    }\n    getMessages = room => { \n        \n        this.setState({room: room});\n        this.currentUser.fetchMessages({\n            roomId: room['id'],\n            //initialId: 42,\n            direction: 'older',\n            limit: 100,\n          })\n            .then(messages => {\n              this.setState({messages});\n              this.scrollToBottom();\n            })\n            .catch(err => {\n              console.log(`Error fetching messages: ${err}`)\n            })\n    }\n\n    onChange = event => {\n        this.setState({text: event.target.value});\n    }\n    onSubmit = event => {\n        event.preventDefault();\n        this.currentUser.sendMessage({\n            text: this.state.text,\n            roomId: this.state.room.id\n        })\n        this.setState({text: ''});\n    }\n\n   toggleSideDrawer = () => {\n        this.setState(prevState => {\n            return {showSideDrawer: !prevState.showSideDrawer}});\n    }\n\n    render () {\n        \n        let chat = <div className={classes.Chat}></div>;\n        if (this.state.room){\n            chat = (\n            <div className={classes.Chat}>\n                <ChatScreenBar room={this.state.room}/>\n                <div className={classes.Msgs} ref={(div) => {this.scrollRef = div}}>\n                {\n                    this.state.messages.map(msg => {\n                        return <Chat sender={msg.senderId} byCurrentUser={this.props.userId === msg.senderId} text={msg.text} key={msg.id} />\n                    })\n                }\n                </div>\n           \n            <form onSubmit={this.onSubmit}>\n                <input onChange={this.onChange} value={this.state.text} name='text' type=\"text\" placeholder=\"Enter message\" />\n            </form>\n            </div>\n            );\n        } else {\n            chat = (\n                    <Modal show={true}>\n                        <Spinner />\n                    </Modal>\n            );\n        }\n        return (\n            <div className={classes.ChatScreen}>\n                <div className={classes.ContactsPane} >\n                <SideDrawer show={this.state.showSideDrawer} \n                user={this.currentUser}\n                />\n                <div className={classes.MenuBar}>\n                    <i onClick = {this.toggleSideDrawer} className=\"fa fa-bars\"></i>\n                </div>\n                <h1 style={{textAlign: 'center'}}>Contacts</h1>\n                {this.state.room && this.state.contacts.map(con => {\n                    return <Contact key={con.id} name={con.name} Active={con.id === this.state.room.id} clicked={() => this.getMessages(con)}/>\n                })}\n                </div>\n                {chat}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        channel: state.call.channel\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        prepareCaller: () => dispatch(callActionCreators.getCallerReady()),\n        addIceCandidate: iceCandidate => dispatch(callActionCreators.addIceCandidate(iceCandidate))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);"]},"metadata":{},"sourceType":"module"}