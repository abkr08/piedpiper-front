{"ast":null,"code":"import { store } from '../../../index';\nimport * as actionTypes from '../actions';\nimport io from 'socket.io-client';\nvar name;\nvar connectedUser;\nvar userId = localStorage.getItem('userId');\nvar config = {}; //connecting to our signaling server\n\nvar conn = io('http://localhost:8082');\nvar configuration = {\n  \"iceServers\": [{\n    \"url\": \"stun:stun2.1.google.com:19302\"\n  }]\n};\nvar yourConn = new RTCPeerConnection(configuration); //when a remote user adds stream to the peer connection, we display it \n\nyourConn.ontrack = function (stream) {\n  console.log('got remote stream');\n  console.log(stream);\n  store.dispatch(onTrack(stream));\n}; // Setup ice handling \n\n\nyourConn.onicecandidate = function (event) {\n  if (event.candidate) {\n    send({\n      type: \"candidate\",\n      candidate: event.candidate\n    });\n  }\n};\n\nvar stream = null;\nconsole.log(conn);\nconn.on('connection', function () {\n  console.log(\"Connected to the signaling server\");\n});\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    send({\n      type: \"login\",\n      name: userId\n    });\n    dispatch(prepareCaller(conn));\n  };\n}; //when we got a message from a signaling server \n\nconn.on('message', function (msg) {\n  console.log(\"Got message\", msg);\n  var data = JSON.parse(msg);\n\n  switch (data.type) {\n    case \"login\":\n      //  handleLogin(data.success); \n      console.log('logged in');\n      break;\n    //when somebody wants to call us \n\n    case \"offer\":\n      handleOffer(data.offer, data.name);\n      break;\n\n    case \"answer\":\n      handleAnswer(data.answer, data.from);\n      break;\n    //when a remote peer sends an ice candidate to us \n\n    case \"candidate\":\n      handleCandidate(data.candidate);\n      break;\n\n    case \"leave\":\n      handleLeave();\n      break;\n\n    default:\n      break;\n  }\n});\n\nconn.onerror = function (err) {\n  console.log(\"Got error\", err);\n}; //alias for sending JSON encoded messages \n\n\nfunction send(message) {\n  //attach the other peer username to our messages \n  if (connectedUser) {\n    message.name = connectedUser;\n  }\n\n  conn.send(JSON.stringify(message));\n}\n\n;\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: {\n      width: 1280,\n      height: 720,\n      frameRate: 15\n    },\n    // config.callType === 'video' ? {width: 1280,\n    //     height: 720,\n    //     frameRate: 15}: false,\n    audio: true\n  });\n};\n\nexport var callUser = function callUser(user, type) {\n  config.room = user;\n  config.type = type;\n  console.log('calling ' + user + '....');\n  return function (dispatch) {\n    getMedia().then(gotStream).catch(function (e) {\n      return console.log(\"getUserMedia() error: \".concat(e));\n    });\n    dispatch({\n      type: actionTypes.CALL_INIT\n    });\n    yourConn.createOffer(function (offer) {\n      send({\n        type: \"offer\",\n        offer: offer,\n        name: user\n      });\n      yourConn.setLocalDescription(offer);\n    }, function (error) {\n      alert(\"Error when creating an offer\");\n    });\n  };\n};\n\nvar gotStream = function gotStream(myStream) {\n  console.log('Received local stream');\n  stream = myStream;\n  store.dispatch(onLocalStream(myStream));\n  myStream.getTracks().forEach(function (track) {\n    console.log(stream);\n    yourConn.addTrack(track, myStream);\n  });\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n};\n\nfunction handleOffer(offer, name) {\n  connectedUser = name;\n  store.dispatch({\n    type: actionTypes.ON_INCOMING_CALL,\n    callType: 'video',\n    caller: name\n  });\n  console.log('Accepting offer from ' + connectedUser);\n  yourConn.setRemoteDescription(new RTCSessionDescription(offer)); //create an answer to an offer \n\n  console.log('Creating and sending answer to ' + connectedUser);\n  yourConn.createAnswer(function (answer) {\n    getMedia().then(gotStream).catch(function (err) {\n      return console.log(err);\n    });\n    yourConn.setLocalDescription(answer);\n    send({\n      type: \"answer\",\n      answer: answer,\n      from: name\n    });\n  }, function (error) {\n    alert(\"Error when creating an answer\");\n  });\n}\n\nexport var callAccepted = function callAccepted() {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.CALL_ACCEPTED\n    });\n  };\n};\nexport var callRejected = function callRejected() {\n  return function (dispatch) {\n    // channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n    dispatch({\n      type: actionTypes.CALL_REJECTED\n    });\n  };\n};\n\nfunction handleAnswer(answer, name) {\n  console.log('Accepting answer from ' + name);\n  yourConn.setRemoteDescription(new RTCSessionDescription(answer));\n}\n\n;\n\nfunction handleCandidate(candidate) {\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate));\n}\n\n;\nexport var endCall = function endCall() {\n  return function (dispatch) {\n    send({\n      type: \"leave\",\n      name: name\n    });\n    handleLeave();\n  };\n};\n\nfunction handleLeave() {\n  connectedUser = null;\n  stream.getTracks().forEach(function (track) {\n    return track.stop();\n  });\n  yourConn.close();\n  yourConn.onicecandidate = null;\n  yourConn.onaddTrack = null;\n}\n\n;","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/store/actions/actionCreators/callActionCreatorss.js"],"names":["store","actionTypes","io","name","connectedUser","userId","localStorage","getItem","config","conn","configuration","yourConn","RTCPeerConnection","ontrack","stream","console","log","dispatch","onTrack","onicecandidate","event","candidate","send","type","on","prepareCaller","channel","PREPARE_CALLER","getCallerReady","msg","data","JSON","parse","handleOffer","offer","handleAnswer","answer","from","handleCandidate","handleLeave","onerror","err","message","stringify","getMedia","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","audio","callUser","user","room","then","gotStream","catch","e","CALL_INIT","createOffer","setLocalDescription","error","alert","myStream","onLocalStream","getTracks","forEach","track","addTrack","ON_TRACK","remoteStream","streams","ON_LOCAL_STREAM","ON_INCOMING_CALL","callType","caller","setRemoteDescription","RTCSessionDescription","createAnswer","callAccepted","CALL_ACCEPTED","callRejected","CALL_REJECTED","addIceCandidate","RTCIceCandidate","endCall","stop","close","onaddTrack"],"mappings":"AAAA,SAASA,KAAT,QAAuB,gBAAvB;AACA,OAAO,KAAKC,WAAZ,MAA6B,YAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,IAAJ;AACA,IAAIC,aAAJ;AACA,IAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;AACA,IAAMC,MAAM,GAAG,EAAf,C,CAEA;;AACA,IAAMC,IAAI,GAAGP,EAAE,CAAC,uBAAD,CAAf;AACA,IAAMQ,aAAa,GAAG;AAClB,gBAAc,CAAC;AAAE,WAAO;AAAT,GAAD;AADI,CAAtB;AAGA,IAAMC,QAAQ,GAAG,IAAIC,iBAAJ,CAAsBF,aAAtB,CAAjB,C,CAEC;;AACAC,QAAQ,CAACE,OAAT,GAAmB,UAAUC,MAAV,EAAkB;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACDd,EAAAA,KAAK,CAACiB,QAAN,CAAeC,OAAO,CAACJ,MAAD,CAAtB;AACF,CAJA,C,CAMD;;;AACAH,QAAQ,CAACQ,cAAT,GAA0B,UAAUC,KAAV,EAAiB;AACxC,MAAIA,KAAK,CAACC,SAAV,EAAqB;AAClBC,IAAAA,IAAI,CAAC;AACFC,MAAAA,IAAI,EAAE,WADJ;AAEFF,MAAAA,SAAS,EAAED,KAAK,CAACC;AAFf,KAAD,CAAJ;AAIF;AACH,CAPD;;AAQA,IAAIP,MAAM,GAAG,IAAb;AAEAC,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACAA,IAAI,CAACe,EAAL,CAAQ,YAAR,EAAsB,YAAY;AAC/BT,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACF,CAFD;;AAIA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,OAAO,EAAI;AAC7B,SAAO;AACHH,IAAAA,IAAI,EAAEtB,WAAW,CAAC0B,cADf;AAEHD,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAMA,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAChC,SAAO,UAAAX,QAAQ,EAAI;AACfK,IAAAA,IAAI,CAAC;AACDC,MAAAA,IAAI,EAAE,OADL;AAEDpB,MAAAA,IAAI,EAAEE;AAFL,KAAD,CAAJ;AAIAY,IAAAA,QAAQ,CAACQ,aAAa,CAAChB,IAAD,CAAd,CAAR;AACH,GAND;AAOH,CARM,C,CASP;;AACAA,IAAI,CAACe,EAAL,CAAQ,SAAR,EAAmB,UAAUK,GAAV,EAAe;AAE/Bd,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Ba,GAA3B;AAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAb;;AAEA,UAAOC,IAAI,CAACP,IAAZ;AACG,SAAK,OAAL;AACE;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACC;AACH;;AACA,SAAK,OAAL;AACGiB,MAAAA,WAAW,CAACH,IAAI,CAACI,KAAN,EAAaJ,IAAI,CAAC3B,IAAlB,CAAX;AACA;;AACH,SAAK,QAAL;AACGgC,MAAAA,YAAY,CAACL,IAAI,CAACM,MAAN,EAAcN,IAAI,CAACO,IAAnB,CAAZ;AACA;AACH;;AACA,SAAK,WAAL;AACGC,MAAAA,eAAe,CAACR,IAAI,CAACT,SAAN,CAAf;AACA;;AACH,SAAK,OAAL;AACGkB,MAAAA,WAAW;AACX;;AACH;AACG;AApBN;AAsBF,CA5BD;;AA8BA9B,IAAI,CAAC+B,OAAL,GAAe,UAAUC,GAAV,EAAe;AAC3B1B,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyByB,GAAzB;AACF,CAFD,C,CAIA;;;AACA,SAASnB,IAAT,CAAcoB,OAAd,EAAuB;AACpB;AACA,MAAItC,aAAJ,EAAmB;AAChBsC,IAAAA,OAAO,CAACvC,IAAR,GAAeC,aAAf;AACF;;AAEDK,EAAAA,IAAI,CAACa,IAAL,CAAUS,IAAI,CAACY,SAAL,CAAeD,OAAf,CAAV;AACF;;AAAA;;AAED,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,SAAOC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACvCC,IAAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,IAAR;AACCC,MAAAA,MAAM,EAAE,GADT;AAECC,MAAAA,SAAS,EAAE;AAFZ,KADgC;AAIvC;AACA;AACA;AACAC,IAAAA,KAAK,EAAE;AAPgC,GAApC,CAAP;AASH,CAVD;;AAYA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAO/B,IAAP,EAAgB;AACpCf,EAAAA,MAAM,CAAC+C,IAAP,GAAcD,IAAd;AACA9C,EAAAA,MAAM,CAACe,IAAP,GAAcA,IAAd;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAasC,IAAb,GAAoB,MAAhC;AACA,SAAO,UAAArC,QAAQ,EAAI;AACf2B,IAAAA,QAAQ,GAAGY,IAAX,CAAgBC,SAAhB,EACCC,KADD,CACO,UAAAC,CAAC;AAAA,aAAI5C,OAAO,CAACC,GAAR,iCAAqC2C,CAArC,EAAJ;AAAA,KADR;AAEA1C,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAEtB,WAAW,CAAC2D;AAAnB,KAAD,CAAR;AACAjD,IAAAA,QAAQ,CAACkD,WAAT,CAAqB,UAAU3B,KAAV,EAAiB;AAClCZ,MAAAA,IAAI,CAAC;AACFC,QAAAA,IAAI,EAAE,OADJ;AAEFW,QAAAA,KAAK,EAAEA,KAFL;AAGF/B,QAAAA,IAAI,EAAEmD;AAHJ,OAAD,CAAJ;AAMA3C,MAAAA,QAAQ,CAACmD,mBAAT,CAA6B5B,KAA7B;AACF,KARF,EAQI,UAAU6B,KAAV,EAAiB;AACjBC,MAAAA,KAAK,CAAC,8BAAD,CAAL;AACF,KAVF;AAWH,GAfD;AAgBD,CApBI;;AAsBP,IAAMP,SAAS,GAAG,SAAZA,SAAY,CAAAQ,QAAQ,EAAI;AAC1BlD,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAF,EAAAA,MAAM,GAAGmD,QAAT;AACAjE,EAAAA,KAAK,CAACiB,QAAN,CAAeiD,aAAa,CAACD,QAAD,CAA5B;AACAA,EAAAA,QAAQ,CAACE,SAAT,GAAqBC,OAArB,CAA6B,UAAAC,KAAK,EAAI;AAClCtD,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACIH,IAAAA,QAAQ,CAAC2D,QAAT,CAAkBD,KAAlB,EAAyBJ,QAAzB;AACH,GAHL;AAIH,CARD;;AAUA,IAAM/C,OAAO,GAAG,SAAVA,OAAU,CAAAmD,KAAK,EAAI;AACrB,SAAO;AACH9C,IAAAA,IAAI,EAAEtB,WAAW,CAACsE,QADf;AAEHC,IAAAA,YAAY,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AAFX,GAAP;AAIH,CALD;;AAOA,IAAMP,aAAa,GAAG,SAAhBA,aAAgB,CAAApD,MAAM,EAAI;AAC5B,SAAO;AACHS,IAAAA,IAAI,EAAEtB,WAAW,CAACyE,eADf;AAEH5D,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALD;;AAMA,SAASmB,WAAT,CAAqBC,KAArB,EAA4B/B,IAA5B,EAAkC;AAC9BC,EAAAA,aAAa,GAAGD,IAAhB;AACAH,EAAAA,KAAK,CAACiB,QAAN,CAAe;AAACM,IAAAA,IAAI,EAAEtB,WAAW,CAAC0E,gBAAnB;AAAqCC,IAAAA,QAAQ,EAAE,OAA/C;AAAwDC,IAAAA,MAAM,EAAE1E;AAAhE,GAAf;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BZ,aAAtC;AACAO,EAAAA,QAAQ,CAACmE,oBAAT,CAA8B,IAAIC,qBAAJ,CAA0B7C,KAA1B,CAA9B,EAJ8B,CAM9B;;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAY,oCAAoCZ,aAAhD;AACAO,EAAAA,QAAQ,CAACqE,YAAT,CAAsB,UAAU5C,MAAV,EAAkB;AACpCQ,IAAAA,QAAQ,GAAGY,IAAX,CAAgBC,SAAhB,EAA2BC,KAA3B,CAAiC,UAAAjB,GAAG;AAAA,aAAI1B,OAAO,CAACC,GAAR,CAAYyB,GAAZ,CAAJ;AAAA,KAApC;AACA9B,IAAAA,QAAQ,CAACmD,mBAAT,CAA6B1B,MAA7B;AAEAd,IAAAA,IAAI,CAAC;AACDC,MAAAA,IAAI,EAAE,QADL;AAEDa,MAAAA,MAAM,EAAEA,MAFP;AAGDC,MAAAA,IAAI,EAAElC;AAHL,KAAD,CAAJ;AAMH,GAVD,EAUG,UAAU4D,KAAV,EAAiB;AACjBC,IAAAA,KAAK,CAAC,+BAAD,CAAL;AACF,GAZD;AAaH;;AACD,OAAO,IAAMiB,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,UAAAhE,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAEtB,WAAW,CAACiF;AAAnB,KAAD,CAAR;AACH,GAFD;AAGH,CAJM;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,UAAAlE,QAAQ,EAAI;AACf;AACAA,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAEtB,WAAW,CAACmF;AAAnB,KAAD,CAAR;AACH,GAHD;AAIH,CALM;;AAMP,SAASjD,YAAT,CAAsBC,MAAtB,EAA8BjC,IAA9B,EAAoC;AAChCY,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2Bb,IAAvC;AACDQ,EAAAA,QAAQ,CAACmE,oBAAT,CAA8B,IAAIC,qBAAJ,CAA0B3C,MAA1B,CAA9B;AACF;;AAAA;;AACD,SAASE,eAAT,CAAyBjB,SAAzB,EAAoC;AAChCV,EAAAA,QAAQ,CAAC0E,eAAT,CAAyB,IAAIC,eAAJ,CAAoBjE,SAApB,CAAzB;AACF;;AAAA;AAEF,OAAO,IAAMkE,OAAO,GAAG,SAAVA,OAAU,GAAM;AACzB,SAAO,UAAAtE,QAAQ,EAAI;AACfK,IAAAA,IAAI,CAAC;AACDC,MAAAA,IAAI,EAAE,OADL;AAEDpB,MAAAA,IAAI,EAAEA;AAFL,KAAD,CAAJ;AAIAoC,IAAAA,WAAW;AACd,GAND;AAOH,CARM;;AAUP,SAASA,WAAT,GAAuB;AACnBnC,EAAAA,aAAa,GAAG,IAAhB;AACAU,EAAAA,MAAM,CAACqD,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACmB,IAAN,EAAJ;AAAA,GAAhC;AAEA7E,EAAAA,QAAQ,CAAC8E,KAAT;AACA9E,EAAAA,QAAQ,CAACQ,cAAT,GAA0B,IAA1B;AACAR,EAAAA,QAAQ,CAAC+E,UAAT,GAAsB,IAAtB;AACF;;AAAA","sourcesContent":["import { store }  from '../../../index';\nimport * as actionTypes from '../actions';\nimport io from 'socket.io-client'; \n\nlet name; \nlet connectedUser;\nconst userId = localStorage.getItem('userId');\nconst config = {};\n\n//connecting to our signaling server\nconst conn = io('http://localhost:8082')\nconst configuration = { \n    \"iceServers\": [{ \"url\": \"stun:stun2.1.google.com:19302\" }]\n };   \nconst yourConn = new RTCPeerConnection(configuration);\n\n //when a remote user adds stream to the peer connection, we display it \n yourConn.ontrack = function (stream) { \n    console.log('got remote stream');\n    console.log(stream)\n   store.dispatch(onTrack(stream));\n};\n   \n// Setup ice handling \nyourConn.onicecandidate = function (event) { \n   if (event.candidate) { \n      send({ \n         type: \"candidate\", \n         candidate: event.candidate \n      }); \n   } \n}; \nlet stream = null;\n\nconsole.log(conn);\nconn.on('connection', function () { \n   console.log(\"Connected to the signaling server\"); \n});\n\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n        send({ \n            type: \"login\", \n            name: userId\n         });   \n        dispatch(prepareCaller(conn));\n    }\n}\n//when we got a message from a signaling server \nconn.on('message', function (msg) { \n\n   console.log(\"Got message\", msg);\n\t\n   const data = JSON.parse(msg); \n\t\n   switch(data.type) { \n      case \"login\": \n        //  handleLogin(data.success); \n        console.log('logged in')\n         break; \n      //when somebody wants to call us \n      case \"offer\": \n         handleOffer(data.offer, data.name)\n         break; \n      case \"answer\": \n         handleAnswer(data.answer, data.from); \n         break; \n      //when a remote peer sends an ice candidate to us \n      case \"candidate\": \n         handleCandidate(data.candidate); \n         break; \n      case \"leave\": \n         handleLeave(); \n         break; \n      default: \n         break; \n   }\n});\n  \nconn.onerror = function (err) { \n   console.log(\"Got error\", err); \n};\n  \n//alias for sending JSON encoded messages \nfunction send(message) { \n   //attach the other peer username to our messages \n   if (connectedUser) { \n      message.name = connectedUser; \n   } \n\t\n   conn.send(JSON.stringify(message)); \n};\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: {width: 1280,\n                height: 720,\n                frameRate: 15},\n        // config.callType === 'video' ? {width: 1280,\n        //     height: 720,\n        //     frameRate: 15}: false,\n        audio: true\n      });\n}\n\nexport const callUser = (user, type) => {\n    config.room = user;\n    config.type = type;\n    console.log('calling ' + user + '....' );\n    return dispatch => {\n        getMedia().then(gotStream)\n        .catch(e => console.log(`getUserMedia() error: ${e}`));\n        dispatch({type: actionTypes.CALL_INIT})\n        yourConn.createOffer(function (offer) { \n            send({ \n               type: \"offer\", \n               offer: offer,\n               name: user \n            }); \n               \n            yourConn.setLocalDescription(offer); \n         }, function (error) { \n            alert(\"Error when creating an offer\"); \n         });         \n    }\n  }  \n\nconst gotStream = myStream => {\n    console.log('Received local stream');\n    stream = myStream;\n    store.dispatch(onLocalStream(myStream));\n    myStream.getTracks().forEach(track => {\n        console.log(stream);\n            yourConn.addTrack(track, myStream)\n        });\n}\n\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\n\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\nfunction handleOffer(offer, name) { \n    connectedUser = name; \n    store.dispatch({type: actionTypes.ON_INCOMING_CALL, callType: 'video', caller: name});\n    console.log('Accepting offer from ' + connectedUser);\n    yourConn.setRemoteDescription(new RTCSessionDescription(offer));\n     \n    //create an answer to an offer \n    console.log('Creating and sending answer to ' + connectedUser);\n    yourConn.createAnswer(function (answer) { \n        getMedia().then(gotStream).catch(err => console.log(err));\n        yourConn.setLocalDescription(answer); \n         \n        send({ \n            type: \"answer\", \n            answer: answer,\n            from: name \n       }); \n         \n    }, function (error) { \n       alert(\"Error when creating an answer\"); \n    }); \n}\nexport const callAccepted = () => {\n    return dispatch => {\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\nexport const callRejected = () => {\n    return dispatch => {\n        // channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nfunction handleAnswer(answer, name) { \n    console.log('Accepting answer from ' + name)\n   yourConn.setRemoteDescription(new RTCSessionDescription(answer)); \n};\nfunction handleCandidate(candidate) { \n    yourConn.addIceCandidate(new RTCIceCandidate(candidate)); \n };\n\nexport const endCall = () => {\n    return dispatch => {\n        send({ \n            type: \"leave\",\n            name: name \n         }); \n        handleLeave(); \n    }\n}\n\nfunction handleLeave() { \n    connectedUser = null; \n    stream.getTracks().forEach(track => track.stop());\n     \n    yourConn.close(); \n    yourConn.onicecandidate = null; \n    yourConn.onaddTrack = null;\n };"]},"metadata":{},"sourceType":"module"}