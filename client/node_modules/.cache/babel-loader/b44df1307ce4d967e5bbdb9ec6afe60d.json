{"ast":null,"code":"import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nvar currentUser;\nexport var chatInit = function chatInit() {\n  return function (dispatch, getState) {\n    var userId = getState().auth.userId;\n    var chatManager = new ChatManager({\n      instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n      userId: userId,\n      tokenProvider: new TokenProvider({\n        url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n      })\n    });\n    chatManager.connect({\n      onAddedToRoom: function onAddedToRoom(room) {// this.getRooms();\n        // this.setState({showSideDrawer: false, room: room});\n        // this.getMessages(room);\n      }\n    }).then(function (user) {\n      currentUser = user; // this.getRooms();\n\n      dispatch(subscribeToRooms(currentUser));\n      dispatch(chatInitSuccess(currentUser));\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\n\nvar chatInitSuccess = function chatInitSuccess(currentUser) {\n  return {\n    type: actionTypes.CHAT_INIT_SUCCESS,\n    currentUser: currentUser\n  };\n};\n\nvar onNewMessage = function onNewMessage(message, belongsToCurrentRoom) {\n  return {\n    type: actionTypes.ON_NEW_MESSAGE,\n    message: message,\n    belongsToCurrentRoom: belongsToCurrentRoom\n  };\n};\n\nvar subscribeToRooms = function subscribeToRooms(user) {\n  return function (dispatch, getState) {\n    var contacts = user.rooms;\n    contacts.map(function (con) {\n      return user.subscribeToRoom({\n        roomId: con.id,\n        hooks: {\n          onMessage: function onMessage(message) {\n            //this.setState({messages: [...this.state.messages, message]});\n            //this.getMessages(message.room);\n            //this.scrollToBottom();\n            var belongsToCurrentRoom = false;\n            var currentRoom = getState().chat.currentRoom;\n\n            if (currentRoom && currentRoom.id == message.roomId) {\n              belongsToCurrentRoom = true;\n            }\n\n            dispatch(onNewMessage(message, belongsToCurrentRoom));\n          }\n        },\n        messageLimit: 0\n      });\n    });\n  };\n};\n\nvar fetchMessagesSuccess = function fetchMessagesSuccess(messages, room) {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages: messages,\n    room: room\n  };\n};\n\nexport var getMessages = function getMessages(room) {\n  return function (dispatch) {\n    currentUser.fetchMessages({\n      roomId: room['id'],\n      //initialId: 42,\n      direction: 'older',\n      limit: 100\n    }).then(function (messages) {\n      //this.setState({messages});\n      dispatch(fetchMessagesSuccess(messages, room)); //   this.scrollToBottom();\n    }).catch(function (err) {\n      console.log(\"Error fetching messages: \".concat(err));\n    });\n  };\n};\nexport var sendMessage = function sendMessage(data) {\n  return function (dispatch) {\n    currentUser.sendMessage(data);\n  };\n};\nexport var createNewGroup = function createNewGroup(data) {\n  return function (dispatch) {};\n};\nexport var startNewChat = function startNewChat(data) {\n  return function (dispatch) {};\n};\nexport var joinGroup = function joinGroup(data) {\n  return function (dispatch) {};\n};","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/store/actions/actionCreators/chatActionCreators.js"],"names":["actionTypes","ChatManager","TokenProvider","currentUser","chatInit","dispatch","getState","userId","auth","chatManager","instanceLocator","tokenProvider","url","connect","onAddedToRoom","room","then","user","subscribeToRooms","chatInitSuccess","catch","err","console","log","type","CHAT_INIT_SUCCESS","onNewMessage","message","belongsToCurrentRoom","ON_NEW_MESSAGE","contacts","rooms","map","con","subscribeToRoom","roomId","id","hooks","onMessage","currentRoom","chat","messageLimit","fetchMessagesSuccess","messages","FETCH_MESSAGES_SUCCESS","getMessages","fetchMessages","direction","limit","sendMessage","data","createNewGroup","startNewChat","joinGroup"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\n\nlet currentUser;\nexport const chatInit = () => { \n    return (dispatch, getState) => {\n        const {userId} = getState().auth;\n        const chatManager = new ChatManager({\n            instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n            userId: userId,\n            tokenProvider: new TokenProvider({\n                url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n            })\n        });    \n        chatManager\n        .connect({\n            onAddedToRoom: room => {\n                // this.getRooms();\n                // this.setState({showSideDrawer: false, room: room});\n                // this.getMessages(room);\n            }\n        })\n        .then(user => {\n            currentUser = user;\n            // this.getRooms();\n            dispatch(subscribeToRooms(currentUser))\n            dispatch(chatInitSuccess(currentUser));\n        })\n        .catch(err => console.log(err));\n    }\n}\nconst chatInitSuccess = currentUser => {\n    return {\n        type: actionTypes.CHAT_INIT_SUCCESS,\n        currentUser\n    }\n}\nconst onNewMessage = (message, belongsToCurrentRoom) => {\n    return {\n        type: actionTypes.ON_NEW_MESSAGE,\n        message,\n        belongsToCurrentRoom\n    }\n}\nconst subscribeToRooms = user => {\n    return (dispatch, getState) => {\n        const contacts = user.rooms;\n        contacts.map(con => {\n            return  user.subscribeToRoom({\n                 roomId: con.id,\n                 hooks: {\n                   onMessage: message => {\n                     //this.setState({messages: [...this.state.messages, message]});\n                     //this.getMessages(message.room);\n                     //this.scrollToBottom();\n                     let belongsToCurrentRoom = false;\n                     const { currentRoom } = getState().chat;\n                    if (currentRoom && currentRoom.id == message.roomId){\n                        belongsToCurrentRoom = true;\n                    } \n                    dispatch(onNewMessage(message, belongsToCurrentRoom));\n                   }\n                 },\n                 messageLimit: 0\n               })\n         })\n    }\n}\n\nconst fetchMessagesSuccess = (messages, room) => {\n    return {\n        type: actionTypes.FETCH_MESSAGES_SUCCESS,\n        messages,\n        room\n    }\n}\nexport const getMessages = room => {\n    return dispatch => {\n        currentUser.fetchMessages({\n            roomId: room['id'],\n            //initialId: 42,\n            direction: 'older',\n            limit: 100,\n          })\n            .then(messages => {\n              //this.setState({messages});\n              dispatch(fetchMessagesSuccess(messages, room));\n            //   this.scrollToBottom();\n            })\n            .catch(err => {\n              console.log(`Error fetching messages: ${err}`);\n            })\n    }\n   \n}\nexport const sendMessage = data => {\n    return dispatch => {\n        currentUser.sendMessage(data);\n    }\n}\nexport const createNewGroup = data => {\n    return dispatch => {\n\n    }\n}\nexport const startNewChat = data => {\n    return dispatch => {\n        \n    }\n}\nexport const joinGroup = data => {\n    return dispatch => {\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}