{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/ChatScreen.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as callActionCreators from '../../store/actions/actionIndex';\n\nvar ChatScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatScreen, _Component);\n\n  function ChatScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      contacts: [],\n      room: null,\n      text: '',\n      messages: [],\n      showSideDrawer: false\n    };\n\n    _this.scrollToBottom = function () {\n      if (_this.scrollRef && _this.state.messages.length > 0) {\n        var lastElement = _this.scrollRef.children[_this.scrollRef.children.length - 1];\n        lastElement.scrollIntoView(\"smooth\");\n      }\n    };\n\n    _this.getRooms = function () {//this.setState({contacts: this.currentUser.rooms});\n      //Subscribe to all rooms\n      // this.props.getRooms\n    };\n\n    _this.getMessages = function (room) {\n      _this.setState({\n        room: room\n      });\n\n      _this.currentUser.fetchMessages({\n        roomId: room['id'],\n        //initialId: 42,\n        direction: 'older',\n        limit: 100\n      }).then(function (messages) {\n        _this.setState({\n          messages: messages\n        });\n\n        _this.scrollToBottom();\n      }).catch(function (err) {\n        console.log(\"Error fetching messages: \".concat(err));\n      });\n    };\n\n    _this.onChange = function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n\n      _this.currentUser.sendMessage({\n        text: _this.state.text,\n        roomId: _this.props.currentRoom.id\n      });\n\n      _this.setState({\n        text: ''\n      });\n    };\n\n    _this.toggleSideDrawer = function () {\n      _this.setState(function (prevState) {\n        return {\n          showSideDrawer: !prevState.showSideDrawer\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.chatInit();\n      this.scrollToBottom();\n      this.props.getCallerReady();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var chat = React.createElement(\"div\", {\n        className: classes.Chat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      });\n\n      if (this.props.currentRoom) {\n        chat = React.createElement(\"div\", {\n          className: classes.Chat,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(ChatScreenBar, {\n          room: this.props.currentRoom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: classes.Msgs,\n          ref: function ref(div) {\n            _this2.scrollRef = div;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, this.state.messages.map(function (msg) {\n          return React.createElement(Chat, {\n            sender: msg.senderId,\n            byCurrentUser: _this2.props.userId === msg.senderId,\n            text: msg.text,\n            key: msg.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          });\n        })), React.createElement(\"form\", {\n          onSubmit: this.onSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          onChange: this.onChange,\n          value: this.state.text,\n          name: \"text\",\n          type: \"text\",\n          placeholder: \"Enter message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        })));\n      } else {\n        chat = React.createElement(Modal, {\n          show: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.ChatScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.ContactsPane,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(SideDrawer, {\n        show: this.state.showSideDrawer,\n        user: this.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.MenuBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        onClick: this.toggleSideDrawer,\n        className: \"fa fa-bars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Contacts\"), this.props.chatkitUser && this.props.chatkitUser.rooms.map(function (con) {\n        return React.createElement(Contact, {\n          key: con.id,\n          name: con.name,\n          Active: con.id === _this2.props.currentRoom.id,\n          clicked: function clicked() {\n            return _this2.getMessages(con);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      })), chat);\n    }\n  }]);\n\n  return ChatScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    channel: state.call.channel,\n    chatkitUser: state.chat.currentUser,\n    currentRoom: state.chat.currentRoom\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    chatInit: function chatInit() {\n      return dispatch(callActionCreators.chatInit());\n    },\n    getCallerReady: function getCallerReady() {\n      return dispatch(callActionCreators.getCallerReady());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/ChatScreen.js"],"names":["React","Component","connect","Contact","Chat","classes","SideDrawer","ChatScreenBar","Modal","Spinner","callActionCreators","ChatScreen","state","contacts","room","text","messages","showSideDrawer","scrollToBottom","scrollRef","length","lastElement","children","scrollIntoView","getRooms","getMessages","setState","currentUser","fetchMessages","roomId","direction","limit","then","catch","err","console","log","onChange","event","target","value","onSubmit","preventDefault","sendMessage","props","currentRoom","id","toggleSideDrawer","prevState","chatInit","getCallerReady","chat","Msgs","div","map","msg","senderId","userId","ContactsPane","MenuBar","textAlign","chatkitUser","rooms","con","name","mapStateToProps","auth","channel","call","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as callActionCreators from '../../store/actions/actionIndex';\n\n\n\nclass ChatScreen extends Component {\n\n    state = {\n        contacts: [],\n        room: null,\n        text: '',\n        messages: [],\n        showSideDrawer: false\n    }\n\n    componentDidMount () {\n        this.props.chatInit();\n        this.scrollToBottom();\n        this.props.getCallerReady();\n    }\n\n    \n\n    scrollToBottom = () => {\n       if (this.scrollRef && this.state.messages.length > 0){\n        let lastElement = this.scrollRef.children[this.scrollRef.children.length-1];\n        lastElement.scrollIntoView(\"smooth\");\n    }\n}\n    getRooms = () => {\n        //this.setState({contacts: this.currentUser.rooms});\n        //Subscribe to all rooms\n        // this.props.getRooms\n    }\n    getMessages = room => { \n        this.setState({room: room});\n        this.currentUser.fetchMessages({\n            roomId: room['id'],\n            //initialId: 42,\n            direction: 'older',\n            limit: 100,\n          })\n            .then(messages => {\n              this.setState({messages});\n              this.scrollToBottom();\n            })\n            .catch(err => {\n              console.log(`Error fetching messages: ${err}`)\n            })\n    }\n\n    onChange = event => {\n        this.setState({text: event.target.value});\n    }\n    onSubmit = event => {\n        event.preventDefault();\n        this.currentUser.sendMessage({\n            text: this.state.text,\n            roomId: this.props.currentRoom.id\n        })\n        this.setState({text: ''});\n    }\n\n   toggleSideDrawer = () => {\n        this.setState(prevState => {\n            return {showSideDrawer: !prevState.showSideDrawer}});\n    }\n\n    render () {\n        \n        let chat = <div className={classes.Chat}></div>;\n        if (this.props.currentRoom){\n            chat = (\n            <div className={classes.Chat}>\n                <ChatScreenBar room={this.props.currentRoom}/>\n                <div className={classes.Msgs} ref={(div) => {this.scrollRef = div}}>\n                {\n                    this.state.messages.map(msg => {\n                        return <Chat sender={msg.senderId} byCurrentUser={this.props.userId === msg.senderId} text={msg.text} key={msg.id} />\n                    })\n                }\n                </div>\n           \n            <form onSubmit={this.onSubmit}>\n                <input onChange={this.onChange} value={this.state.text} name='text' type=\"text\" placeholder=\"Enter message\" />\n            </form>\n            </div>\n            );\n        } else {\n            chat = (\n                    <Modal show={true}>\n                        <Spinner />\n                    </Modal>\n            );\n        }\n        return (\n            <div className={classes.ChatScreen}>\n                <div className={classes.ContactsPane} >\n                <SideDrawer show={this.state.showSideDrawer} \n                user={this.currentUser}\n                />\n                <div className={classes.MenuBar}>\n                    <i onClick = {this.toggleSideDrawer} className=\"fa fa-bars\"></i>\n                </div>\n                <h1 style={{textAlign: 'center'}}>Contacts</h1>\n                {this.props.chatkitUser && this.props.chatkitUser.rooms.map(con => {\n                    return <Contact key={con.id} name={con.name} Active={con.id === this.props.currentRoom.id} clicked={() => this.getMessages(con)}/>\n                })}\n                </div>\n                {chat}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        channel: state.call.channel,\n        chatkitUser: state.chat.currentUser,\n        currentRoom: state.chat.currentRoom\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        chatInit: () => dispatch(callActionCreators.chatInit()),\n        getCallerReady: () => dispatch(callActionCreators.getCallerReady())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);"]},"metadata":{},"sourceType":"module"}