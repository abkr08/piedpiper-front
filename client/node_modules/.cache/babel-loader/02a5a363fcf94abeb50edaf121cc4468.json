{"ast":null,"code":"import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nvar currentUser;\nexport var chatInit = function chatInit() {\n  return function (dispatch, getState) {\n    var userId = getState().auth.userId;\n    var chatManager = new ChatManager({\n      instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n      userId: userId,\n      tokenProvider: new TokenProvider({\n        url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n      })\n    });\n    chatManager.connect({\n      onAddedToRoom: function onAddedToRoom(room) {// this.getRooms();\n        // this.setState({showSideDrawer: false, room: room});\n        // this.getMessages(room);\n      }\n    }).then(function (user) {\n      currentUser = user; // this.getRooms();\n\n      dispatch(chatInitSuccess(currentUser));\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\n\nvar chatInitSuccess = function chatInitSuccess(currentUser) {\n  return {\n    type: actionTypes.CHAT_INIT_SUCCESS,\n    currentUser: currentUser\n  };\n};\n\nvar getRooms = function getRooms(user) {\n  return function (dispatch) {\n    var contacts = user.rooms;\n    contacts.map(function (con) {\n      return user.subscribeToRoom({\n        roomId: con.id,\n        hooks: {\n          onMessage: function onMessage(message) {//this.setState({messages: [...this.state.messages, message]});\n            //this.getMessages(message.room);\n            //this.scrollToBottom();\n          }\n        },\n        messageLimit: 100\n      });\n    });\n  };\n};\n\nexport var getMessages = function getMessages(room) {};","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/store/actions/actionCreators/chatActionCreators.js"],"names":["actionTypes","ChatManager","TokenProvider","currentUser","chatInit","dispatch","getState","userId","auth","chatManager","instanceLocator","tokenProvider","url","connect","onAddedToRoom","room","then","user","chatInitSuccess","catch","err","console","log","type","CHAT_INIT_SUCCESS","getRooms","contacts","rooms","map","con","subscribeToRoom","roomId","id","hooks","onMessage","message","messageLimit","getMessages"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,wBAA3C;AAEA,IAAIC,WAAJ;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC1B,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,QACpBC,MADoB,GACVD,QAAQ,GAAGE,IADD,CACpBD,MADoB;AAE3B,QAAME,WAAW,GAAG,IAAIR,WAAJ,CAAgB;AAChCS,MAAAA,eAAe,EAAE,6CADe;AAEhCH,MAAAA,MAAM,EAAEA,MAFwB;AAGhCI,MAAAA,aAAa,EAAE,IAAIT,aAAJ,CAAkB;AAC7BU,QAAAA,GAAG,EAAE;AADwB,OAAlB;AAHiB,KAAhB,CAApB;AAOAH,IAAAA,WAAW,CACVI,OADD,CACS;AACLC,MAAAA,aAAa,EAAE,uBAAAC,IAAI,EAAI,CACnB;AACA;AACA;AACH;AALI,KADT,EAQCC,IARD,CAQM,UAAAC,IAAI,EAAI;AACVd,MAAAA,WAAW,GAAGc,IAAd,CADU,CAEV;;AACAZ,MAAAA,QAAQ,CAACa,eAAe,CAACf,WAAD,CAAhB,CAAR;AACH,KAZD,EAaCgB,KAbD,CAaO,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAbV;AAcH,GAvBD;AAwBH,CAzBM;;AA0BP,IAAMF,eAAe,GAAG,SAAlBA,eAAkB,CAAAf,WAAW,EAAI;AACnC,SAAO;AACHoB,IAAAA,IAAI,EAAEvB,WAAW,CAACwB,iBADf;AAEHrB,IAAAA,WAAW,EAAXA;AAFG,GAAP;AAIH,CALD;;AAMA,IAAMsB,QAAQ,GAAG,SAAXA,QAAW,CAAAR,IAAI,EAAI;AACrB,SAAO,UAAAZ,QAAQ,EAAI;AACf,QAAMqB,QAAQ,GAAGT,IAAI,CAACU,KAAtB;AACAD,IAAAA,QAAQ,CAACE,GAAT,CAAa,UAAAC,GAAG,EAAI;AAChB,aAAQZ,IAAI,CAACa,eAAL,CAAqB;AACxBC,QAAAA,MAAM,EAAEF,GAAG,CAACG,EADY;AAExBC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,mBAAAC,OAAO,EAAI,CACpB;AACA;AACA;AACD;AALI,SAFiB;AASxBC,QAAAA,YAAY,EAAE;AATU,OAArB,CAAR;AAWF,KAZF;AAaH,GAfD;AAgBH,CAjBD;;AAkBA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAtB,IAAI,EAAI,CAElC,CAFM","sourcesContent":["import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\n\nlet currentUser;\nexport const chatInit = () => { \n    return (dispatch, getState) => {\n        const {userId} = getState().auth;\n        const chatManager = new ChatManager({\n            instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n            userId: userId,\n            tokenProvider: new TokenProvider({\n                url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n            })\n        });    \n        chatManager\n        .connect({\n            onAddedToRoom: room => {\n                // this.getRooms();\n                // this.setState({showSideDrawer: false, room: room});\n                // this.getMessages(room);\n            }\n        })\n        .then(user => {\n            currentUser = user;\n            // this.getRooms();\n            dispatch(chatInitSuccess(currentUser));\n        })\n        .catch(err => console.log(err));\n    }\n}\nconst chatInitSuccess = currentUser => {\n    return {\n        type: actionTypes.CHAT_INIT_SUCCESS,\n        currentUser\n    }\n}\nconst getRooms = user => {\n    return dispatch => {\n        const contacts = user.rooms;\n        contacts.map(con => {\n            return  user.subscribeToRoom({\n                 roomId: con.id,\n                 hooks: {\n                   onMessage: message => {\n                     //this.setState({messages: [...this.state.messages, message]});\n                     //this.getMessages(message.room);\n                     //this.scrollToBottom();\n                   }\n                 },\n                 messageLimit: 100\n               })\n         })\n    }\n}\nexport const getMessages = room => {\n\n}"]},"metadata":{},"sourceType":"module"}