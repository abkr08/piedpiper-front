{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\nimport { connect } from 'react-redux';\nimport * as callActionCreators from '../../store/actions/actionIndex';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      usersOnline: 0,\n      id: null,\n      users: [],\n      sessionDesc: null,\n      currentcaller: '',\n      room: ''\n    };\n\n    _this.getCam = function () {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.callUser = function (user) {\n      _this.getCam().then(function (stream) {\n        _this.localVideoRef.srcObject = stream;\n\n        _this.toggleEndCallButton();\n\n        stream.getTracks().forEach(function (track) {\n          return _this.props.addTrack(track, stream);\n        });\n        _this.localUserMedia = stream;\n\n        _this.props.createOffer().then(function (desc) {\n          _this.props.setLocalDescription(new RTCSessionDescription(desc));\n\n          _this.props.channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: user,\n            from: _this.props.userId\n          }); //room = user;\n\n\n          _this.setState({\n            room: user\n          });\n        });\n      }).catch(function (error) {\n        console.log(\"an error occured\", error);\n      });\n    };\n\n    _this.endCall = function () {\n      _this.setState({\n        room: undefined\n      });\n\n      _this.props.caller.close();\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.localUserMedia.getTracks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var track = _step.value;\n          track.stop();\n        } //   this.prepareCaller();\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.toggleEndCallButton();\n    };\n\n    _this.endCurrentCall = function () {\n      _this.props.channel.trigger(\"client-endcall\", {\n        room: _this.state.room\n      });\n\n      _this.endCall();\n    };\n\n    _this.toggleEndCallButton = function () {\n      /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n          document.getElementById(\"endCall\").style.display = \"none\";\n        } else {\n          document.getElementById(\"endCall\").style.display = \"block\";\n        }*/\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      // this.GetRTCPeerConnection();\n      //this.GetRTCSessionDescription();\n      //this.GetRTCIceCandidate();\n      // this.prepareCaller();\n      this.callUser(this.props.callTo);\n      var users = [];\n      this.props.channel.bind(\"pusher:subscription_succeeded\", function (members) {\n        //set the member count\n        console.log(members);\n\n        _this2.setState({\n          usersOnline: members.count,\n          id: _this2.props.channel.members.me.id,\n          room: _this2.props.callTo\n        });\n\n        members.each(function (member) {\n          if (member.id !== _this2.props.channel.members.me.id) {\n            users.push(member.id);\n\n            _this2.setState({\n              users: users\n            });\n          }\n        }); //render();\n      });\n      this.props.channel.bind(\"pusher:member_added\", function (member) {\n        users.push(member.id);\n\n        _this2.setState({\n          users: users\n        }); //render();\n\n      });\n      this.props.channel.bind(\"pusher:member_removed\", function (member) {\n        // for remove member from list:\n        //var index = users.indexOf(member.id);\n        users = users.filter(function (user) {\n          return user !== member.id;\n        }); //users.splice(index, 1);\n\n        if (member.id === _this2.state.room) {\n          _this2.endCall();\n        } //render();\n\n      }); //Listening for the candidate message from a peer sent from onicecandidate handler\n\n      this.props.channel.bind(\"client-candidate\", function (msg) {\n        console.log(\"[CLIENT-CANDIDATE]\" + msg);\n\n        if (msg.room === _this2.state.room) {\n          console.log('64====', msg.candidate); //this.props.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n\n          _this2.props.addIceCandidate(new RTCIceCandidate(msg.candidate));\n        }\n      }); //Listening for Session Description Protocol message with session details from remote peer\n\n      this.props.channel.bind(\"client-sdp\", function (msg) {\n        if (msg.room === _this2.props.userId) {\n          console.log(msg);\n          var answer = window.confirm(\"You have a call from \" + msg.from + \": Would you like to answer?\");\n\n          if (!answer) {\n            return _this2.props.channel.trigger(\"client-reject\", {\n              room: msg.room,\n              rejected: _this2.props.userId\n            });\n          }\n\n          _this2.setState({\n            room: msg.room\n          });\n\n          _this2.getCam().then(function (stream) {\n            _this2.localUserMedia = stream;\n\n            _this2.toggleEndCallButton();\n\n            _this2.localVideoRef.srcObject = stream;\n            stream.getTracks().forEach(function (track) {\n              return _this2.props.addTrack(track, stream);\n            }); //this.props.caller.addStream(stream);\n\n            var sessionDesc = new RTCSessionDescription(msg.sdp);\n            console.log(sessionDesc); //const promise = this.props.caller.setRemoteDescription(sessionDesc);\n\n            _this2.props.setRemoteDescription(sessionDesc);\n\n            _this2.props.createAnswer().then(function (sdp) {\n              console.log('98===' + sdp);\n\n              _this2.props.setLocalDescription(new RTCSessionDescription(sdp));\n\n              _this2.props.channel.trigger(\"client-answer\", {\n                sdp: sdp,\n                room: _this2.state.room\n              });\n            });\n          }).catch(function (error) {\n            console.log(\"an error occured\", error);\n          });\n        }\n      }); //Listening for answer to offer sent to remote peer\n\n      this.props.channel.bind(\"client-answer\", function (answer) {\n        if (answer.room === this.state.room) {\n          console.log(\"answer received\");\n          this.props.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n        }\n      });\n      this.props.channel.bind(\"client-reject\", function (answer) {\n        if (answer.room === _this2.state.room) {\n          console.log(\"Call declined\");\n          alert(\"call to \" + answer.rejected + \"was politely declined\");\n\n          _this2.endCall();\n        }\n      });\n      this.props.channel.bind(\"client-endcall\", function (answer) {\n        if (answer.room === _this2.state.room) {\n          console.log(\"Call Ended\");\n\n          _this2.endCall();\n        }\n      });\n    } //To iron over browser implementation anomalies like prefixes\n    //    prepareCaller = () => {\n    //       //Initializing a peer connection\n    //       this.props.caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n    //       //Listen for ICE Candidates and send them to remote peers\n    //       this.props.caller.onicecandidate = evt => {\n    //         if (!evt.candidate) return;\n    //         console.log(\"onicecandidate called\");\n    //         console.log(evt);\n    //         this.onIceCandidate(this.props.caller, evt);\n    //       };\n    //       //onaddstream handler to receive remote feed and show in remoteview video element\n    //       this.props.caller.ontrack = evt => {\n    //         console.log(evt);\n    //     this.remoteVideoRef.srcObject = evt.stream;\n    //       };\n    //     }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        muted: true,\n        className: classes.LocalVideo,\n        ref: function ref(lVid) {\n          return _this3.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        className: classes.remoteVideo,\n        ref: function ref(rVid) {\n          return _this3.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    caller: state.call.caller,\n    channel: state.call.channel,\n    remoteStream: state.call.remoteStream\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addIceCandidate: function addIceCandidate(iceCandidate) {\n      return dispatch(callActionCreators.addIceCandidate(iceCandidate));\n    },\n    addTrack: function addTrack(track, stream) {\n      return dispatch(callActionCreators.addTrack(track, stream));\n    },\n    setRemoteDescription: function setRemoteDescription(sessionDesc) {\n      return dispatch(callActionCreators.setRemoteDescription(sessionDesc));\n    },\n    setLocalDescription: function setLocalDescription(sessionDesc) {\n      return dispatch(callActionCreators.setLocalDescription(sessionDesc));\n    },\n    createAnswer: function createAnswer() {\n      return dispatch(callActionCreators.createAnswer());\n    },\n    createOffer: function createOffer() {\n      return dispatch(callActionCreators.createOffer());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","connect","callActionCreators","Video","state","usersOnline","id","users","sessionDesc","currentcaller","room","getCam","navigator","mediaDevices","getUserMedia","video","audio","GetRTCIceCandidate","window","RTCIceCandidate","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","callUser","user","then","stream","localVideoRef","srcObject","toggleEndCallButton","getTracks","forEach","track","props","addTrack","localUserMedia","createOffer","desc","setLocalDescription","channel","trigger","sdp","from","userId","setState","catch","error","console","log","endCall","undefined","caller","close","stop","endCurrentCall","callTo","bind","members","count","me","each","member","push","filter","msg","candidate","addIceCandidate","answer","confirm","rejected","setRemoteDescription","createAnswer","alert","LocalVideo","lVid","remoteVideo","rVid","remoteVideoRef","mapStateToProps","auth","call","remoteStream","mapDispatchToProps","dispatch","iceCandidate"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nimport { connect } from 'react-redux';\nimport * as callActionCreators from '../../store/actions/actionIndex'\n\nclass Video extends Component {\n    \n    state = {\n        usersOnline: 0,\n          id: null,\n          users: [],\n          sessionDesc: null,\n          currentcaller: '',\n          room: '',\n    }\n       \n    componentWillMount (){\n          \n        // this.GetRTCPeerConnection();\n         //this.GetRTCSessionDescription();\n         //this.GetRTCIceCandidate();\n        // this.prepareCaller();\n        this.callUser(this.props.callTo);\n        let users = [];\n    \n        this.props.channel.bind(\"pusher:subscription_succeeded\", members => {\n          //set the member count\n          console.log(members);\n          this.setState({usersOnline: members.count, id: this.props.channel.members.me.id, room: this.props.callTo});\n          \n          \n          members.each(member => {\n            if (member.id !== this.props.channel.members.me.id) {\n              users.push(member.id);\n        this.setState({users: users})\n            }\n          });\n    \n          //render();\n        });\n    \n        this.props.channel.bind(\"pusher:member_added\", member => {\n          users.push(member.id);\n        this.setState({users: users})\n          //render();\n        });\n    \n        this.props.channel.bind(\"pusher:member_removed\", member => {\n          // for remove member from list:\n          //var index = users.indexOf(member.id);\n        users = users.filter(user => user !== member.id);\n          //users.splice(index, 1);\n          if (member.id === this.state.room) {\n            this.endCall();\n          }\n          //render();\n        });\n         //Listening for the candidate message from a peer sent from onicecandidate handler\n         this.props.channel.bind(\"client-candidate\", msg =>{\n             console.log(\"[CLIENT-CANDIDATE]\" + msg);\n            if (msg.room === this.state.room) {\n              console.log('64====', msg.candidate);\n              //this.props.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n              this.props.addIceCandidate(new RTCIceCandidate(msg.candidate));\n            }\n          });\n         \n      \n          //Listening for Session Description Protocol message with session details from remote peer\n          this.props.channel.bind(\"client-sdp\", msg => {\n          if (msg.room === this.props.userId) {\n              console.log(msg);\n              let answer = window.confirm(\n                \"You have a call from \" + msg.from + \": Would you like to answer?\"\n              );\n              if (!answer) {\n                return this.props.channel.trigger(\"client-reject\", { room: msg.room, rejected: this.props.userId });\n              }\n              this.setState({room: msg.room});\n              this.getCam()\n                .then(stream => {\n                  this.localUserMedia = stream;\n                  this.toggleEndCallButton();\n                 \n             this.localVideoRef.srcObject = stream;\n             stream.getTracks().forEach(track => this.props.addTrack(track, stream));\n             \n                  //this.props.caller.addStream(stream);\n\n                  let sessionDesc = new RTCSessionDescription(msg.sdp);\n                  console.log(sessionDesc);\n                  //const promise = this.props.caller.setRemoteDescription(sessionDesc);\n                  this.props.setRemoteDescription(sessionDesc);\n                  this.props.createAnswer().then(sdp => {\n                      console.log('98===' + sdp);\n                    this.props.setLocalDescription(new RTCSessionDescription(sdp));\n                    this.props.channel.trigger(\"client-answer\", {\n                      sdp: sdp,\n                      room: this.state.room\n                    });\n                  });\n                })\n                .catch(error => {\n                  console.log(\"an error occured\", error);\n                });\n            }\n          });\n      \n          //Listening for answer to offer sent to remote peer\n          this.props.channel.bind(\"client-answer\", function(answer) {\n            if (answer.room === this.state.room) {\n            \n              console.log(\"answer received\");\n              this.props.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n            }\n          });\n      \n          this.props.channel.bind(\"client-reject\", answer => {\n            if (answer.room === this.state.room) {\n              console.log(\"Call declined\");\n              alert(\"call to \" + answer.rejected + \"was politely declined\");\n              this.endCall();\n            }\n          });\n      \n          this.props.channel.bind(\"client-endcall\", answer =>  {\n            if (answer.room === this.state.room) {\n              console.log(\"Call Ended\");\n              this.endCall();\n            }\n          });\n          \n    }\n       \n    \n        //To iron over browser implementation anomalies like prefixes\n        \n    //    prepareCaller = () => {\n    //       //Initializing a peer connection\n    //       this.props.caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n    \n    //       //Listen for ICE Candidates and send them to remote peers\n    //       this.props.caller.onicecandidate = evt => {\n    //         if (!evt.candidate) return;\n    //         console.log(\"onicecandidate called\");\n    //         console.log(evt);\n    //         this.onIceCandidate(this.props.caller, evt);\n    //       };\n    //       //onaddstream handler to receive remote feed and show in remoteview video element\n    //       this.props.caller.ontrack = evt => {\n    //         console.log(evt);\n    //     this.remoteVideoRef.srcObject = evt.stream;\n    //       };\n    //     }\n        getCam = () => {\n            \n          //Get local audio/video feed and show it in selfview video element\n          return navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n          });\n        }\n    \n        GetRTCIceCandidate = () => {\n          window.RTCIceCandidate =\n            window.RTCIceCandidate ||\n            window.webkitRTCIceCandidate ||\n            window.mozRTCIceCandidate ||\n            window.msRTCIceCandidate;\n    \n          return window.RTCIceCandidate;\n        }\n    \n    GetRTCPeerConnection = () => {\n          window.RTCPeerConnection =\n            window.RTCPeerConnection ||\n            window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection ||\n            window.msRTCPeerConnection;\n          return window.RTCPeerConnection;\n        }\n    \n         GetRTCSessionDescription = () => {\n          window.RTCSessionDescription =\n            window.RTCSessionDescription ||\n            window.webkitRTCSessionDescription ||\n            window.mozRTCSessionDescription ||\n            window.msRTCSessionDescription;\n          return window.RTCSessionDescription;\n        }\n    \n        //Create and send offer to remote peer on button click\n       callUser = user => {\n          this.getCam()\n            .then(stream => {\n\n                this.localVideoRef.srcObject = stream;\n                this.toggleEndCallButton();\n                stream.getTracks().forEach(track => this.props.addTrack(track, stream));\n                this.localUserMedia = stream;\n                this.props.createOffer().then(desc => {\n                this.props.setLocalDescription(new RTCSessionDescription(desc));\n                this.props.channel.trigger(\"client-sdp\", {\n                  sdp: desc,\n                  room: user,\n                  from: this.props.userId\n                });\n                //room = user;\n            this.setState({room: user})\n              });\n            })\n            .catch(error => {\n              console.log(\"an error occured\", error);\n            });\n        }\n    \n     endCall = () => {\n          this.setState({room: undefined});\n          this.props.caller.close();\n          for (let track of this.localUserMedia.getTracks()) {\n            track.stop();\n          }\n        //   this.prepareCaller();\n          this.toggleEndCallButton();\n        }\n    \n       endCurrentCall = () => {\n          this.props.channel.trigger(\"client-endcall\", {\n            room: this.state.room\n          });\n    \n          this.endCall();\n        }\n    \n        //Send the ICE Candidate to the remote peer\n        // onIceCandidate = (peer, evt) => {\n        //   if (evt.candidate) {\n        //     this.props.channel.trigger(\"client-candidate\", {\n        //       candidate: evt.candidate,\n        //       room: this.state.room\n        //     });\n        //   }\n        // }\n    \n         toggleEndCallButton = () => {\n        /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n            document.getElementById(\"endCall\").style.display = \"none\";\n          } else {\n            document.getElementById(\"endCall\").style.display = \"block\";\n          }*/\n        }\n    \n       \n    render () {\n        console.log(this.state);\n        return (\n            <div className={classes.Video}>\n                <video autoPlay muted className={classes.LocalVideo} ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay className={classes.remoteVideo} ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        caller: state.call.caller,\n        channel: state.call.channel,\n        remoteStream: state.call.remoteStream\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        addIceCandidate: (iceCandidate) => dispatch(callActionCreators.addIceCandidate(iceCandidate)),\n        addTrack: (track, stream) => dispatch(callActionCreators.addTrack(track, stream)),\n        setRemoteDescription: sessionDesc => dispatch(callActionCreators.setRemoteDescription(sessionDesc)),\n        setLocalDescription:  sessionDesc => dispatch(callActionCreators.setLocalDescription(sessionDesc)),\n        createAnswer: () => dispatch(callActionCreators.createAnswer()),\n        createOffer: () => dispatch(callActionCreators.createOffer()),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);"]},"metadata":{},"sourceType":"module"}