{"ast":null,"code":"import _slicedToArray from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/Contact.js\";\nimport React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../images/p37605.png';\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar';\n\nvar contact = function contact(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showOptions = _useState2[0],\n      toggleShowOptions = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      position = _useState4[0],\n      updatePosition = _useState4[1];\n\n  var showOptionsHandler = function showOptionsHandler(event) {\n    var pos = {};\n    pos.x = event.clientX + 200;\n    pos.y = event.clientY;\n    toggleShowOptions(true);\n    updatePosition(pos);\n  };\n\n  var hideOptions = function hideOptions() {\n    toggleShowOptions(false);\n    updatePosition({}); // this.setState({showOptions: false, position: {}})\n  };\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      name = _useState6[0],\n      setName = _useState6[1];\n\n  useEffect(function () {\n    var contactName = props.room.userIds.filter(function (name) {\n      return name !== props.userId;\n    }).join('');\n    setName(contactName);\n  });\n  var attachedClasses = [classes.Contact];\n  var unreadMessages = \"\";\n\n  if (props.Active) {\n    attachedClasses.push(classes.Active);\n  }\n\n  if (props.unopenedMessages[props.id]) {\n    unreadMessages = props.unopenedMessages[props.id].length;\n  }\n\n  return React.createElement(\"div\", {\n    className: attachedClasses.join(' '),\n    onClick: props.clicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: img,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, props.room.isPrivate ? name : props.room.name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, props.lastMessage)), React.createElement(\"div\", {\n    className: classes.FloatedRight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, unreadMessages), React.createElement(\"i\", {\n    onClick: showOptionsHandler,\n    className: \"fa fa-angle-down\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), showOptions && React.createElement(OptionsDropbar, {\n    position: position // optionClicked={(event, option) => this.optionClicked(option)}\n    ,\n    roomId: props.room.id,\n    show: showOptions,\n    hideOptions: hideOptions,\n    options: [{\n      name: 'Archive chat'\n    }, {\n      name: 'Mute'\n    }, {\n      name: !props.room.isPrivate ? 'Exit group' : 'Delete chat'\n    }, {\n      name: 'Pin chat'\n    }, {\n      name: 'Mark as unread'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {// userId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps)(contact);","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/containers/PiperChat/Contact.js"],"names":["React","useState","useEffect","classes","img","connect","OptionsDropbar","contact","props","showOptions","toggleShowOptions","position","updatePosition","showOptionsHandler","event","pos","x","clientX","y","clientY","hideOptions","name","setName","contactName","room","userIds","filter","userId","join","attachedClasses","Contact","unreadMessages","Active","push","unopenedMessages","id","length","clicked","isPrivate","lastMessage","FloatedRight","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../images/p37605.png'\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar'\n\nconst contact = props => {\n    const [showOptions, toggleShowOptions] = useState(false);\n    const [position, updatePosition] = useState({});\n    \n    const showOptionsHandler = event => {\n        let pos = {};\n        pos.x = event.clientX + 200;\n        pos.y = event.clientY;\n        toggleShowOptions(true);\n        updatePosition(pos)\n    }\n    const hideOptions = () => {\n        toggleShowOptions(false);\n        updatePosition({})\n        // this.setState({showOptions: false, position: {}})\n    }\n    const [name, setName] = useState('');\n    useEffect(()=> {\n        const contactName = props.room.userIds.filter(name => name !== props.userId).join('');\n        setName(contactName);\n    })\n    let attachedClasses = [classes.Contact];\n    let unreadMessages = \"\";\n    if (props.Active){\n        attachedClasses.push(classes.Active); \n    }\n    if (props.unopenedMessages[props.id]){\n        unreadMessages = props.unopenedMessages[props.id].length;\n    }\n    return (\n        <div className={attachedClasses.join(' ')} onClick={props.clicked}>\n            <img src={img} alt=''/>\n            <div>\n                <p>{props.room.isPrivate ? name\n                : props.room.name}</p>\n                <p>{props.lastMessage}</p>\n            </div>\n            <div className={classes.FloatedRight}>\n                <span>{unreadMessages}</span>\n                <i onClick={showOptionsHandler} className=\"fa fa-angle-down\"></i>\n                { showOptions && \n                    <OptionsDropbar position={position} \n                            // optionClicked={(event, option) => this.optionClicked(option)}\n                            roomId={props.room.id}\n                            show={showOptions} \n                            hideOptions={hideOptions}\n                            options={[{name: 'Archive chat'},\n                            {name: 'Mute'},\n                            {name: !props.room.isPrivate? 'Exit group':'Delete chat'},\n                            {name: 'Pin chat'},\n                            {name: 'Mark as unread'}\n                            ]}/>}\n            </div>\n        </div>\n    )\n   \n}\nconst mapStateToProps = state => {\n    return {\n        // userId: state.auth.userId\n    }\n}\nexport default connect(mapStateToProps)(contact);"]},"metadata":{},"sourceType":"module"}