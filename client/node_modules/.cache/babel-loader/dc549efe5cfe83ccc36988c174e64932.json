{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\nimport { connect } from 'react-redux';\nimport * as callActionCreators from '../../store/actions/actionIndex';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      id: null,\n      room: ''\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.callUser = function (user) {\n      _this.props.getCam();\n    };\n\n    _this.endCall = function () {\n      _this.setState({\n        room: undefined\n      }); ///this.props.closeCaller.close();\n\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.localUserMedia.getTracks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var track = _step.value;\n          track.stop();\n        } //   this.prepareCaller();\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.toggleEndCallButton();\n    };\n\n    _this.endCurrentCall = function () {\n      _this.props.channel.trigger(\"client-endcall\", {\n        room: _this.state.room\n      });\n\n      _this.endCall();\n    };\n\n    _this.toggleEndCallButton = function () {\n      /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n          document.getElementById(\"endCall\").style.display = \"none\";\n        } else {\n          document.getElementById(\"endCall\").style.display = \"block\";\n        }*/\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.callUser(this.props.callTo); //Listening for Session Description Protocol message with session details from remote peer\n      //   this.props.channel.bind(\"client-sdp\", msg => {\n      //   if (msg.room === this.props.userId) {\n      //       let answer = window.confirm(\n      //         \"You have a call from \" + msg.from + \": Would you like to answer?\"\n      //       );\n      //       if (!answer) {\n      //         return this.props.channel.trigger(\"client-reject\", { room: msg.room, rejected: this.props.userId });\n      //       }\n      //       this.setState({room: msg.room});\n      //       this.getCam()\n      //         .then(stream => {\n      //           this.localUserMedia = stream;\n      //           this.toggleEndCallButton();\n      //      this.localVideoRef.srcObject = stream;\n      //      stream.getTracks().forEach(track => this.props.addTrack(track, stream));\n      //           let sessionDesc = new RTCSessionDescription(msg.sdp);\n      //           this.props.setRemoteDescription(sessionDesc);\n      //           this.props.createAnswer();\n      //         })\n      //         .catch(error => {\n      //           console.log(\"an error occured\", error);\n      //         });\n      //     }\n      //   });\n      //Listening for answer to offer sent to remote peer\n      //   this.props.channel.bind(\"client-answer\", answer => {\n      //   if (answer.room === this.state.room) {\n      //       console.log(\"answer received\");\n      //       let sessionDesc = new RTCSessionDescription(answer.sdp);\n      //       console.log(this);\n      //       this.props.setRemoteDescription(sessionDesc)\n      //     }\n      //   });\n\n      this.props.channel.bind(\"client-reject\", function (answer) {\n        if (answer.room === _this2.state.room) {\n          console.log(\"Call declined\");\n          alert(\"call to \" + answer.rejected + \"was politely declined\");\n\n          _this2.endCall();\n        }\n      });\n      this.props.channel.bind(\"client-endcall\", function (answer) {\n        if (answer.room === _this2.state.room) {\n          console.log(\"Call Ended\");\n\n          _this2.endCall();\n        }\n      });\n    } //To iron over browser implementation anomalies like prefixes\n    //    prepareCaller = () => {\n    //       //Initializing a peer connection\n    //       this.props.caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n    //       //Listen for ICE Candidates and send them to remote peers\n    //       this.props.caller.onicecandidate = evt => {\n    //         if (!evt.candidate) return;\n    //         console.log(\"onicecandidate called\");\n    //         console.log(evt);\n    //         this.onIceCandidate(this.props.caller, evt);\n    //       };\n    //       //onaddstream handler to receive remote feed and show in remoteview video element\n    //       this.props.caller.ontrack = evt => {\n    //         console.log(evt);\n    //     this.remoteVideoRef.srcObject = evt.stream;\n    //       };\n    //     }\n    // getCam = () => {\n    //   //Get local audio/video feed and show it in selfview video element\n    //   return navigator.mediaDevices.getUserMedia({\n    //     video: true,\n    //     audio: true\n    //   });\n    // }\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.localVideoRef.srcObject = this.props.localStream;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        muted: true,\n        src: this.props.localStream,\n        className: classes.LocalVideo,\n        ref: function ref(lVid) {\n          return _this3.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        src: this.props.remoteStream,\n        className: classes.remoteVideo,\n        ref: function ref(rVid) {\n          return _this3.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    caller: state.call.caller,\n    channel: state.call.channel,\n    remoteStream: state.call.remoteStream,\n    localStream: state.call.localStream\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addIceCandidate: function addIceCandidate(iceCandidate) {\n      return dispatch(callActionCreators.addIceCandidate(iceCandidate));\n    },\n    addTrack: function addTrack(track, stream) {\n      return dispatch(callActionCreators.addTrack(track, stream));\n    },\n    setRemoteDescription: function setRemoteDescription(sessionDesc) {\n      return dispatch(callActionCreators.setRemoteDescription(sessionDesc));\n    },\n    setLocalDescription: function setLocalDescription(sessionDesc) {\n      return dispatch(callActionCreators.setLocalDescription(sessionDesc));\n    },\n    createAnswer: function createAnswer() {\n      return dispatch(callActionCreators.createAnswer());\n    },\n    createOffer: function createOffer() {\n      return dispatch(callActionCreators.createOffer());\n    },\n    getCam: function getCam() {\n      return dispatch(callActionCreators.getCam());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","connect","callActionCreators","Video","state","id","room","GetRTCIceCandidate","window","RTCIceCandidate","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","callUser","user","props","getCam","endCall","setState","undefined","localUserMedia","getTracks","track","stop","toggleEndCallButton","endCurrentCall","channel","trigger","callTo","bind","answer","console","log","alert","rejected","localVideoRef","srcObject","localStream","LocalVideo","lVid","remoteStream","remoteVideo","rVid","remoteVideoRef","mapStateToProps","userId","auth","caller","call","mapDispatchToProps","dispatch","addIceCandidate","iceCandidate","addTrack","stream","setRemoteDescription","sessionDesc","setLocalDescription","createAnswer","createOffer"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nimport { connect } from 'react-redux';\nimport * as callActionCreators from '../../store/actions/actionIndex'\n\nclass Video extends Component {\n    \n    state = {\n          id: null,\n          room: ''\n    }\n       \n    componentDidMount (){\n          \n        \n        this.callUser(this.props.callTo);\n       \n          \n          //Listening for Session Description Protocol message with session details from remote peer\n        //   this.props.channel.bind(\"client-sdp\", msg => {\n    \n        //   if (msg.room === this.props.userId) {\n        //       let answer = window.confirm(\n        //         \"You have a call from \" + msg.from + \": Would you like to answer?\"\n        //       );\n        //       if (!answer) {\n        //         return this.props.channel.trigger(\"client-reject\", { room: msg.room, rejected: this.props.userId });\n        //       }\n        //       this.setState({room: msg.room});\n        //       this.getCam()\n        //         .then(stream => {\n        //           this.localUserMedia = stream;\n        //           this.toggleEndCallButton();\n                 \n        //      this.localVideoRef.srcObject = stream;\n        //      stream.getTracks().forEach(track => this.props.addTrack(track, stream));\n\n        //           let sessionDesc = new RTCSessionDescription(msg.sdp);\n        //           this.props.setRemoteDescription(sessionDesc);\n        //           this.props.createAnswer();\n        //         })\n        //         .catch(error => {\n        //           console.log(\"an error occured\", error);\n        //         });\n        //     }\n        //   });\n      \n          //Listening for answer to offer sent to remote peer\n        //   this.props.channel.bind(\"client-answer\", answer => {\n        //   if (answer.room === this.state.room) {\n            \n        //       console.log(\"answer received\");\n        //       let sessionDesc = new RTCSessionDescription(answer.sdp);\n        //       console.log(this);\n        //       this.props.setRemoteDescription(sessionDesc)\n        //     }\n        //   });\n      \n        this.props.channel.bind(\"client-reject\", answer => {\n            if (answer.room === this.state.room) {\n              console.log(\"Call declined\");\n              alert(\"call to \" + answer.rejected + \"was politely declined\");\n              this.endCall();\n            }\n          });\n      \n          this.props.channel.bind(\"client-endcall\", answer =>  {\n            if (answer.room === this.state.room) {\n              console.log(\"Call Ended\");\n              this.endCall();\n            }\n          });\n          \n    }\n       \n    \n        //To iron over browser implementation anomalies like prefixes\n        \n    //    prepareCaller = () => {\n    //       //Initializing a peer connection\n    //       this.props.caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n    \n    //       //Listen for ICE Candidates and send them to remote peers\n    //       this.props.caller.onicecandidate = evt => {\n    //         if (!evt.candidate) return;\n    //         console.log(\"onicecandidate called\");\n    //         console.log(evt);\n    //         this.onIceCandidate(this.props.caller, evt);\n    //       };\n    //       //onaddstream handler to receive remote feed and show in remoteview video element\n    //       this.props.caller.ontrack = evt => {\n    //         console.log(evt);\n    //     this.remoteVideoRef.srcObject = evt.stream;\n    //       };\n    //     }\n        // getCam = () => {\n            \n        //   //Get local audio/video feed and show it in selfview video element\n        //   return navigator.mediaDevices.getUserMedia({\n        //     video: true,\n        //     audio: true\n        //   });\n        // }\n    \n        GetRTCIceCandidate = () => {\n          window.RTCIceCandidate =\n            window.RTCIceCandidate ||\n            window.webkitRTCIceCandidate ||\n            window.mozRTCIceCandidate ||\n            window.msRTCIceCandidate;\n    \n          return window.RTCIceCandidate;\n        }\n    \n    GetRTCPeerConnection = () => {\n          window.RTCPeerConnection =\n            window.RTCPeerConnection ||\n            window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection ||\n            window.msRTCPeerConnection;\n          return window.RTCPeerConnection;\n        }\n    \n         GetRTCSessionDescription = () => {\n          window.RTCSessionDescription =\n            window.RTCSessionDescription ||\n            window.webkitRTCSessionDescription ||\n            window.mozRTCSessionDescription ||\n            window.msRTCSessionDescription;\n          return window.RTCSessionDescription;\n        }\n    \n        //Create and send offer to remote peer on button click\n       callUser = user => {\n          this.props.getCam();\n        }\n    \n     endCall = () => {\n          this.setState({room: undefined});\n          ///this.props.closeCaller.close();\n          for (let track of this.localUserMedia.getTracks()) {\n            track.stop();\n          }\n        //   this.prepareCaller();\n          this.toggleEndCallButton();\n        }\n    \n       endCurrentCall = () => {\n          this.props.channel.trigger(\"client-endcall\", {\n            room: this.state.room\n          });\n    \n          this.endCall();\n        }\n    \n        //Send the ICE Candidate to the remote peer\n        // onIceCandidate = (peer, evt) => {\n        //   if (evt.candidate) {\n        //     this.props.channel.trigger(\"client-candidate\", {\n        //       candidate: evt.candidate,\n        //       room: this.state.room\n        //     });\n        //   }\n        // }\n    \n         toggleEndCallButton = () => {\n        /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n            document.getElementById(\"endCall\").style.display = \"none\";\n          } else {\n            document.getElementById(\"endCall\").style.display = \"block\";\n          }*/\n        }\n    componentDidUpdate () {\n        this.localVideoRef.srcObject = this.props.localStream;\n    }\n       \n    render () {\n\n        return (\n            <div className={classes.Video}>\n                <video autoPlay muted src={this.props.localStream} className={classes.LocalVideo} ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay src={this.props.remoteStream} className={classes.remoteVideo} ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        caller: state.call.caller,\n        channel: state.call.channel,\n        remoteStream: state.call.remoteStream,\n        localStream: state.call.localStream\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        addIceCandidate: (iceCandidate) => dispatch(callActionCreators.addIceCandidate(iceCandidate)),\n        addTrack: (track, stream) => dispatch(callActionCreators.addTrack(track, stream)),\n        setRemoteDescription: sessionDesc => dispatch(callActionCreators.setRemoteDescription(sessionDesc)),\n        setLocalDescription:  sessionDesc => dispatch(callActionCreators.setLocalDescription(sessionDesc)),\n        createAnswer: () => dispatch(callActionCreators.createAnswer()),\n        createOffer: () => dispatch(callActionCreators.createOffer()),\n        getCam: () => dispatch(callActionCreators.getCam())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);"]},"metadata":{},"sourceType":"module"}