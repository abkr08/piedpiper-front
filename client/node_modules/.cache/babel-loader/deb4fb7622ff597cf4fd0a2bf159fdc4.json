{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.gotLocalStream = function (mediaStream) {\n      _this.localStream = mediaStream;\n      _this.localVideoRef.srcObject = mediaStream;\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      _this.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return _this.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      _this.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return _this.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      _this.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return _this.RTCSessionDescription;\n    };\n\n    _this.prepareCaller = function () {\n      //Initializing a peer connection\n      var caller = new window.RTCPeerConnection(); //Listen for ICE Candidates and send them to remote peers\n\n      caller.onicecandidate = function (evt) {\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n\n        _this.onIceCandidate(caller, evt);\n      }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n      caller.onaddstream = function (evt) {\n        console.log(\"onaddstream called\");\n\n        if (window.URL) {\n          _this.remoteVideoRef.srcObject = window.URL.createObjectURL(evt.stream);\n        } else {\n          _this.remoteVideoRef.srcObject = evt.stream;\n        }\n      };\n    };\n\n    _this.onIceCandidate = function (peer, evt) {\n      alert('called');\n\n      if (evt.candidate) {\n        _this.channel.trigger(\"client-candidate\", {\n          \"candidate\": evt.candidate // \"room\": room\n\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.channel = pusher.subscribe('presence-videocall');\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }).then(this.gotLocalStream).catch(function (err) {\n        return console.log(err);\n      });\n      this.GetRTCPeerConnection();\n      this.GetRTCSessionDescription();\n      this.GetRTCIceCandidate(); //prepare the caller to use peerconnection\n\n      this.prepareCaller();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        ref: function ref(lVid) {\n          return _this2.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        ref: function ref(rVid) {\n          return _this2.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nexport default Video;","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","Video","gotLocalStream","mediaStream","localStream","localVideoRef","srcObject","GetRTCIceCandidate","RTCIceCandidate","window","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","prepareCaller","caller","onicecandidate","evt","candidate","console","log","onIceCandidate","onaddstream","URL","remoteVideoRef","createObjectURL","stream","peer","alert","channel","trigger","subscribe","navigator","mediaDevices","getUserMedia","video","then","catch","err","lVid","rVid"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nclass Video extends Component {\n    \n    componentDidMount () {\n        this.channel = pusher.subscribe('presence-videocall');\n            navigator.mediaDevices.getUserMedia({\n                video: true\n            })\n            .then(this.gotLocalStream)\n            .catch(err => console.log(err));\n            this.GetRTCPeerConnection();\n            this.GetRTCSessionDescription();\n            this.GetRTCIceCandidate();\n    //prepare the caller to use peerconnection\n            this.prepareCaller();\n    }\n\n    gotLocalStream = mediaStream => {\n        this.localStream = mediaStream;\n        this.localVideoRef.srcObject = mediaStream;\n    }\n\n     GetRTCIceCandidate = () => {\n       this.RTCIceCandidate =\n        window.RTCIceCandidate ||\n        window.webkitRTCIceCandidate ||\n        window.mozRTCIceCandidate ||\n        window.msRTCIceCandidate;\n  \n        return this.RTCIceCandidate;\n      }\n  \n       GetRTCPeerConnection = () => {\n        this.RTCPeerConnection =\n        window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n         window.msRTCPeerConnection;\n        return this.RTCPeerConnection;\n      }\n  \n       GetRTCSessionDescription = () => {\n        this.RTCSessionDescription =\n        window.RTCSessionDescription ||\n        window.webkitRTCSessionDescription ||\n        window.mozRTCSessionDescription ||\n        window.msRTCSessionDescription;\n        return this.RTCSessionDescription;\n      }\n       prepareCaller = () => {\n        //Initializing a peer connection\n        const caller = new window.RTCPeerConnection();\n        \n        //Listen for ICE Candidates and send them to remote peers\n        caller.onicecandidate = (evt) => {\n          if (!evt.candidate) return;\n          console.log(\"onicecandidate called\");\n          this.onIceCandidate(caller, evt);\n        };\n        //onaddstream handler to receive remote feed and show in remoteview video element\n        caller.onaddstream = (evt) => {\n          console.log(\"onaddstream called\");\n          if (window.URL) {\n            this.remoteVideoRef.srcObject = window.URL.createObjectURL(\n              evt.stream\n            );\n          } else {\n            this.remoteVideoRef.srcObject = evt.stream;\n          }\n        };\n      }\n      onIceCandidate = (peer, evt) => {\n          alert('called')\n        if (evt.candidate) {\n            this.channel.trigger(\"client-candidate\", {\n                \"candidate\": evt.candidate,\n                // \"room\": room\n            });\n        }\n    }\n    render () {\n        return (\n            <div className={classes.Video}>\n                <video autoPlay ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\n\nexport default Video;"]},"metadata":{},"sourceType":"module"}