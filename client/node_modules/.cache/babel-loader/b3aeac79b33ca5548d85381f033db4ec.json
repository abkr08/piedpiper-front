{"ast":null,"code":"import _objectSpread from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Desktop/Pied Piper Chat/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Desktop/Pied Piper Chat/client/src/components/Auth/Register/Register.js\";\nimport React, { Component } from 'react';\nimport classes from './Register.module.css';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../../store/actions/actionIndex';\nimport Input from '../../UI/Input/Input';\nimport { checkValidity, updateObject } from '../../../shared/utility';\nimport Button from '../../UI/Button/Button';\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Register)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            placeholder: 'Enter your full name',\n            type: 'text'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            placeholder: 'Enter your email',\n            type: 'email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        username: {\n          elementType: 'input',\n          elementConfig: {\n            placeholder: 'Enter username',\n            type: 'text'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            placeholder: 'Enter your password',\n            type: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        password2: {\n          elementType: 'input',\n          elementConfig: {\n            placeholder: 'Confirm your password',\n            type: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8,\n            isEqual: false\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    _this.onChange = function (event, inputIdentifier) {\n      var value = event.target.value;\n      var updatedFormElement = updateObject(_this.state.controls[inputIdentifier], {\n        value: value,\n        touched: true,\n        valid: checkValidity(value, _this.state.controls[inputIdentifier].validation)\n      });\n      var updatedForm = updateObject(_this.state.controls, _defineProperty({}, inputIdentifier, updatedFormElement));\n      var formIsValid = true;\n\n      for (var key in updatedForm) {\n        formIsValid = updatedForm[key].valid && formIsValid;\n      }\n\n      _this.setState({\n        controls: updatedForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      var _this$state$controls = _this.state.controls,\n          password = _this$state$controls.password,\n          password2 = _this$state$controls.password2;\n      console.log(password.value, password2.value);\n\n      if (password.value !== password2.value) {\n        alert('passwords do not match');\n      } else {\n        var controls = _objectSpread({}, _this.state.controls);\n\n        var data = {};\n\n        for (var control in controls) {\n          data[control] = controls[control]['value'];\n        }\n\n        _this.props.onRegister(data);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.registrationSuccess) {\n        this.props.history.push('/login');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElements = [];\n\n      for (var key in this.state.controls) {\n        formElements.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElements.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.onChange(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: classes.RegisterBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \" Register \"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Register\")));\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    registrationSuccess: state.auth.registrationSuccess\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onRegister: function onRegister(data) {\n      return dispatch(actionCreators.onRegister(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/components/Auth/Register/Register.js"],"names":["React","Component","classes","connect","actionCreators","Input","checkValidity","updateObject","Button","Register","state","controls","name","elementType","elementConfig","placeholder","type","value","validation","required","valid","touched","email","isEmail","username","password","minLength","password2","isEqual","formIsValid","onChange","event","inputIdentifier","target","updatedFormElement","updatedForm","key","setState","onSubmit","preventDefault","console","log","alert","data","control","props","onRegister","registrationSuccess","history","push","formElements","id","config","form","map","formElement","RegisterBox","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport classes from './Register.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../../store/actions/actionIndex';\r\nimport Input from '../../UI/Input/Input';\r\nimport { checkValidity, updateObject} from '../../../shared/utility';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nclass Register extends Component {\r\n\r\n    state = {\r\n      controls: {\r\n       name: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n            placeholder: 'Enter your full name',\r\n            type: 'text'\r\n          },\r\n          value: '',\r\n          validation: {\r\n            required: true\r\n          },\r\n          valid: false,\r\n          touched: false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                placeholder: 'Enter your email',\r\n                type: 'email'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        username: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              placeholder: 'Enter username',\r\n              type: 'text'\r\n          },\r\n          value: '',\r\n          validation: {\r\n              required: true\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      },  \r\n        password: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                placeholder: 'Enter your password',\r\n                type: 'password'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 8\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password2: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              placeholder: 'Confirm your password',\r\n              type: 'password'\r\n          }, \r\n          value: '',\r\n          validation: {\r\n              required: true,\r\n              minLength: 8,\r\n              isEqual: false\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      }\r\n           },\r\n        formIsValid: false\r\n  }\r\n\r\n  onChange = (event, inputIdentifier) => {\r\n    const { value } = event.target;\r\n    const updatedFormElement = updateObject(this.state.controls[inputIdentifier], {\r\n      value: value,\r\n      touched: true,\r\n      valid: checkValidity(value, this.state.controls[inputIdentifier].validation)\r\n  })\r\n  const updatedForm = updateObject(this.state.controls, {\r\n      [inputIdentifier]: updatedFormElement\r\n  });\r\n  let formIsValid = true;\r\n  for (let key in updatedForm){\r\n      formIsValid = updatedForm[key].valid && formIsValid;\r\n  }\r\n  this.setState({controls: updatedForm, formIsValid: formIsValid});\r\n  };\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault();\r\n    let { password, password2} = this.state.controls;\r\n    console.log(password.value, password2.value)\r\n    if (password.value !== password2.value){\r\n      alert('passwords do not match');\r\n    } else {\r\n    const controls = { ...this.state.controls };\r\n    const data = {};\r\n    for (let control in controls){\r\n      data[control] = controls[control]['value'];\r\n    }\r\n    this.props.onRegister(data);\r\n    }\r\n    \r\n  };\r\n\r\n  componentDidUpdate () {\r\n    if (this.props.registrationSuccess){\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n  render() {\r\n    let formElements = [];\r\n    for (let key in this.state.controls){\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.controls[key] \r\n      });\r\n    }\r\n    let form = formElements.map(formElement => {\r\n      return <Input \r\n          key={formElement.id} elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={ event => this.onChange(event, formElement.id)}\r\n            />\r\n    })\r\n    return (\r\n      <div className={classes.RegisterBox}>\r\n        <h2> Register </h2>\r\n        <form onSubmit={this.onSubmit}>\r\n          {form}\r\n          <Button btnType='Success' disabled={!this.state.formIsValid} >Register</Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    registrationSuccess: state.auth.registrationSuccess\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onRegister: data => dispatch(actionCreators.onRegister(data))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n"]},"metadata":{},"sourceType":"module"}