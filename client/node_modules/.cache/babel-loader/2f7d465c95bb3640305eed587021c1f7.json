{"ast":null,"code":"import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport axios from '../../../Axios';\nvar currentUser;\nvar user;\nexport var chatInit = function chatInit() {\n  return function (dispatch, getState) {\n    var userId = getState().auth.userId;\n    user = userId;\n    var chatManager = new ChatManager({\n      instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n      userId: userId,\n      tokenProvider: new TokenProvider({\n        url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n      })\n    });\n    chatManager.connect({\n      onAddedToRoom: function onAddedToRoom(room) {// this.getRooms();\n        // this.setState({showSideDrawer: false, room: room});\n        // this.getMessages(room);\n      }\n    }).then(function (user) {\n      currentUser = user;\n      dispatch(subscribeToRooms(currentUser));\n      dispatch(chatInitSuccess(currentUser));\n      dispatch(getRooms());\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\n\nvar getRooms = function getRooms() {\n  return function (dispatch) {\n    var contacts = [];\n    currentUser.rooms.forEach(function (room) {\n      var obj = {}; //let contactNames = Object.keys(room).filter(key => console.log(key, user));\n      //let rtt = room.userIds.filter(name => name.length > 0)\n\n      var conts = room.userIds;\n      console.log(conts);\n      obj.name = !room.isPrivate ? room.name : room.userIds.filter(function (name) {\n        return name !== user;\n      }).join('');\n      obj.id = room.id; //console.log(room.userIds, user);\n\n      contacts.push(obj);\n    });\n    dispatch({\n      type: 'ON_ROOMS_FETCHED',\n      contacts: contacts\n    });\n  };\n};\n\nvar chatInitSuccess = function chatInitSuccess(currentUser) {\n  return {\n    type: actionTypes.CHAT_INIT_SUCCESS,\n    currentUser: currentUser\n  };\n};\n\nvar onNewMessage = function onNewMessage(message, belongsToCurrentRoom) {\n  return {\n    type: actionTypes.ON_NEW_MESSAGE,\n    message: message,\n    belongsToCurrentRoom: belongsToCurrentRoom\n  };\n};\n\nvar subscribeToRooms = function subscribeToRooms(user) {\n  return function (dispatch, getState) {\n    var contacts = user.rooms;\n    contacts.map(function (con) {\n      return user.subscribeToRoom({\n        roomId: con.id,\n        hooks: {\n          onMessage: function onMessage(message) {\n            var belongsToCurrentRoom = false;\n            var currentRoom = getState().chat.currentRoom;\n\n            if (currentRoom && currentRoom.id === message.roomId) {\n              belongsToCurrentRoom = true;\n            }\n\n            dispatch(onNewMessage(message, belongsToCurrentRoom));\n          }\n        },\n        messageLimit: 0\n      });\n    });\n  };\n};\n\nvar fetchMessagesSuccess = function fetchMessagesSuccess(messages, room) {\n  return {\n    type: actionTypes.FETCH_MESSAGES_SUCCESS,\n    messages: messages,\n    room: room\n  };\n};\n\nexport var getMessages = function getMessages(room) {\n  return function (dispatch) {\n    currentUser.fetchMessages({\n      roomId: room['id'],\n      //initialId: 42,\n      direction: 'older',\n      limit: 100\n    }).then(function (messages) {\n      dispatch(fetchMessagesSuccess(messages, room));\n    }).catch(function (err) {\n      console.log(\"Error fetching messages: \".concat(err));\n    });\n  };\n};\nexport var sendMessage = function sendMessage(data) {\n  return function (dispatch) {\n    currentUser.sendMessage(data);\n  };\n};\n\nvar createGroupSuccess = function createGroupSuccess() {\n  return {\n    type: actionTypes.CREATE_GROUP_SUCCESS\n  };\n};\n\nvar createGroupFailed = function createGroupFailed(err) {\n  return {\n    type: actionTypes.CREATE_GROUP_FAILED,\n    err: err\n  };\n};\n\nexport var createNewGroup = function createNewGroup(data) {\n  return function (dispatch) {\n    currentUser.createRoom({\n      name: data.name,\n      private: false,\n      addUserIds: data.participants,\n      customData: {\n        foo: 42\n      }\n    }).then(function (room) {\n      console.log(\"Created room called \".concat(room.name));\n      dispatch(createGroupSuccess());\n      dispatch(subscribeToRooms());\n    }).catch(function (err) {\n      console.log(\"Error creating room \".concat(err));\n      dispatch(createGroupFailed(err));\n    });\n  };\n};\n\nvar startNewChatSuccess = function startNewChatSuccess() {\n  return {\n    type: actionTypes.START_NEW_CHAT_SUCCESS\n  };\n};\n\nvar startNewChatFailed = function startNewChatFailed(err) {\n  return {\n    type: actionTypes.START_NEW_CHAT_FAILED,\n    err: err\n  };\n};\n\nexport var startNewChat = function startNewChat(data) {\n  return function (dispatch) {\n    var token = localStorage.getItem('token');\n    console.log(data);\n    axios.get(\"/search/\".concat(data.chatParticipant), {\n      headers: {\n        'x-auth-token': token\n      }\n    }).then(function (res) {\n      currentUser.createRoom({\n        name: \"\".concat(currentUser, \"and\").concat(data.chatParticipant),\n        private: true,\n        addUserIds: [data.chatParticipant],\n        customData: {\n          displayImage: res.data.avatar\n        }\n      }).then(function (res) {\n        console.log(res);\n        dispatch(startNewChatSuccess());\n        dispatch(subscribeToRooms());\n      }).catch(function (err) {\n        console.log(err);\n        dispatch(startNewChatFailed(err));\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var joinRoom = function joinRoom(roomId) {\n  return function (dispatch) {\n    currentUser.joinRoom({\n      roomId: roomId\n    }).then(function (room) {\n      console.log(\"Joined room with ID: \".concat(room.id));\n    }).catch(function (err) {\n      console.log(\"Error joining room \".concat(roomId, \": \").concat(err));\n    });\n  };\n};\nexport var deleteChat = function deleteChat(roomId) {\n  return function (dispatch) {\n    console.log(typeof roomId);\n    currentUser.leaveRoom({\n      roomId: roomId\n    }).then(function () {\n      console.log(\"Deleted room with ID: \".concat(roomId)); //dispatch(subscribeToRooms());\n      //   dispatch(chatInitSuccess());\n    }).catch(function (err) {\n      console.log(\"Error deleted room \".concat(roomId, \": \").concat(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/gotzil/Desktop/Pied Piper Chat/client/src/store/actions/actionCreators/chatActionCreators.js"],"names":["actionTypes","ChatManager","TokenProvider","axios","currentUser","user","chatInit","dispatch","getState","userId","auth","chatManager","instanceLocator","tokenProvider","url","connect","onAddedToRoom","room","then","subscribeToRooms","chatInitSuccess","getRooms","catch","err","console","log","contacts","rooms","forEach","obj","conts","userIds","name","isPrivate","filter","join","id","push","type","CHAT_INIT_SUCCESS","onNewMessage","message","belongsToCurrentRoom","ON_NEW_MESSAGE","map","con","subscribeToRoom","roomId","hooks","onMessage","currentRoom","chat","messageLimit","fetchMessagesSuccess","messages","FETCH_MESSAGES_SUCCESS","getMessages","fetchMessages","direction","limit","sendMessage","data","createGroupSuccess","CREATE_GROUP_SUCCESS","createGroupFailed","CREATE_GROUP_FAILED","createNewGroup","createRoom","private","addUserIds","participants","customData","foo","startNewChatSuccess","START_NEW_CHAT_SUCCESS","startNewChatFailed","START_NEW_CHAT_FAILED","startNewChat","token","localStorage","getItem","get","chatParticipant","headers","res","displayImage","avatar","joinRoom","deleteChat","leaveRoom"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport axios from '../../../Axios';\n\nlet currentUser;\nlet user;\nexport const chatInit = () => { \n    return (dispatch, getState) => {\n        const {userId} = getState().auth;\n        user = userId;\n        const chatManager = new ChatManager({\n            instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n            userId: userId,\n            tokenProvider: new TokenProvider({\n                url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n            })\n        });    \n        chatManager\n        .connect({\n            onAddedToRoom: room => {\n                // this.getRooms();\n                // this.setState({showSideDrawer: false, room: room});\n                // this.getMessages(room);\n            }\n        })\n        .then(user => {\n            currentUser = user;\n            dispatch(subscribeToRooms(currentUser))\n            dispatch(chatInitSuccess(currentUser));\n            dispatch(getRooms());\n\n        })\n        .catch(err => console.log(err));\n    }\n}\nconst getRooms = () => {\n    return dispatch => {\n        const contacts = [];\n        currentUser.rooms.forEach(room => {\n            let obj = {};\n            //let contactNames = Object.keys(room).filter(key => console.log(key, user));\n            //let rtt = room.userIds.filter(name => name.length > 0)\n            let conts = room.userIds;\n            console.log(conts);\n            obj.name = !room.isPrivate ? room.name :\n                        room.userIds.filter(name => name !== user).join('');\n            obj.id = room.id;\n            \n            //console.log(room.userIds, user);\n            contacts.push(obj);\n        });\n        dispatch({type: 'ON_ROOMS_FETCHED', contacts})\n    }\n}\nconst chatInitSuccess = currentUser => {\n    return {\n        type: actionTypes.CHAT_INIT_SUCCESS,\n        currentUser\n    }\n}\nconst onNewMessage = (message, belongsToCurrentRoom) => {\n    return {\n        type: actionTypes.ON_NEW_MESSAGE,\n        message,\n        belongsToCurrentRoom\n    }\n}\nconst subscribeToRooms = user => {\n    return (dispatch, getState) => {\n        const contacts = user.rooms;\n        contacts.map(con => {\n            return  user.subscribeToRoom({\n                 roomId: con.id,\n                 hooks: {\n                   onMessage: message => {\n                     let belongsToCurrentRoom = false;\n                     const { currentRoom } = getState().chat;\n                    if (currentRoom && currentRoom.id === message.roomId){\n                        belongsToCurrentRoom = true;\n                    } \n                    dispatch(onNewMessage(message, belongsToCurrentRoom));\n                   }\n                 },\n                 messageLimit: 0\n               })\n         })\n    }\n}\n\nconst fetchMessagesSuccess = (messages, room) => {\n    return {\n        type: actionTypes.FETCH_MESSAGES_SUCCESS,\n        messages,\n        room\n    }\n}\nexport const getMessages = room => {\n    return dispatch => {\n        currentUser.fetchMessages({\n            roomId: room['id'],\n            //initialId: 42,\n            direction: 'older',\n            limit: 100,\n          })\n            .then(messages => {\n              dispatch(fetchMessagesSuccess(messages, room));\n            })\n            .catch(err => {\n              console.log(`Error fetching messages: ${err}`);\n            })\n    }\n   \n}\nexport const sendMessage = data => {\n    return dispatch => {\n        currentUser.sendMessage(data);\n    }\n}\nconst createGroupSuccess = () => {\n    return {\n        type: actionTypes.CREATE_GROUP_SUCCESS\n    }\n}\nconst createGroupFailed = err => {\n    return {\n        type: actionTypes.CREATE_GROUP_FAILED,\n        err\n    }\n}\nexport const createNewGroup = data => {\n    return dispatch => {\n        currentUser.createRoom({\n            name: data.name,\n            private: false,\n            addUserIds: data.participants,\n            customData: { foo: 42 },\n          }).then(room => {\n            console.log(`Created room called ${room.name}`);\n            dispatch(createGroupSuccess());\n            dispatch(subscribeToRooms());\n          })\n          .catch(err => {\n            console.log(`Error creating room ${err}`);\n            dispatch(createGroupFailed(err));\n          })\n    }\n}\nconst startNewChatSuccess = () => {\n    return {\n        type: actionTypes.START_NEW_CHAT_SUCCESS\n    }\n}\nconst startNewChatFailed = err => {\n    return {\n        type: actionTypes.START_NEW_CHAT_FAILED,\n        err\n    }\n}\nexport const startNewChat = data => {\n    return dispatch => {\n        let token = localStorage.getItem('token');\n        console.log(data)\n        axios.get(`/search/${data.chatParticipant}`, {headers: {'x-auth-token': token}})\n            .then(res => {\n                currentUser.createRoom({\n                name: `${currentUser}and${data.chatParticipant}`,\n                private: true,\n                addUserIds: [data.chatParticipant],\n                customData: {displayImage: res.data.avatar}     \n            })\n                .then(res => {\n                    console.log(res);\n                    dispatch(startNewChatSuccess());\n                    dispatch(subscribeToRooms());\n                })\n                .catch(err => {\n                    console.log(err);\n                    dispatch(startNewChatFailed(err));\n                });\n            })\n            .catch(err => console.log(err));\n    }\n}\nexport const joinRoom = roomId => {\n    return dispatch => {    \n        currentUser.joinRoom({ roomId })\n            .then(room => {\n                console.log(`Joined room with ID: ${room.id}`)\n            })\n            .catch(err => {\n                console.log(`Error joining room ${roomId}: ${err}`)\n            })\n    }\n}\n\nexport const deleteChat = roomId => {\n    return dispatch => {\n        console.log(typeof roomId)\n        currentUser.leaveRoom({ roomId: roomId })\n        .then(() => {\n          console.log(`Deleted room with ID: ${roomId}`);\n          //dispatch(subscribeToRooms());\n        //   dispatch(chatInitSuccess());\n        })\n        .catch(err => {\n          console.log(`Error deleted room ${roomId}: ${err}`)\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}