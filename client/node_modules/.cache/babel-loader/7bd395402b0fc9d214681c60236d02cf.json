{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store } from '../../../index';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {\n  console.log(member);\n});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id\n  /*=== this.state.room*/\n  ) {//this.endCall();\n    }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  // if (msg.room === this.state.room) {\n  addIceCandidate(new RTCIceCandidate(msg.candidate)); //}\n});\nchannel.bind(\"client-sdp\", function (msg) {\n  store.dispatch({\n    type: actionTypes.ON_INCOMING_CALL\n  });\n\n  if (msg.room\n  /*=== this.props.userId*/\n  ) {\n      var answer = window.confirm(\"You have a call from \" + msg.from + \": Would you like to answer?\");\n\n      if (!answer) {\n        return channel.trigger(\"client-reject\", {\n          room: msg.room\n          /*rejected: this.props.userId */\n\n        });\n      } //this.setState({room: msg.room});\n\n\n      getCam('answer');\n      var sessionDesc = new RTCSessionDescription(msg.sdp);\n      setRemoteDescription(sessionDesc);\n      createAnswer(); //.then(stream => {\n      //this.localUserMedia = stream;\n      // this.toggleEndCallButton();\n      //this.localVideoRef.srcObject = stream;\n      //    dispatch(onLocalStream(stream));\n      //stream.getTracks().forEach(track => addTrack(track, stream));\n      // let sessionDesc = new RTCSessionDescription(msg.sdp);\n      // setRemoteDescription(sessionDesc);\n      //})\n      //   .catch(error => {\n      //     console.log(\"an error occured\", error);\n      //   });\n    }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  if (answer.room\n  /*=== this.state.room*/\n  ) {\n      console.log(\"answer received\");\n      var sessionDesc = new RTCSessionDescription(answer.sdp);\n      setRemoteDescription(sessionDesc);\n    }\n});\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n};\n\nexport var getCam = function getCam(param) {\n  //Get local audio/video feed and show it in selfview video element\n  return function (dispatch) {\n    getMedia().then(function (stream) {\n      //this.localVideoRef.srcObject = stream;\n      stream.getTracks().forEach(function (track) {\n        return addTrack(track, stream);\n      });\n\n      if (param !== 'answer') {\n        dispatch(createOffer());\n      }\n\n      dispatch(onLocalStream(stream)); //this.localUserMedia = stream;\n      //room = user;\n      //this.setState({room: user})\n    }).catch(function (error) {\n      console.log(\"an error occured\", error);\n    });\n    ;\n  };\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  console.log(track);\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    dispatch(prepareCaller(channel)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      console.log(evt); //this.remoteVideoRef.srcObject = evt.stream;\n\n      dispatch(onTrack(evt));\n    };\n  };\n};\nexport var addIceCandidate = function addIceCandidate(iceCandidate) {\n  console.log(iceCandidate);\n  return function (dispatch) {\n    console.log(iceCandidate);\n    caller.addIceCandidate(iceCandidate);\n  };\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate // room: room\n\n    });\n  }\n};\n\nexport var setLocalDescription = function setLocalDescription(sessionDesc) {\n  caller.setLocalDescription(sessionDesc); //   return dispatch => {\n  //       console.log('setLocalDesc', sessionDesc);\n  //     caller.setLocalDescription(sessionDesc);\n  //   }\n};\nexport var setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  caller.setRemoteDescription(sessionDesc); // return dispatch => {\n  //     caller.setRemoteDescription(sessionDesc);\n  // }\n};\nexport var addTrack = function addTrack(track, stream) {\n  caller.addTrack(track, stream); // return dispatch => {\n  //     caller.addTrack(track, stream);\n  // }\n};\nexport var createAnswer = function createAnswer() {\n  // return dispatch => {\n  caller.createAnswer().then(function (sdp) {\n    var sessionDesc = new RTCSessionDescription(sdp);\n    setLocalDescription(sessionDesc);\n    channel.trigger(\"client-answer\", {\n      sdp: sdp,\n      room: 'opp'\n    });\n  });\n  ; //}\n};\nexport var createOffer = function createOffer() {\n  return function (dispatch) {\n    console.log('createOffer');\n    caller.createOffer().then(function (desc) {\n      console.log('createOffer', desc);\n      var sessionDesc = new RTCSessionDescription(desc);\n      setLocalDescription(sessionDesc);\n      channel.trigger(\"client-sdp\", {\n        sdp: desc,\n        room: 'opp',\n        from: 'gotzil'\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","store","channel","subscribe","caller","window","RTCPeerConnection","bind","members","member","console","log","id","msg","addIceCandidate","RTCIceCandidate","candidate","dispatch","type","ON_INCOMING_CALL","room","answer","confirm","from","trigger","getCam","sessionDesc","RTCSessionDescription","sdp","setRemoteDescription","createAnswer","onLocalStream","stream","ON_LOCAL_STREAM","param","getMedia","then","getTracks","forEach","track","addTrack","createOffer","catch","error","navigator","mediaDevices","getUserMedia","video","audio","prepareCaller","PREPARE_CALLER","onTrack","ON_TRACK","remoteStream","streams","getCallerReady","onicecandidate","evt","onIceCandidate","ontrack","iceCandidate","peer","setLocalDescription","desc","err"],"mappings":"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","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store }  from '../../../index';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n\n\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n         \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n    console.log(member);\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n   \n    if (member.id /*=== this.state.room*/) {\n      //this.endCall();\n    }\n    \n  });\nchannel.bind(\"client-candidate\", msg => {\n    \n    // if (msg.room === this.state.room) {\n      addIceCandidate(new RTCIceCandidate(msg.candidate));\n    //}\n  });\n  channel.bind(\"client-sdp\", msg => {\n    store.dispatch({type: actionTypes.ON_INCOMING_CALL})\n    if (msg.room /*=== this.props.userId*/) {\n        let answer = window.confirm(\n          \"You have a call from \" + msg.from + \": Would you like to answer?\"\n        );\n        if (!answer) {\n          return channel.trigger(\"client-reject\", { room: msg.room, /*rejected: this.props.userId */});\n        }\n        //this.setState({room: msg.room});\n        getCam('answer');\n        let sessionDesc = new RTCSessionDescription(msg.sdp);\n        setRemoteDescription(sessionDesc);\n        createAnswer();\n          //.then(stream => {\n            //this.localUserMedia = stream;\n            // this.toggleEndCallButton();\n           \n       //this.localVideoRef.srcObject = stream;\n    //    dispatch(onLocalStream(stream));\n       //stream.getTracks().forEach(track => addTrack(track, stream));\n\n            // let sessionDesc = new RTCSessionDescription(msg.sdp);\n            // setRemoteDescription(sessionDesc);\n            \n          //})\n        //   .catch(error => {\n        //     console.log(\"an error occured\", error);\n        //   });\n      }\n    });\n\n    channel.bind(\"client-answer\", answer => {\n        if (answer.room /*=== this.state.room*/) {\n          \n            console.log(\"answer received\");\n            let sessionDesc = new RTCSessionDescription(answer.sdp);\n    \n            setRemoteDescription(sessionDesc)\n          }\n        });\n    \nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}    \nexport const getCam = (param) => {\n            \n    //Get local audio/video feed and show it in selfview video element\n    return dispatch => {\n        getMedia().then(stream => {\n\n            //this.localVideoRef.srcObject = stream;\n            stream.getTracks().forEach(track => addTrack(track, stream));\n            if (param !== 'answer'){\n                dispatch(createOffer())\n            }\n            dispatch(onLocalStream(stream));\n            //this.localUserMedia = stream;\n            \n            //room = user;\n        //this.setState({room: user})\n        \n        })\n        .catch(error => {\n          console.log(\"an error occured\", error);\n        });;\n    }\n  }\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\nconst onTrack = track => {\n    console.log(track);\n    return{\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n     dispatch(prepareCaller(channel));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    };\n    //onaddstream handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n      console.log(evt);\n  //this.remoteVideoRef.srcObject = evt.stream;\n  dispatch(onTrack(evt));\n    };\n    }\n}\nexport const addIceCandidate = iceCandidate => {\n    console.log(iceCandidate);\n    return dispatch => {\n        console.log(iceCandidate);\n    caller.addIceCandidate(iceCandidate);\n    }\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {\n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        // room: room\n      });\n    }\n  }\n\n  export const setLocalDescription = sessionDesc => {\n    caller.setLocalDescription(sessionDesc);\n    //   return dispatch => {\n    //       console.log('setLocalDesc', sessionDesc);\n    //     caller.setLocalDescription(sessionDesc);\n    //   }\n}\n\nexport const setRemoteDescription = sessionDesc => {\n\n    caller.setRemoteDescription(sessionDesc);\n    // return dispatch => {\n    //     caller.setRemoteDescription(sessionDesc);\n    // }\n}\n\nexport const addTrack = (track, stream) => {\n    caller.addTrack(track, stream);\n    // return dispatch => {\n    //     caller.addTrack(track, stream);\n    // }\n}\n\nexport const createAnswer = () => {\n    // return dispatch => {\n        caller.createAnswer().then(sdp => {\n        const sessionDesc = new RTCSessionDescription(sdp);\n          setLocalDescription(sessionDesc);\n          channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: 'opp'\n          });\n        });;\n    //}\n}\n\nexport const createOffer = () => {\n    \n    return dispatch => {\n        console.log('createOffer');\n        caller.createOffer().then(desc => {\n            console.log('createOffer', desc);\n            let sessionDesc = new RTCSessionDescription(desc);\n            setLocalDescription(sessionDesc);\n            channel.trigger(\"client-sdp\", {\n              sdp: desc,\n              room: 'opp',\n              from: 'gotzil'\n            });\n        }).catch(err => console.log(err));\n}\n}"]},"metadata":{},"sourceType":"module"}