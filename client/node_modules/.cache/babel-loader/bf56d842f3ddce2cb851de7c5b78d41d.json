{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\nimport { connect } from 'react-redux';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.gotLocalStream = function (mediaStream) {\n      _this.localStream = mediaStream;\n      _this.localVideoRef.srcObject = mediaStream;\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.prepareCaller = function () {\n      //Initializing a peer connection\n      _this.caller = new RTCPeerConnection();\n      console.log(_this.caller); //Listen for ICE Candidates and send them to remote peers\n\n      _this.caller.onicecandidate = function (evt) {\n        alert('jjnkn');\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n\n        _this.onIceCandidate(_this.caller, evt);\n      }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n      _this.caller.onaddstream = function (evt) {\n        console.log(\"onaddstream called\");\n        _this.remoteVideoRef.srcObject = evt.stream;\n      };\n    };\n\n    _this.onIceCandidate = function (peer, evt) {\n      if (evt.candidate) {\n        _this.channel.trigger(\"client-candidate\", {\n          \"candidate\": evt.candidate,\n          \"room\": _this.props.callTo\n        });\n      }\n    };\n\n    _this.getCam = function () {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    };\n\n    _this.callUser = function (user) {\n      _this.getCam().then(function (stream) {\n        _this.localVideoRef.srcObject = stream;\n\n        _this.toggleEndCallButton();\n\n        _this.caller.addStream(stream);\n\n        _this.localUserMedia = stream;\n\n        _this.caller.createOffer().then(function (desc) {\n          _this.caller.setLocalDescription(new RTCSessionDescription(desc));\n\n          _this.channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: user,\n            from: _this.props.userId\n          }); //room = user;\n\n        });\n      }).catch(function (error) {\n        console.log(\"an error occured\", error);\n      });\n    };\n\n    _this.toggleEndCallButton = function () {// if (document.getElementById(\"endCall\").style.display == \"block\") {\n      //   document.getElementById(\"endCall\").style.display = \"none\";\n      // } else {\n      //   document.getElementById(\"endCall\").style.display = \"block\";\n      // }\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.channel = pusher.subscribe('presence-videocall');\n      this.GetRTCPeerConnection();\n      this.GetRTCSessionDescription();\n      this.GetRTCIceCandidate(); //prepare the caller to use peerconnection\n\n      this.prepareCaller();\n      this.callUser(this.props.callTo);\n      this.channel.bind(\"client-candidate\", function (msg) {\n        if (msg.room) {\n          console.log(\"candidate received\");\n          this.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n        }\n      });\n      this.channel.bind(\"client-sdp\", function (msg) {\n        if (msg.room == _this2.props.userId) {\n          var answer = confirm(\"You have a call from: \" + msg.from + \"Would you like to answer?\");\n\n          if (!answer) {\n            return channel.trigger(\"client-reject\", {\n              \"room\": msg.room,\n              \"rejected\": _this2.props.userId\n            });\n          } //room = msg.room;\n\n\n          _this2.getCam().then(function (stream) {\n            _this2.localUserMedia = stream;\n\n            _this2.toggleEndCallButton();\n\n            _this2.localVideoRef.srcObject = stream;\n\n            _this2.caller.addStream(stream);\n\n            var sessionDesc = new RTCSessionDescription(msg.sdp);\n\n            _this2.caller.setRemoteDescription(sessionDesc);\n\n            _this2.caller.createAnswer().then(function (sdp) {\n              _this2.caller.setLocalDescription(new RTCSessionDescription(sdp));\n\n              _this2.channel.trigger(\"client-answer\", {\n                \"sdp\": sdp,\n                \"room\": _this2.props.callTo\n              });\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        muted: true,\n        className: classes.LocalVideo,\n        ref: function ref(lVid) {\n          return _this3.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        className: classes.remoteVideo,\n        ref: function ref(rVid) {\n          return _this3.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.userId\n  };\n};\n\nexport default connect(mapStateToProps)(Video);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","connect","Video","gotLocalStream","mediaStream","localStream","localVideoRef","srcObject","GetRTCIceCandidate","window","RTCIceCandidate","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","prepareCaller","caller","console","log","onicecandidate","evt","alert","candidate","onIceCandidate","onaddstream","remoteVideoRef","stream","peer","channel","trigger","props","callTo","getCam","navigator","mediaDevices","getUserMedia","video","audio","callUser","user","then","toggleEndCallButton","addStream","localUserMedia","createOffer","desc","setLocalDescription","sdp","room","from","userId","catch","error","subscribe","bind","msg","addIceCandidate","answer","confirm","sessionDesc","setRemoteDescription","createAnswer","LocalVideo","lVid","remoteVideo","rVid","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nimport { connect } from 'react-redux';\nclass Video extends Component {\n    \n    componentDidMount () {\n        this.channel = pusher.subscribe('presence-videocall');\n        this.GetRTCPeerConnection();\n        this.GetRTCSessionDescription();\n        this.GetRTCIceCandidate();\n    //prepare the caller to use peerconnection\n        this.prepareCaller();\n        this.callUser(this.props.callTo);\n        this.channel.bind(\"client-candidate\", function(msg) {\n            if(msg.room){\n                console.log(\"candidate received\");\n                this.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n            }\n        });\n\n        this.channel.bind(\"client-sdp\", msg => {\n            if(msg.room == this.props.userId){\n                var answer = confirm(\"You have a call from: \"+ msg.from + \"Would you like to answer?\");\n                if(!answer){\n                    return channel.trigger(\"client-reject\", {\"room\": msg.room, \"rejected\":this.props.userId});\n                }\n            \n                //room = msg.room;\n                this.getCam()\n                .then(stream => {\n                    this.localUserMedia = stream;\n                    this.toggleEndCallButton();\n                    \n                        this.localVideoRef.srcObject = stream;\n    \n                    this.caller.addStream(stream);\n                   let sessionDesc = new RTCSessionDescription(msg.sdp);\n                    this.caller.setRemoteDescription(sessionDesc);\n                    this.caller.createAnswer().then(sdp => {\n                        this.caller.setLocalDescription(new RTCSessionDescription(sdp));\n                        this.channel.trigger(\"client-answer\", {\n                            \"sdp\": sdp,\n                            \"room\": this.props.callTo\n                        });\n                    });\n    \n                });\n            }\n            });\n            }\n        \n    gotLocalStream = mediaStream => {\n        this.localStream = mediaStream;\n        this.localVideoRef.srcObject = mediaStream;\n    }\n\n     GetRTCIceCandidate = () => {\n       window.RTCIceCandidate =\n        window.RTCIceCandidate ||\n        window.webkitRTCIceCandidate ||\n        window.mozRTCIceCandidate ||\n        window.msRTCIceCandidate;\n  \n        return window.RTCIceCandidate;\n      }\n  \n       GetRTCPeerConnection = () => {\n        window.RTCPeerConnection =\n        window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n         window.msRTCPeerConnection;\n        return window.RTCPeerConnection;\n      }\n  \n       GetRTCSessionDescription = () => {\n        window.RTCSessionDescription =\n        window.RTCSessionDescription ||\n        window.webkitRTCSessionDescription ||\n        window.mozRTCSessionDescription ||\n        window.msRTCSessionDescription;\n        return window.RTCSessionDescription;\n      }\n       prepareCaller = () => {\n        //Initializing a peer connection\n        this.caller = new RTCPeerConnection();\n        console.log(this.caller);\n        //Listen for ICE Candidates and send them to remote peers\n        this.caller.onicecandidate = (evt) => {\n            alert('jjnkn');\n          if (!evt.candidate) return;\n          console.log(\"onicecandidate called\");\n          this.onIceCandidate(this.caller, evt);\n        };\n        //onaddstream handler to receive remote feed and show in remoteview video element\n        this.caller.onaddstream = (evt) => {\n          console.log(\"onaddstream called\");\n        \n            this.remoteVideoRef.srcObject =  evt.stream;\n        \n        };\n      }\n      onIceCandidate = (peer, evt) => {\n          \n        if (evt.candidate) {\n            this.channel.trigger(\"client-candidate\", {\n                \"candidate\": evt.candidate,\n                \"room\": this.props.callTo\n            });\n        }\n    }\n    getCam = () => {\n        //Get local audio/video feed and show it in selfview video element\n        return navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n      }\n      //Create and send offer to remote peer on button click\n       callUser = (user) => {\n        this.getCam()\n          .then(stream => {\n              this.localVideoRef.srcObject = stream\n    \n            this.toggleEndCallButton();\n            this.caller.addStream(stream);\n            this.localUserMedia = stream;\n            this.caller.createOffer().then((desc) => {\n              this.caller.setLocalDescription(new RTCSessionDescription(desc));\n              this.channel.trigger(\"client-sdp\", {\n                sdp: desc,\n                room: user,\n                from: this.props.userId\n              });\n              //room = user;\n            });\n          })\n          .catch(error => {\n            console.log(\"an error occured\", error);\n          });\n      }\n       toggleEndCallButton = () => {\n        // if (document.getElementById(\"endCall\").style.display == \"block\") {\n        //   document.getElementById(\"endCall\").style.display = \"none\";\n        // } else {\n        //   document.getElementById(\"endCall\").style.display = \"block\";\n        // }\n      }\n    render () {\n        return (\n            <div className={classes.Video}>\n                <video autoPlay muted className={classes.LocalVideo} ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay className={classes.remoteVideo} ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userId: state.userId\n    }\n}\nexport default connect(mapStateToProps)(Video);"]},"metadata":{},"sourceType":"module"}