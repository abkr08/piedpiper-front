{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\nimport { connect } from 'react-redux';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  // constructor () {\n  //     super();\n  // }\n  function Video() {\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Video).call(this, props));\n    _this.state = {\n      usersOnline: 0,\n      id: null,\n      users: [],\n      sessionDesc: null,\n      currentcaller: '',\n      room: '',\n      caller: ''\n    };\n\n    _this.prepareCaller = function () {\n      //Initializing a peer connection\n      _this.caller = new window.RTCPeerConnection(); //Listen for ICE Candidates and send them to remote peers\n\n      _this.caller.onicecandidate = function (evt) {\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n\n        _this.onIceCandidate(_this.caller, evt);\n      }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n      _this.caller.ontrack = function (evt) {\n        console.log(\"onaddstream called\"); //if (window.URL) {\n        //document.getElementById(\"remoteview\").src = window.URL.createObjectURL( evt.stream );\n        // } else {\n        //document.getElementById(\"remoteview\").src = evt.stream;\n        // }\n\n        _this.remoteVideoRef.srcObject = evt.stream;\n      };\n    };\n\n    _this.getCam = function () {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.callUser = function (user) {\n      _this.getCam().then(function (stream) {\n        //if (window.URL) {\n        //document.getElementById(\"selfview\").src = window.URL.createObjectURL( stream);\n        //} else {\n        //document.getElementById(\"selfview\").src = stream;\n        // }\n        _this.localVideoRef.srcObject = stream;\n\n        _this.toggleEndCallButton();\n\n        stream.getTracks().forEach(function (track) {\n          return _this.caller.addTrack(track, stream);\n        });\n        _this.localUserMedia = stream;\n\n        _this.caller.createOffer().then(function (desc) {\n          _this.caller.setLocalDescription(new RTCSessionDescription(desc));\n\n          _this.channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: user,\n            from: _this.props.userId\n          }); //room = user;\n\n\n          _this.setState({\n            room: user\n          });\n        });\n      }).catch(function (error) {\n        console.log(\"an error occured\", error);\n      });\n    };\n\n    _this.endCall = function () {\n      _this.setState({\n        room: undefined\n      });\n\n      _this.caller.close();\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.localUserMedia.getTracks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var track = _step.value;\n          track.stop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.prepareCaller();\n\n      _this.toggleEndCallButton();\n    };\n\n    _this.endCurrentCall = function () {\n      _this.channel.trigger(\"client-endcall\", {\n        room: _this.state.room\n      });\n\n      _this.endCall();\n    };\n\n    _this.onIceCandidate = function (peer, evt) {\n      if (evt.candidate) {\n        _this.channel.trigger(\"client-candidate\", {\n          candidate: evt.candidate,\n          room: _this.state.room\n        });\n      }\n    };\n\n    _this.toggleEndCallButton = function () {\n      /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n          document.getElementById(\"endCall\").style.display = \"none\";\n        } else {\n          document.getElementById(\"endCall\").style.display = \"block\";\n        }*/\n    };\n\n    _this.channel = pusher.subscribe(\"presence-videocall\");\n    console.log(_this.channel);\n\n    _this.GetRTCPeerConnection();\n\n    _this.GetRTCSessionDescription();\n\n    _this.GetRTCIceCandidate();\n\n    var users = [];\n\n    _this.channel.bind('my-event', function () {\n      return alert('myEvent');\n    });\n\n    _this.channel.bind(\"pusher:subscription_succeeded\", function (members) {\n      //set the member count\n      _this.setState({\n        usersOnline: members.count,\n        id: _this.channel.members.me.id,\n        room: _this.props.callTo\n      }); //document.getElementById(\"myid\").innerHTML = ` My caller id is : ` + id;\n\n\n      members.each(function (member) {\n        if (member.id !== _this.channel.members.me.id) {\n          users.push(member.id);\n\n          _this.setState({\n            users: users\n          });\n        }\n      }); //render();\n    });\n\n    _this.channel.bind(\"pusher:member_added\", function (member) {\n      users.push(member.id);\n\n      _this.setState({\n        users: users\n      }); //render();\n\n    });\n\n    _this.channel.bind(\"pusher:member_removed\", function (member) {\n      // for remove member from list:\n      //var index = users.indexOf(member.id);\n      users = users.filter(function (user) {\n        return user !== member.id;\n      }); //users.splice(index, 1);\n\n      if (member.id === _this.state.room) {\n        _this.endCall();\n      } //render();\n\n    }); //Listening for the candidate message from a peer sent from onicecandidate handler\n\n\n    _this.channel.bind(\"client-candidate\", function (msg) {\n      console.log(msg);\n\n      if (msg.room === _this.state.room) {\n        console.log(\"candidate received\");\n\n        _this.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n      }\n    }); //Listening for Session Description Protocol message with session details from remote peer\n\n\n    _this.channel.bind(\"client-sdp\", function (msg) {\n      var _this2 = this;\n\n      if (msg.room === this.props.userId) {\n        console.log(\"sdp received\");\n        var answer = window.confirm(\"You have a call from: \" + msg.from + \"Would you like to answer?\");\n\n        if (!answer) {\n          return this.channel.trigger(\"client-reject\", {\n            room: msg.room,\n            rejected: this.props.userId\n          });\n        }\n\n        this.setState({\n          room: msg.room\n        });\n        this.getCam().then(function (stream) {\n          _this2.localUserMedia = stream;\n\n          _this2.toggleEndCallButton();\n          /* if (window.URL) {\n             document.getElementById(\"selfview\").src = window.URL.createObjectURL(\n               stream\n             );\n           } else {\n             document.getElementById(\"selfview\").src = stream;\n           }*/\n\n\n          _this2.localVideoRef.srcObject = stream;\n\n          _this2.caller.addStream(stream);\n\n          var sessionDesc = new RTCSessionDescription(msg.sdp);\n\n          _this2.caller.setRemoteDescription(sessionDesc);\n\n          _this2.caller.createAnswer().then(function (sdp) {\n            _this2.caller.setLocalDescription(new RTCSessionDescription(sdp));\n\n            _this2.channel.trigger(\"client-answer\", {\n              sdp: sdp,\n              room: _this2.state.room\n            });\n          });\n        }).catch(function (error) {\n          console.log(\"an error occured\", error);\n        });\n      }\n    }); //Listening for answer to offer sent to remote peer\n\n\n    _this.channel.bind(\"client-answer\", function (answer) {\n      if (answer.room === this.state.room) {\n        console.log(\"answer received\");\n        this.caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n      }\n    });\n\n    _this.channel.bind(\"client-reject\", function (answer) {\n      if (answer.room === _this.state.room) {\n        console.log(\"Call declined\");\n        alert(\"call to \" + answer.rejected + \"was politely declined\");\n\n        _this.endCall();\n      }\n    });\n\n    _this.channel.bind(\"client-endcall\", function (answer) {\n      if (answer.room === _this.state.room) {\n        console.log(\"Call Ended\");\n\n        _this.endCall();\n      }\n    });\n\n    _this.prepareCaller();\n\n    _this.callUser(_this.props.callTo);\n\n    return _this;\n  }\n  /* function render() {\n     var list = \"\";\n     users.forEach(function(user) {\n       list +=\n         `<li>` +\n         user +\n         ` <input type=\"button\" style=\"float:right;\"  value=\"Call\" onclick=\"callUser('` +\n         user +\n         `')\" id=\"makeCall\" /></li>`;\n     });\n     document.getElementById(\"users\").innerHTML = list;\n   }*/\n  //To iron over browser implementation anomalies like prefixes\n\n\n  _createClass(Video, [{\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        muted: true,\n        className: classes.LocalVideo,\n        ref: function ref(lVid) {\n          return _this3.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        className: classes.remoteVideo,\n        ref: function ref(rVid) {\n          return _this3.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.userId\n  };\n};\n\nexport default connect(mapStateToProps)(Video);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","connect","Video","props","state","usersOnline","id","users","sessionDesc","currentcaller","room","caller","prepareCaller","window","RTCPeerConnection","onicecandidate","evt","candidate","console","log","onIceCandidate","ontrack","remoteVideoRef","srcObject","stream","getCam","navigator","mediaDevices","getUserMedia","video","audio","GetRTCIceCandidate","RTCIceCandidate","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","callUser","user","then","localVideoRef","toggleEndCallButton","getTracks","forEach","track","addTrack","localUserMedia","createOffer","desc","setLocalDescription","channel","trigger","sdp","from","userId","setState","catch","error","endCall","undefined","close","stop","endCurrentCall","peer","subscribe","bind","alert","members","count","me","callTo","each","member","push","filter","msg","addIceCandidate","answer","confirm","rejected","addStream","setRemoteDescription","createAnswer","LocalVideo","lVid","remoteVideo","rVid","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nimport { connect } from 'react-redux';\nclass Video extends Component {\n\n        // constructor () {\n        //     super();\n\n        // }\n\n        state = {\n            usersOnline: 0,\n              id: null,\n              users: [],\n              sessionDesc: null,\n              currentcaller: '',\n              room: '',\n              caller: ''\n        }\n    constructor (){\n        super(props);\n        this.channel = pusher.subscribe(\"presence-videocall\");\n        console.log(this.channel);\n        this.GetRTCPeerConnection();\n        this.GetRTCSessionDescription();\n        this.GetRTCIceCandidate();\n        \n        let users = [];\n        \n        this.channel.bind('my-event', () => alert('myEvent'));\n        this.channel.bind(\"pusher:subscription_succeeded\", members => {\n          //set the member count\n          this.setState({usersOnline: members.count, id: this.channel.members.me.id, room: this.props.callTo});\n          \n          //document.getElementById(\"myid\").innerHTML = ` My caller id is : ` + id;\n          members.each(member => {\n            if (member.id !== this.channel.members.me.id) {\n              users.push(member.id);\n        this.setState({users: users})\n            }\n          });\n    \n          //render();\n        });\n    \n        this.channel.bind(\"pusher:member_added\", member => {\n          users.push(member.id);\n        this.setState({users: users})\n          //render();\n        });\n    \n        this.channel.bind(\"pusher:member_removed\", member => {\n          // for remove member from list:\n          //var index = users.indexOf(member.id);\n        users = users.filter(user => user !== member.id);\n          //users.splice(index, 1);\n          if (member.id === this.state.room) {\n            this.endCall();\n          }\n          //render();\n        });\n         //Listening for the candidate message from a peer sent from onicecandidate handler\n         this.channel.bind(\"client-candidate\", msg =>{\n             console.log(msg);\n            if (msg.room === this.state.room) {\n              console.log(\"candidate received\");\n              this.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n            }\n          });\n         \n      \n          //Listening for Session Description Protocol message with session details from remote peer\n          this.channel.bind(\"client-sdp\", function(msg) {\n            if (msg.room === this.props.userId) {\n              console.log(\"sdp received\");\n              let answer = window.confirm(\n                \"You have a call from: \" + msg.from + \"Would you like to answer?\"\n              );\n              if (!answer) {\n                return this.channel.trigger(\"client-reject\", { room: msg.room, rejected: this.props.userId });\n              }\n              this.setState({room: msg.room});\n              this.getCam()\n                .then(stream => {\n                  this.localUserMedia = stream;\n                  this.toggleEndCallButton();\n                 /* if (window.URL) {\n                    document.getElementById(\"selfview\").src = window.URL.createObjectURL(\n                      stream\n                    );\n                  } else {\n                    document.getElementById(\"selfview\").src = stream;\n                  }*/\n             this.localVideoRef.srcObject = stream;\n                  this.caller.addStream(stream);\n                  let sessionDesc = new RTCSessionDescription(msg.sdp);\n                  this.caller.setRemoteDescription(sessionDesc);\n                  this.caller.createAnswer().then(sdp => {\n                    this.caller.setLocalDescription(new RTCSessionDescription(sdp));\n                    this.channel.trigger(\"client-answer\", {\n                      sdp: sdp,\n                      room: this.state.room\n                    });\n                  });\n                })\n                .catch(error => {\n                  console.log(\"an error occured\", error);\n                });\n            }\n          });\n      \n          //Listening for answer to offer sent to remote peer\n          this.channel.bind(\"client-answer\", function(answer) {\n            if (answer.room === this.state.room) {\n              console.log(\"answer received\");\n              this.caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n            }\n          });\n      \n          this.channel.bind(\"client-reject\", answer => {\n            if (answer.room === this.state.room) {\n              console.log(\"Call declined\");\n              alert(\"call to \" + answer.rejected + \"was politely declined\");\n              this.endCall();\n            }\n          });\n      \n          this.channel.bind(\"client-endcall\", answer =>  {\n            if (answer.room === this.state.room) {\n              console.log(\"Call Ended\");\n              this.endCall();\n            }\n          });\n          this.prepareCaller();\n          this.callUser(this.props.callTo);\n    }\n       /* function render() {\n          var list = \"\";\n          users.forEach(function(user) {\n            list +=\n              `<li>` +\n              user +\n              ` <input type=\"button\" style=\"float:right;\"  value=\"Call\" onclick=\"callUser('` +\n              user +\n              `')\" id=\"makeCall\" /></li>`;\n          });\n          document.getElementById(\"users\").innerHTML = list;\n        }*/\n    \n        //To iron over browser implementation anomalies like prefixes\n        \n       prepareCaller = () => {\n          //Initializing a peer connection\n          this.caller = new window.RTCPeerConnection();\n          //Listen for ICE Candidates and send them to remote peers\n          this.caller.onicecandidate = evt => {\n            if (!evt.candidate) return;\n            console.log(\"onicecandidate called\");\n            this.onIceCandidate(this.caller, evt);\n          };\n          //onaddstream handler to receive remote feed and show in remoteview video element\n          this.caller.ontrack = evt => {\n            console.log(\"onaddstream called\");\n            //if (window.URL) {\n              //document.getElementById(\"remoteview\").src = window.URL.createObjectURL( evt.stream );\n           // } else {\n              //document.getElementById(\"remoteview\").src = evt.stream;\n           // }\n        this.remoteVideoRef.srcObject = evt.stream;\n          };\n        }\n        getCam = () => {\n          //Get local audio/video feed and show it in selfview video element\n          return navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n          });\n        }\n    \n        GetRTCIceCandidate = () => {\n          window.RTCIceCandidate =\n            window.RTCIceCandidate ||\n            window.webkitRTCIceCandidate ||\n            window.mozRTCIceCandidate ||\n            window.msRTCIceCandidate;\n    \n          return window.RTCIceCandidate;\n        }\n    \n    GetRTCPeerConnection = () => {\n          window.RTCPeerConnection =\n            window.RTCPeerConnection ||\n            window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection ||\n            window.msRTCPeerConnection;\n          return window.RTCPeerConnection;\n        }\n    \n         GetRTCSessionDescription = () => {\n          window.RTCSessionDescription =\n            window.RTCSessionDescription ||\n            window.webkitRTCSessionDescription ||\n            window.mozRTCSessionDescription ||\n            window.msRTCSessionDescription;\n          return window.RTCSessionDescription;\n        }\n    \n        //Create and send offer to remote peer on button click\n       callUser = user => {\n          this.getCam()\n            .then(stream => {\n              //if (window.URL) {\n                //document.getElementById(\"selfview\").src = window.URL.createObjectURL( stream);\n              //} else {\n                //document.getElementById(\"selfview\").src = stream;\n             // }\n            this.localVideoRef.srcObject = stream;\n              this.toggleEndCallButton();\n              stream.getTracks().forEach(track => this.caller.addTrack(track, stream));\n              this.localUserMedia = stream;\n              this.caller.createOffer().then(desc => {\n                this.caller.setLocalDescription(new RTCSessionDescription(desc));\n                this.channel.trigger(\"client-sdp\", {\n                  sdp: desc,\n                  room: user,\n                  from: this.props.userId\n                });\n                //room = user;\n            this.setState({room: user})\n              });\n            })\n            .catch(error => {\n              console.log(\"an error occured\", error);\n            });\n        }\n    \n     endCall = () => {\n          this.setState({room: undefined});\n          this.caller.close();\n          for (let track of this.localUserMedia.getTracks()) {\n            track.stop();\n          }\n          this.prepareCaller();\n          this.toggleEndCallButton();\n        }\n    \n       endCurrentCall = () => {\n          this.channel.trigger(\"client-endcall\", {\n            room: this.state.room\n          });\n    \n          this.endCall();\n        }\n    \n        //Send the ICE Candidate to the remote peer\n        onIceCandidate = (peer, evt) => {\n          if (evt.candidate) {\n            this.channel.trigger(\"client-candidate\", {\n              candidate: evt.candidate,\n              room: this.state.room\n            });\n          }\n        }\n    \n         toggleEndCallButton = () => {\n        /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n            document.getElementById(\"endCall\").style.display = \"none\";\n          } else {\n            document.getElementById(\"endCall\").style.display = \"block\";\n          }*/\n        }\n    \n       \n    render () {\n        \n        return (\n            <div className={classes.Video}>\n                <video autoPlay muted className={classes.LocalVideo} ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay className={classes.remoteVideo} ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userId: state.userId\n    }\n}\nexport default connect(mapStateToProps)(Video);"]},"metadata":{},"sourceType":"module"}