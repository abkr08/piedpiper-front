{"ast":null,"code":"var _this = this;\n\nimport pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id\n  /*=== this.state.room*/\n  ) {//this.endCall();\n    }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  // if (msg.room === this.state.room) {\n  addIceCandidate(new RTCIceCandidate(msg.candidate)); //}\n});\nchannel.bind(\"client-sdp\", function (msg) {\n  if (msg.room\n  /*=== this.props.userId*/\n  ) {\n      var answer = window.confirm(\"You have a call from \" + msg.from + \": Would you like to answer?\");\n\n      if (!answer) {\n        return _this.props.channel.trigger(\"client-reject\", {\n          room: msg.room,\n          rejected: _this.props.userId\n        });\n      } //this.setState({room: msg.room});\n\n\n      getCam().then(function (stream) {\n        //this.localUserMedia = stream;\n        // this.toggleEndCallButton();\n        //this.localVideoRef.srcObject = stream;\n        stream.getTracks().forEach(function (track) {\n          return addTrack(track, stream);\n        });\n        var sessionDesc = new RTCSessionDescription(msg.sdp);\n        setRemoteDescription(sessionDesc);\n        createAnswer();\n      }).catch(function (error) {\n        console.log(\"an error occured\", error);\n      });\n    }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  if (answer.room\n  /*=== this.state.room*/\n  ) {\n      console.log(\"answer received\");\n      var sessionDesc = new RTCSessionDescription(answer.sdp);\n      setRemoteDescription(sessionDesc);\n    }\n});\n\nvar getCam = function getCam() {\n  //Get local audio/video feed and show it in selfview video element\n  return function (dispatch) {\n    getMedia();\n  };\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.stream\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    dispatch(prepareCaller(channel)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      console.log(evt); //this.remoteVideoRef.srcObject = evt.stream;\n\n      dispatch(onTrack(evt));\n    };\n  };\n};\nexport var addIceCandidate = function addIceCandidate(iceCandidate) {\n  console.log(iceCandidate);\n  return function (dispatch) {\n    console.log(iceCandidate);\n    caller.addIceCandidate(iceCandidate);\n  };\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate // room: room\n\n    });\n  }\n};\n\nexport var setLocalDescription = function setLocalDescription(sessionDesc) {\n  return function (dispatch) {\n    console.log('setLocalDesc', sessionDesc);\n    caller.setLocalDescription(sessionDesc);\n  };\n};\nexport var setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  console.log('setRemoteDesc', sessionDesc);\n  return function (dispatch) {\n    caller.setRemoteDescription(sessionDesc);\n  };\n};\nexport var addTrack = function addTrack(track, stream) {\n  return function (dispatch) {\n    caller.addTrack(track, stream);\n  };\n};\nexport var createAnswer = function createAnswer() {\n  return function (dispatch) {\n    caller.createAnswer().then(function (sdp) {\n      var sessionDesc = new RTCSessionDescription(sdp);\n      setLocalDescription(sessionDesc);\n      channel.trigger(\"client-answer\", {\n        sdp: sdp,\n        room: 'opp'\n      });\n    });\n    ;\n  };\n};\nexport var createOffer = function createOffer() {\n  return function (dispatch) {\n    caller.createOffer().then(function (desc) {\n      var sessionDesc = new RTCSessionDescription(desc);\n      setLocalDescription(sessionDesc);\n      channel.trigger(\"client-sdp\", {\n        sdp: desc,\n        room: 'opp',\n        from: 'gotzil'\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","channel","subscribe","caller","window","RTCPeerConnection","bind","members","member","id","msg","addIceCandidate","RTCIceCandidate","candidate","room","answer","confirm","from","props","trigger","rejected","userId","getCam","then","stream","getTracks","forEach","track","addTrack","sessionDesc","RTCSessionDescription","sdp","setRemoteDescription","createAnswer","catch","error","console","log","dispatch","getMedia","navigator","mediaDevices","getUserMedia","video","audio","prepareCaller","type","PREPARE_CALLER","onTrack","ON_TRACK","remoteStream","getCallerReady","onicecandidate","evt","onIceCandidate","ontrack","iceCandidate","peer","setLocalDescription","createOffer","desc"],"mappings":"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","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n\n\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n         \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n   \n    if (member.id /*=== this.state.room*/) {\n      //this.endCall();\n    }\n    \n  });\nchannel.bind(\"client-candidate\", msg => {\n\n    // if (msg.room === this.state.room) {\n      addIceCandidate(new RTCIceCandidate(msg.candidate));\n    //}\n  });\n  channel.bind(\"client-sdp\", msg => {\n    \n    if (msg.room /*=== this.props.userId*/) {\n        let answer = window.confirm(\n          \"You have a call from \" + msg.from + \": Would you like to answer?\"\n        );\n        if (!answer) {\n          return this.props.channel.trigger(\"client-reject\", { room: msg.room, rejected: this.props.userId });\n        }\n        //this.setState({room: msg.room});\n        getCam()\n          .then(stream => {\n            //this.localUserMedia = stream;\n            // this.toggleEndCallButton();\n           \n       //this.localVideoRef.srcObject = stream;\n       stream.getTracks().forEach(track => addTrack(track, stream));\n\n            let sessionDesc = new RTCSessionDescription(msg.sdp);\n            setRemoteDescription(sessionDesc);\n            createAnswer();\n          })\n          .catch(error => {\n            console.log(\"an error occured\", error);\n          });\n      }\n    });\n\n    channel.bind(\"client-answer\", answer => {\n        if (answer.room /*=== this.state.room*/) {\n          \n            console.log(\"answer received\");\n            let sessionDesc = new RTCSessionDescription(answer.sdp);\n    \n            setRemoteDescription(sessionDesc)\n          }\n        });\n    \n    \nconst getCam = () => {\n            \n    //Get local audio/video feed and show it in selfview video element\n    return dispatch => {\n        getMedia();\n    }\n  }\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\nconst onTrack = track => {\n    return{\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.stream\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n     dispatch(prepareCaller(channel));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    };\n    //onaddstream handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n      console.log(evt);\n  //this.remoteVideoRef.srcObject = evt.stream;\n  dispatch(onTrack(evt));\n    };\n    }\n}\nexport const addIceCandidate = iceCandidate => {\n    console.log(iceCandidate);\n    return dispatch => {\n        console.log(iceCandidate);\n    caller.addIceCandidate(iceCandidate);\n    }\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {\n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        // room: room\n      });\n    }\n  }\n\n  export const setLocalDescription = sessionDesc => {\n      return dispatch => {\n          console.log('setLocalDesc', sessionDesc);\n        caller.setLocalDescription(sessionDesc);\n      }\n}\n\nexport const setRemoteDescription = sessionDesc => {\n    console.log('setRemoteDesc', sessionDesc )\n    return dispatch => {\n        caller.setRemoteDescription(sessionDesc);\n    }\n}\n\nexport const addTrack = (track, stream) => {\n    return dispatch => {\n        caller.addTrack(track, stream);\n    }\n}\n\nexport const createAnswer = () => {\n    return dispatch => {\n        caller.createAnswer().then(sdp => {\n        const sessionDesc = new RTCSessionDescription(sdp);\n          setLocalDescription(sessionDesc);\n          channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: 'opp'\n          });\n        });;\n    }\n}\n\nexport const createOffer = () => {\n    return dispatch => {\n        caller.createOffer().then(desc => {\n            let sessionDesc = new RTCSessionDescription(desc);\n            setLocalDescription(sessionDesc);\n            channel.trigger(\"client-sdp\", {\n              sdp: desc,\n              room: 'opp',\n              from: 'gotzil'\n            });\n        })\n}\n}"]},"metadata":{},"sourceType":"module"}