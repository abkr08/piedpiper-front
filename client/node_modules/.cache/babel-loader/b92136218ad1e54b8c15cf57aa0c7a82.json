{"ast":null,"code":"import _classCallCheck from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gotzil/Downloads/social-media/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js\";\nimport React, { Component } from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig';\nimport { connect } from 'react-redux';\n\nvar Video =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Video, _Component);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      usersOnline: 0,\n      id: null,\n      users: [],\n      sessionDesc: null,\n      currentcaller: '',\n      room: '',\n      caller: ''\n    };\n\n    _this.prepareCaller = function () {\n      //Initializing a peer connection\n      _this.props.caller = new window.RTCPeerConnection({\n        'iceServers': [{\n          'urls': 'stun:stun.l.google.com:19302'\n        }]\n      }); //Listen for ICE Candidates and send them to remote peers\n\n      _this.props.caller.onicecandidate = function (evt) {\n        if (!evt.candidate) return;\n        console.log(\"onicecandidate called\");\n        console.log(evt);\n\n        _this.onIceCandidate(_this.props.caller, evt);\n      }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n      _this.props.caller.ontrack = function (evt) {\n        console.log(evt);\n        _this.remoteVideoRef.srcObject = evt.stream;\n      };\n    };\n\n    _this.getCam = function () {\n      //Get local audio/video feed and show it in selfview video element\n      return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n    };\n\n    _this.GetRTCIceCandidate = function () {\n      window.RTCIceCandidate = window.RTCIceCandidate || window.webkitRTCIceCandidate || window.mozRTCIceCandidate || window.msRTCIceCandidate;\n      return window.RTCIceCandidate;\n    };\n\n    _this.GetRTCPeerConnection = function () {\n      window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || window.msRTCPeerConnection;\n      return window.RTCPeerConnection;\n    };\n\n    _this.GetRTCSessionDescription = function () {\n      window.RTCSessionDescription = window.RTCSessionDescription || window.webkitRTCSessionDescription || window.mozRTCSessionDescription || window.msRTCSessionDescription;\n      return window.RTCSessionDescription;\n    };\n\n    _this.callUser = function (user) {\n      _this.getCam().then(function (stream) {\n        _this.localVideoRef.srcObject = stream;\n\n        _this.toggleEndCallButton();\n\n        stream.getTracks().forEach(function (track) {\n          return _this.props.caller.addTrack(track, stream);\n        });\n        _this.localUserMedia = stream;\n\n        _this.props.caller.createOffer().then(function (desc) {\n          _this.props.caller.setLocalDescription(new RTCSessionDescription(desc));\n\n          _this.props.channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: user,\n            from: _this.props.userId\n          }); //room = user;\n\n\n          _this.setState({\n            room: user\n          });\n        });\n      }).catch(function (error) {\n        console.log(\"an error occured\", error);\n      });\n    };\n\n    _this.endCall = function () {\n      _this.setState({\n        room: undefined\n      });\n\n      _this.props.caller.close();\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.localUserMedia.getTracks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var track = _step.value;\n          track.stop();\n        } //   this.prepareCaller();\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.toggleEndCallButton();\n    };\n\n    _this.endCurrentCall = function () {\n      _this.props.channel.trigger(\"client-endcall\", {\n        room: _this.state.room\n      });\n\n      _this.endCall();\n    };\n\n    _this.toggleEndCallButton = function () {\n      /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n          document.getElementById(\"endCall\").style.display = \"none\";\n        } else {\n          document.getElementById(\"endCall\").style.display = \"block\";\n        }*/\n    };\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      // this.GetRTCPeerConnection();\n      // this.GetRTCSessionDescription();\n      // this.GetRTCIceCandidate();\n      // this.prepareCaller();\n      this.callUser(this.props.callTo);\n      var users = [];\n      this.props.channel.bind(\"pusher:subscription_succeeded\", function (members) {\n        //set the member count\n        _this2.setState({\n          usersOnline: members.count,\n          id: _this2.props.channel.members.me.id,\n          room: _this2.props.callTo\n        });\n\n        members.each(function (member) {\n          if (member.id !== _this2.props.channel.members.me.id) {\n            users.push(member.id);\n\n            _this2.setState({\n              users: users\n            });\n          }\n        }); //render();\n      });\n      this.props.channel.bind(\"pusher:member_added\", function (member) {\n        users.push(member.id);\n\n        _this2.setState({\n          users: users\n        }); //render();\n\n      });\n      this.props.channel.bind(\"pusher:member_removed\", function (member) {\n        // for remove member from list:\n        //var index = users.indexOf(member.id);\n        users = users.filter(function (user) {\n          return user !== member.id;\n        }); //users.splice(index, 1);\n\n        if (member.id === _this2.state.room) {\n          _this2.endCall();\n        } //render();\n\n      }); //Listening for the candidate message from a peer sent from onicecandidate handler\n\n      this.props.channel.bind(\"client-candidate\", function (msg) {\n        console.log(\"[CLIENT-CANDIDATE]\" + msg);\n\n        if (msg.room === _this2.state.room) {\n          console.log('64====', msg.candidate);\n\n          _this2.props.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n        }\n      }); //Listening for Session Description Protocol message with session details from remote peer\n\n      this.props.channel.bind(\"client-sdp\", function (msg) {\n        if (msg.room === _this2.props.userId) {\n          console.log(msg);\n          var answer = window.confirm(\"You have a call from \" + msg.from + \": Would you like to answer?\");\n\n          if (!answer) {\n            return _this2.props.channel.trigger(\"client-reject\", {\n              room: msg.room,\n              rejected: _this2.props.userId\n            });\n          }\n\n          _this2.setState({\n            room: msg.room\n          });\n\n          _this2.getCam().then(function (stream) {\n            _this2.localUserMedia = stream;\n\n            _this2.toggleEndCallButton();\n\n            _this2.localVideoRef.srcObject = stream;\n            stream.getTracks().forEach(function (track) {\n              return _this2.props.caller.addTrack(track, stream);\n            }); //this.props.caller.addStream(stream);\n\n            var sessionDesc = new RTCSessionDescription(msg.sdp);\n            console.log(sessionDesc); //const promise = this.props.caller.setRemoteDescription(sessionDesc);\n\n            _this2.props.caller.setRemoteDescription(sessionDesc).then(function () {\n              return alert('description set');\n            }).catch(function (err) {\n              return alert(err);\n            });\n\n            _this2.props.caller.createAnswer().then(function (sdp) {\n              console.log('98===' + sdp);\n\n              _this2.props.caller.setLocalDescription(new RTCSessionDescription(sdp));\n\n              _this2.props.channel.trigger(\"client-answer\", {\n                sdp: sdp,\n                room: _this2.state.room\n              });\n            });\n          }).catch(function (error) {\n            console.log(\"an error occured\", error);\n          });\n        }\n      }); //Listening for answer to offer sent to remote peer\n\n      this.props.channel.bind(\"client-answer\", function (answer) {\n        if (answer.room === this.state.room) {\n          console.log(\"answer received\");\n          this.props.caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n        }\n      });\n      this.props.channel.bind(\"client-reject\", function (answer) {\n        if (answer.room === _this2.state.room) {\n          console.log(\"Call declined\");\n          alert(\"call to \" + answer.rejected + \"was politely declined\");\n\n          _this2.endCall();\n        }\n      });\n      this.props.channel.bind(\"client-endcall\", function (answer) {\n        if (answer.room === _this2.state.room) {\n          console.log(\"Call Ended\");\n\n          _this2.endCall();\n        }\n      });\n    } //To iron over browser implementation anomalies like prefixes\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        className: classes.Video,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        autoPlay: true,\n        muted: true,\n        className: classes.LocalVideo,\n        ref: function ref(lVid) {\n          return _this3.localVideoRef = lVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(\"video\", {\n        autoPlay: true,\n        className: classes.remoteVideo,\n        ref: function ref(rVid) {\n          return _this3.remoteVideoRef = rVid;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Video;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userId: state.auth.userId,\n    caller: state.call.caller,\n    channel: state.call.channel,\n    remoteStream: state.call.remoteStream\n  };\n};\n\nexport default connect(mapStateToProps)(Video);","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/containers/Video/Video.js"],"names":["React","Component","classes","pusher","connect","Video","state","usersOnline","id","users","sessionDesc","currentcaller","room","caller","prepareCaller","props","window","RTCPeerConnection","onicecandidate","evt","candidate","console","log","onIceCandidate","ontrack","remoteVideoRef","srcObject","stream","getCam","navigator","mediaDevices","getUserMedia","video","audio","GetRTCIceCandidate","RTCIceCandidate","webkitRTCIceCandidate","mozRTCIceCandidate","msRTCIceCandidate","GetRTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","msRTCPeerConnection","GetRTCSessionDescription","RTCSessionDescription","webkitRTCSessionDescription","mozRTCSessionDescription","msRTCSessionDescription","callUser","user","then","localVideoRef","toggleEndCallButton","getTracks","forEach","track","addTrack","localUserMedia","createOffer","desc","setLocalDescription","channel","trigger","sdp","from","userId","setState","catch","error","endCall","undefined","close","stop","endCurrentCall","callTo","bind","members","count","me","each","member","push","filter","msg","addIceCandidate","answer","confirm","rejected","setRemoteDescription","alert","err","createAnswer","LocalVideo","lVid","remoteVideo","rVid","mapStateToProps","auth","call","remoteStream"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport classes from './Video.module.css';\nimport pusher from '../../pusherConfig'; \nimport { connect } from 'react-redux';\n\nclass Video extends Component {\n    \n    state = {\n        usersOnline: 0,\n          id: null,\n          users: [],\n          sessionDesc: null,\n          currentcaller: '',\n          room: '',\n          caller: ''\n    }\n       \n    componentWillMount (){\n        \n\n        \n        // this.GetRTCPeerConnection();\n        // this.GetRTCSessionDescription();\n        // this.GetRTCIceCandidate();\n        // this.prepareCaller();\n        this.callUser(this.props.callTo);\n        let users = [];\n    \n        this.props.channel.bind(\"pusher:subscription_succeeded\", members => {\n          //set the member count\n          this.setState({usersOnline: members.count, id: this.props.channel.members.me.id, room: this.props.callTo});\n          \n          \n          members.each(member => {\n            if (member.id !== this.props.channel.members.me.id) {\n              users.push(member.id);\n        this.setState({users: users})\n            }\n          });\n    \n          //render();\n        });\n    \n        this.props.channel.bind(\"pusher:member_added\", member => {\n          users.push(member.id);\n        this.setState({users: users})\n          //render();\n        });\n    \n        this.props.channel.bind(\"pusher:member_removed\", member => {\n          // for remove member from list:\n          //var index = users.indexOf(member.id);\n        users = users.filter(user => user !== member.id);\n          //users.splice(index, 1);\n          if (member.id === this.state.room) {\n            this.endCall();\n          }\n          //render();\n        });\n         //Listening for the candidate message from a peer sent from onicecandidate handler\n         this.props.channel.bind(\"client-candidate\", msg =>{\n             console.log(\"[CLIENT-CANDIDATE]\" + msg);\n            if (msg.room === this.state.room) {\n              console.log('64====', msg.candidate);\n              this.props.caller.addIceCandidate(new RTCIceCandidate(msg.candidate));\n            }\n          });\n         \n      \n          //Listening for Session Description Protocol message with session details from remote peer\n          this.props.channel.bind(\"client-sdp\", msg => {\n          if (msg.room === this.props.userId) {\n              console.log(msg);\n              let answer = window.confirm(\n                \"You have a call from \" + msg.from + \": Would you like to answer?\"\n              );\n              if (!answer) {\n                return this.props.channel.trigger(\"client-reject\", { room: msg.room, rejected: this.props.userId });\n              }\n              this.setState({room: msg.room});\n              this.getCam()\n                .then(stream => {\n                  this.localUserMedia = stream;\n                  this.toggleEndCallButton();\n                 \n             this.localVideoRef.srcObject = stream;\n             stream.getTracks().forEach(track => this.props.caller.addTrack(track, stream));\n             \n                  //this.props.caller.addStream(stream);\n\n                  let sessionDesc = new RTCSessionDescription(msg.sdp);\n                  console.log(sessionDesc);\n                  //const promise = this.props.caller.setRemoteDescription(sessionDesc);\n                  this.props.caller.setRemoteDescription(sessionDesc).then(() => alert('description set')).catch(err=>alert(err));\n                  this.props.caller.createAnswer().then(sdp => {\n                      console.log('98===' + sdp);\n                    this.props.caller.setLocalDescription(new RTCSessionDescription(sdp));\n                    this.props.channel.trigger(\"client-answer\", {\n                      sdp: sdp,\n                      room: this.state.room\n                    });\n                  });\n                })\n                .catch(error => {\n                  console.log(\"an error occured\", error);\n                });\n            }\n          });\n      \n          //Listening for answer to offer sent to remote peer\n          this.props.channel.bind(\"client-answer\", function(answer) {\n            if (answer.room === this.state.room) {\n            \n              console.log(\"answer received\");\n              this.props.caller.setRemoteDescription(new RTCSessionDescription(answer.sdp));\n            }\n          });\n      \n          this.props.channel.bind(\"client-reject\", answer => {\n            if (answer.room === this.state.room) {\n              console.log(\"Call declined\");\n              alert(\"call to \" + answer.rejected + \"was politely declined\");\n              this.endCall();\n            }\n          });\n      \n          this.props.channel.bind(\"client-endcall\", answer =>  {\n            if (answer.room === this.state.room) {\n              console.log(\"Call Ended\");\n              this.endCall();\n            }\n          });\n          \n    }\n       \n    \n        //To iron over browser implementation anomalies like prefixes\n        \n       prepareCaller = () => {\n          //Initializing a peer connection\n          this.props.caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n    \n          //Listen for ICE Candidates and send them to remote peers\n          this.props.caller.onicecandidate = evt => {\n            if (!evt.candidate) return;\n            console.log(\"onicecandidate called\");\n            console.log(evt);\n            this.onIceCandidate(this.props.caller, evt);\n          };\n          //onaddstream handler to receive remote feed and show in remoteview video element\n          this.props.caller.ontrack = evt => {\n            console.log(evt);\n        this.remoteVideoRef.srcObject = evt.stream;\n          };\n        }\n        getCam = () => {\n            \n          //Get local audio/video feed and show it in selfview video element\n          return navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n          });\n        }\n    \n        GetRTCIceCandidate = () => {\n          window.RTCIceCandidate =\n            window.RTCIceCandidate ||\n            window.webkitRTCIceCandidate ||\n            window.mozRTCIceCandidate ||\n            window.msRTCIceCandidate;\n    \n          return window.RTCIceCandidate;\n        }\n    \n    GetRTCPeerConnection = () => {\n          window.RTCPeerConnection =\n            window.RTCPeerConnection ||\n            window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection ||\n            window.msRTCPeerConnection;\n          return window.RTCPeerConnection;\n        }\n    \n         GetRTCSessionDescription = () => {\n          window.RTCSessionDescription =\n            window.RTCSessionDescription ||\n            window.webkitRTCSessionDescription ||\n            window.mozRTCSessionDescription ||\n            window.msRTCSessionDescription;\n          return window.RTCSessionDescription;\n        }\n    \n        //Create and send offer to remote peer on button click\n       callUser = user => {\n          this.getCam()\n            .then(stream => {\n\n                this.localVideoRef.srcObject = stream;\n                this.toggleEndCallButton();\n                stream.getTracks().forEach(track => this.props.caller.addTrack(track, stream));\n                this.localUserMedia = stream;\n                this.props.caller.createOffer().then(desc => {\n                this.props.caller.setLocalDescription(new RTCSessionDescription(desc));\n                this.props.channel.trigger(\"client-sdp\", {\n                  sdp: desc,\n                  room: user,\n                  from: this.props.userId\n                });\n                //room = user;\n            this.setState({room: user})\n              });\n            })\n            .catch(error => {\n              console.log(\"an error occured\", error);\n            });\n        }\n    \n     endCall = () => {\n          this.setState({room: undefined});\n          this.props.caller.close();\n          for (let track of this.localUserMedia.getTracks()) {\n            track.stop();\n          }\n        //   this.prepareCaller();\n          this.toggleEndCallButton();\n        }\n    \n       endCurrentCall = () => {\n          this.props.channel.trigger(\"client-endcall\", {\n            room: this.state.room\n          });\n    \n          this.endCall();\n        }\n    \n        //Send the ICE Candidate to the remote peer\n        // onIceCandidate = (peer, evt) => {\n        //   if (evt.candidate) {\n        //     this.props.channel.trigger(\"client-candidate\", {\n        //       candidate: evt.candidate,\n        //       room: this.state.room\n        //     });\n        //   }\n        // }\n    \n         toggleEndCallButton = () => {\n        /*  if (document.getElementById(\"endCall\").style.display === \"block\") {\n            document.getElementById(\"endCall\").style.display = \"none\";\n          } else {\n            document.getElementById(\"endCall\").style.display = \"block\";\n          }*/\n        }\n    \n       \n    render () {\n        console.log(this.state);\n        return (\n            <div className={classes.Video}>\n                <video autoPlay muted className={classes.LocalVideo} ref={(lVid)=> this.localVideoRef = lVid}  ></video>\n                <video autoPlay className={classes.remoteVideo} ref={(rVid)=> this.remoteVideoRef = rVid}  ></video>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        caller: state.call.caller,\n        channel: state.call.channel,\n        remoteStream: state.call.remoteStream\n    }\n}\nexport default connect(mapStateToProps)(Video);"]},"metadata":{},"sourceType":"module"}