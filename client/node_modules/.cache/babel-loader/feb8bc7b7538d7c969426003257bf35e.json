{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {\n  console.log(member);\n});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id\n  /*=== this.state.room*/\n  ) {//this.endCall();\n    }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  // if (msg.room === this.state.room) {\n  addIceCandidate(new RTCIceCandidate(msg.candidate)); //}\n});\nchannel.bind(\"client-sdp\", function (msg) {\n  if (msg.room\n  /*=== this.props.userId*/\n  ) {\n      var answer = window.confirm(\"You have a call from \" + msg.from + \": Would you like to answer?\");\n\n      if (!answer) {\n        return channel.trigger(\"client-reject\", {\n          room: msg.room\n          /*rejected: this.props.userId */\n\n        });\n      } //this.setState({room: msg.room});\n\n\n      getCam();\n      var sessionDesc = new RTCSessionDescription(msg.sdp);\n      setRemoteDescription(sessionDesc); //.then(stream => {\n      //this.localUserMedia = stream;\n      // this.toggleEndCallButton();\n      //this.localVideoRef.srcObject = stream;\n      //    dispatch(onLocalStream(stream));\n      //stream.getTracks().forEach(track => addTrack(track, stream));\n      // let sessionDesc = new RTCSessionDescription(msg.sdp);\n      // setRemoteDescription(sessionDesc);\n      //createAnswer();\n      //})\n      //   .catch(error => {\n      //     console.log(\"an error occured\", error);\n      //   });\n    }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  if (answer.room\n  /*=== this.state.room*/\n  ) {\n      console.log(\"answer received\");\n      var sessionDesc = new RTCSessionDescription(answer.sdp);\n      setRemoteDescription(sessionDesc);\n    }\n});\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n};\n\nexport var getCam = function getCam() {\n  //Get local audio/video feed and show it in selfview video element\n  return function (dispatch) {\n    getMedia().then(function (stream) {\n      //this.localVideoRef.srcObject = stream;\n      stream.getTracks().forEach(function (track) {\n        return addTrack(track, stream);\n      });\n      dispatch(createOffer());\n      dispatch(onLocalStream(stream)); //this.localUserMedia = stream;\n      //room = user;\n      //this.setState({room: user})\n    }).catch(function (error) {\n      console.log(\"an error occured\", error);\n    });\n    ;\n  };\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.stream\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    dispatch(prepareCaller(channel)); //Listen for ICE Candidates and send them to remote peers\n\n    caller.onicecandidate = function (evt) {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    }; //onaddstream handler to receive remote feed and show in remoteview video element\n\n\n    caller.ontrack = function (evt) {\n      console.log(evt); //this.remoteVideoRef.srcObject = evt.stream;\n\n      dispatch(onTrack(evt));\n    };\n  };\n};\nexport var addIceCandidate = function addIceCandidate(iceCandidate) {\n  console.log(iceCandidate);\n  return function (dispatch) {\n    console.log(iceCandidate);\n    caller.addIceCandidate(iceCandidate);\n  };\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate // room: room\n\n    });\n  }\n};\n\nexport var setLocalDescription = function setLocalDescription(sessionDesc) {\n  return function (dispatch) {\n    console.log('setLocalDesc', sessionDesc);\n    caller.setLocalDescription(sessionDesc);\n  };\n};\nexport var setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  console.log('setRemoteDesc', sessionDesc);\n  return function (dispatch) {\n    caller.setRemoteDescription(sessionDesc);\n  };\n};\nexport var addTrack = function addTrack(track, stream) {\n  return function (dispatch) {\n    caller.addTrack(track, stream);\n  };\n};\nexport var createAnswer = function createAnswer() {\n  return function (dispatch) {\n    caller.createAnswer().then(function (sdp) {\n      var sessionDesc = new RTCSessionDescription(sdp);\n      setLocalDescription(sessionDesc);\n      channel.trigger(\"client-answer\", {\n        sdp: sdp,\n        room: 'opp'\n      });\n    });\n    ;\n  };\n};\nexport var createOffer = function createOffer() {\n  return function (dispatch) {\n    console.log('createOffer');\n    caller.createOffer().then(function (desc) {\n      console.log('createOffer', desc);\n      var sessionDesc = new RTCSessionDescription(desc);\n      setLocalDescription(sessionDesc);\n      channel.trigger(\"client-sdp\", {\n        sdp: desc,\n        room: 'opp',\n        from: 'gotzil'\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/gotzil/Downloads/social-media/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","channel","subscribe","caller","window","RTCPeerConnection","bind","members","member","console","log","id","msg","addIceCandidate","RTCIceCandidate","candidate","room","answer","confirm","from","trigger","getCam","sessionDesc","RTCSessionDescription","sdp","setRemoteDescription","onLocalStream","stream","type","ON_LOCAL_STREAM","dispatch","getMedia","then","getTracks","forEach","track","addTrack","createOffer","catch","error","navigator","mediaDevices","getUserMedia","video","audio","prepareCaller","PREPARE_CALLER","onTrack","ON_TRACK","remoteStream","getCallerReady","onicecandidate","evt","onIceCandidate","ontrack","iceCandidate","peer","setLocalDescription","createAnswer","desc","err"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,YAA7B;AAEA,IAAMC,OAAO,GAAGF,MAAM,CAACG,SAAP,CAAiB,oBAAjB,CAAhB;AACA,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,iBAAX,CAA6B;AAAC,gBAAa,CAAC;AAAC,YAAO;AAAR,GAAD;AAAd,CAA7B,CAAf;AAGAJ,OAAO,CAACK,IAAR,CAAa,+BAAb,EAA8C,UAAAC,OAAO,EAAI,CAErD;AAED,CAJH;AAMAN,OAAO,CAACK,IAAR,CAAa,qBAAb,EAAoC,UAAAE,MAAM,EAAI;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,CAFH;AAIAP,OAAO,CAACK,IAAR,CAAa,uBAAb,EAAsC,UAAAE,MAAM,EAAI;AAE5C,MAAIA,MAAM,CAACG;AAAG;AAAd,IAAuC,CACrC;AACD;AAEF,CANH;AAOAV,OAAO,CAACK,IAAR,CAAa,kBAAb,EAAiC,UAAAM,GAAG,EAAI;AAEpC;AACEC,EAAAA,eAAe,CAAC,IAAIC,eAAJ,CAAoBF,GAAG,CAACG,SAAxB,CAAD,CAAf,CAHkC,CAIpC;AACD,CALH;AAMEd,OAAO,CAACK,IAAR,CAAa,YAAb,EAA2B,UAAAM,GAAG,EAAI;AAEhC,MAAIA,GAAG,CAACI;AAAK;AAAb,IAAwC;AACpC,UAAIC,MAAM,GAAGb,MAAM,CAACc,OAAP,CACX,0BAA0BN,GAAG,CAACO,IAA9B,GAAqC,6BAD1B,CAAb;;AAGA,UAAI,CAACF,MAAL,EAAa;AACX,eAAOhB,OAAO,CAACmB,OAAR,CAAgB,eAAhB,EAAiC;AAAEJ,UAAAA,IAAI,EAAEJ,GAAG,CAACI;AAAM;;AAAlB,SAAjC,CAAP;AACD,OANmC,CAOpC;;;AACAK,MAAAA,MAAM;AACN,UAAIC,WAAW,GAAG,IAAIC,qBAAJ,CAA0BX,GAAG,CAACY,GAA9B,CAAlB;AACIC,MAAAA,oBAAoB,CAACH,WAAD,CAApB,CAVgC,CAWlC;AACE;AACA;AAEL;AACH;AACG;AAEK;AACA;AACA;AACF;AACF;AACA;AACA;AACD;AACF,CA7BH;AA+BErB,OAAO,CAACK,IAAR,CAAa,eAAb,EAA8B,UAAAW,MAAM,EAAI;AACpC,MAAIA,MAAM,CAACD;AAAK;AAAhB,IAAyC;AAErCP,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAIY,WAAW,GAAG,IAAIC,qBAAJ,CAA0BN,MAAM,CAACO,GAAjC,CAAlB;AAEAC,MAAAA,oBAAoB,CAACH,WAAD,CAApB;AACD;AACF,CARL;;AAUJ,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM,EAAI;AAC5B,SAAO;AACHC,IAAAA,IAAI,EAAE5B,WAAW,CAAC6B,eADf;AAEHF,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALD;;AAMA,OAAO,IAAMN,MAAM,GAAG,SAATA,MAAS,GAAM;AAExB;AACA,SAAO,UAAAS,QAAQ,EAAI;AACfC,IAAAA,QAAQ,GAAGC,IAAX,CAAgB,UAAAL,MAAM,EAAI;AAEtB;AACAA,MAAAA,MAAM,CAACM,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK;AAAA,eAAIC,QAAQ,CAACD,KAAD,EAAQR,MAAR,CAAZ;AAAA,OAAhC;AACAG,MAAAA,QAAQ,CAACO,WAAW,EAAZ,CAAR;AACAP,MAAAA,QAAQ,CAACJ,aAAa,CAACC,MAAD,CAAd,CAAR,CALsB,CAMtB;AAEA;AACJ;AAEC,KAXD,EAYCW,KAZD,CAYO,UAAAC,KAAK,EAAI;AACd9B,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC6B,KAAhC;AACD,KAdD;AAcG;AACN,GAhBD;AAiBD,CApBI;;AAsBP,IAAMR,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,SAAOS,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACvCC,IAAAA,KAAK,EAAE,IADgC;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAApC,CAAP;AAIH,CALD;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA5C,OAAO,EAAI;AAC7B,SAAO;AACH2B,IAAAA,IAAI,EAAE5B,WAAW,CAAC8C,cADf;AAEH7C,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAMA,IAAM8C,OAAO,GAAG,SAAVA,OAAU,CAAAZ,KAAK,EAAI;AACrB,SAAM;AACFP,IAAAA,IAAI,EAAE5B,WAAW,CAACgD,QADhB;AAEFC,IAAAA,YAAY,EAAEd,KAAK,CAACR;AAFlB,GAAN;AAIH,CALD;;AAMA,OAAO,IAAMuB,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAChC,SAAO,UAAApB,QAAQ,EAAI;AAClBA,IAAAA,QAAQ,CAACe,aAAa,CAAC5C,OAAD,CAAd,CAAR,CADkB,CAEnB;;AACAE,IAAAA,MAAM,CAACgD,cAAP,GAAwB,UAAAC,GAAG,EAAI;AAC7B,UAAI,CAACA,GAAG,CAACrC,SAAT,EAAoB;AACpBN,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY0C,GAAZ;AACAC,MAAAA,cAAc,CAAClD,MAAD,EAASiD,GAAT,CAAd;AACD,KALD,CAHmB,CASnB;;;AACAjD,IAAAA,MAAM,CAACmD,OAAP,GAAiB,UAAAF,GAAG,EAAI;AACtB3C,MAAAA,OAAO,CAACC,GAAR,CAAY0C,GAAZ,EADsB,CAE1B;;AACAtB,MAAAA,QAAQ,CAACiB,OAAO,CAACK,GAAD,CAAR,CAAR;AACG,KAJD;AAKC,GAfD;AAgBH,CAjBM;AAkBP,OAAO,IAAMvC,eAAe,GAAG,SAAlBA,eAAkB,CAAA0C,YAAY,EAAI;AAC3C9C,EAAAA,OAAO,CAACC,GAAR,CAAY6C,YAAZ;AACA,SAAO,UAAAzB,QAAQ,EAAI;AACfrB,IAAAA,OAAO,CAACC,GAAR,CAAY6C,YAAZ;AACJpD,IAAAA,MAAM,CAACU,eAAP,CAAuB0C,YAAvB;AACC,GAHD;AAIH,CANM;;AAQP,IAAMF,cAAc,GAAG,SAAjBA,cAAiB,CAACG,IAAD,EAAOJ,GAAP,EAAe;AAClC,MAAIA,GAAG,CAACrC,SAAR,EAAmB;AACjBd,IAAAA,OAAO,CAACmB,OAAR,CAAgB,kBAAhB,EAAoC;AAClCL,MAAAA,SAAS,EAAEqC,GAAG,CAACrC,SADmB,CAElC;;AAFkC,KAApC;AAID;AACF,CAPH;;AASE,OAAO,IAAM0C,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAnC,WAAW,EAAI;AAC9C,SAAO,UAAAQ,QAAQ,EAAI;AACfrB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BY,WAA5B;AACFnB,IAAAA,MAAM,CAACsD,mBAAP,CAA2BnC,WAA3B;AACD,GAHD;AAIL,CALQ;AAOT,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAH,WAAW,EAAI;AAC/Cb,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,WAA7B;AACA,SAAO,UAAAQ,QAAQ,EAAI;AACf3B,IAAAA,MAAM,CAACsB,oBAAP,CAA4BH,WAA5B;AACH,GAFD;AAGH,CALM;AAOP,OAAO,IAAMc,QAAQ,GAAG,SAAXA,QAAW,CAACD,KAAD,EAAQR,MAAR,EAAmB;AACvC,SAAO,UAAAG,QAAQ,EAAI;AACf3B,IAAAA,MAAM,CAACiC,QAAP,CAAgBD,KAAhB,EAAuBR,MAAvB;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,IAAM+B,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,UAAA5B,QAAQ,EAAI;AACf3B,IAAAA,MAAM,CAACuD,YAAP,GAAsB1B,IAAtB,CAA2B,UAAAR,GAAG,EAAI;AAClC,UAAMF,WAAW,GAAG,IAAIC,qBAAJ,CAA0BC,GAA1B,CAApB;AACEiC,MAAAA,mBAAmB,CAACnC,WAAD,CAAnB;AACArB,MAAAA,OAAO,CAACmB,OAAR,CAAgB,eAAhB,EAAiC;AAC/BI,QAAAA,GAAG,EAAEA,GAD0B;AAE/BR,QAAAA,IAAI,EAAE;AAFyB,OAAjC;AAID,KAPD;AAOG;AACN,GATD;AAUH,CAXM;AAaP,OAAO,IAAMqB,WAAW,GAAG,SAAdA,WAAc,GAAM;AAE7B,SAAO,UAAAP,QAAQ,EAAI;AACfrB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAP,IAAAA,MAAM,CAACkC,WAAP,GAAqBL,IAArB,CAA0B,UAAA2B,IAAI,EAAI;AAC9BlD,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BiD,IAA3B;AACA,UAAIrC,WAAW,GAAG,IAAIC,qBAAJ,CAA0BoC,IAA1B,CAAlB;AACAF,MAAAA,mBAAmB,CAACnC,WAAD,CAAnB;AACArB,MAAAA,OAAO,CAACmB,OAAR,CAAgB,YAAhB,EAA8B;AAC5BI,QAAAA,GAAG,EAAEmC,IADuB;AAE5B3C,QAAAA,IAAI,EAAE,KAFsB;AAG5BG,QAAAA,IAAI,EAAE;AAHsB,OAA9B;AAKH,KATD,EASGmB,KATH,CASS,UAAAsB,GAAG;AAAA,aAAInD,OAAO,CAACC,GAAR,CAAYkD,GAAZ,CAAJ;AAAA,KATZ;AAUP,GAZG;AAaH,CAfM","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\n\n\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n         \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n    console.log(member);\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n   \n    if (member.id /*=== this.state.room*/) {\n      //this.endCall();\n    }\n    \n  });\nchannel.bind(\"client-candidate\", msg => {\n\n    // if (msg.room === this.state.room) {\n      addIceCandidate(new RTCIceCandidate(msg.candidate));\n    //}\n  });\n  channel.bind(\"client-sdp\", msg => {\n    \n    if (msg.room /*=== this.props.userId*/) {\n        let answer = window.confirm(\n          \"You have a call from \" + msg.from + \": Would you like to answer?\"\n        );\n        if (!answer) {\n          return channel.trigger(\"client-reject\", { room: msg.room, /*rejected: this.props.userId */});\n        }\n        //this.setState({room: msg.room});\n        getCam();\n        let sessionDesc = new RTCSessionDescription(msg.sdp);\n            setRemoteDescription(sessionDesc);\n          //.then(stream => {\n            //this.localUserMedia = stream;\n            // this.toggleEndCallButton();\n           \n       //this.localVideoRef.srcObject = stream;\n    //    dispatch(onLocalStream(stream));\n       //stream.getTracks().forEach(track => addTrack(track, stream));\n\n            // let sessionDesc = new RTCSessionDescription(msg.sdp);\n            // setRemoteDescription(sessionDesc);\n            //createAnswer();\n          //})\n        //   .catch(error => {\n        //     console.log(\"an error occured\", error);\n        //   });\n      }\n    });\n\n    channel.bind(\"client-answer\", answer => {\n        if (answer.room /*=== this.state.room*/) {\n          \n            console.log(\"answer received\");\n            let sessionDesc = new RTCSessionDescription(answer.sdp);\n    \n            setRemoteDescription(sessionDesc)\n          }\n        });\n    \nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}    \nexport const getCam = () => {\n            \n    //Get local audio/video feed and show it in selfview video element\n    return dispatch => {\n        getMedia().then(stream => {\n\n            //this.localVideoRef.srcObject = stream;\n            stream.getTracks().forEach(track => addTrack(track, stream));\n            dispatch(createOffer());\n            dispatch(onLocalStream(stream));\n            //this.localUserMedia = stream;\n            \n            //room = user;\n        //this.setState({room: user})\n        \n        })\n        .catch(error => {\n          console.log(\"an error occured\", error);\n        });;\n    }\n  }\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\nconst onTrack = track => {\n    return{\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.stream\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n     dispatch(prepareCaller(channel));\n    //Listen for ICE Candidates and send them to remote peers\n    caller.onicecandidate = evt => {\n      if (!evt.candidate) return;\n      console.log(\"onicecandidate called\");\n      console.log(evt);\n      onIceCandidate(caller, evt);\n    };\n    //onaddstream handler to receive remote feed and show in remoteview video element\n    caller.ontrack = evt => {\n      console.log(evt);\n  //this.remoteVideoRef.srcObject = evt.stream;\n  dispatch(onTrack(evt));\n    };\n    }\n}\nexport const addIceCandidate = iceCandidate => {\n    console.log(iceCandidate);\n    return dispatch => {\n        console.log(iceCandidate);\n    caller.addIceCandidate(iceCandidate);\n    }\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {\n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        // room: room\n      });\n    }\n  }\n\n  export const setLocalDescription = sessionDesc => {\n      return dispatch => {\n          console.log('setLocalDesc', sessionDesc);\n        caller.setLocalDescription(sessionDesc);\n      }\n}\n\nexport const setRemoteDescription = sessionDesc => {\n    console.log('setRemoteDesc', sessionDesc )\n    return dispatch => {\n        caller.setRemoteDescription(sessionDesc);\n    }\n}\n\nexport const addTrack = (track, stream) => {\n    return dispatch => {\n        caller.addTrack(track, stream);\n    }\n}\n\nexport const createAnswer = () => {\n    return dispatch => {\n        caller.createAnswer().then(sdp => {\n        const sessionDesc = new RTCSessionDescription(sdp);\n          setLocalDescription(sessionDesc);\n          channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: 'opp'\n          });\n        });;\n    }\n}\n\nexport const createOffer = () => {\n    \n    return dispatch => {\n        console.log('createOffer');\n        caller.createOffer().then(desc => {\n            console.log('createOffer', desc);\n            let sessionDesc = new RTCSessionDescription(desc);\n            setLocalDescription(sessionDesc);\n            channel.trigger(\"client-sdp\", {\n              sdp: desc,\n              room: 'opp',\n              from: 'gotzil'\n            });\n        }).catch(err => console.log(err));\n}\n}"]},"metadata":{},"sourceType":"module"}