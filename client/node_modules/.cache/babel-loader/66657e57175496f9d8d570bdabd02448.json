{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store } from '../../../index';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nvar userId = localStorage.getItem('userId');\nvar config = {};\n\ncaller.onicecandidate = function (evt) {\n  if (!evt.candidate) return; // alert('candidate')\n\n  onIceCandidate(caller, evt);\n};\n\ncaller.ontrack = function (evt) {\n  store.dispatch(onTrack(evt));\n}; //setInterval(()=> console.log(caller.signalingState), 4000);\n\n\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {\n  console.log(member);\n});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id === config.room) {//   alert('call Ended');\n  }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  if (msg.room === config.room) {\n    var candidate = new RTCIceCandidate(msg.candidate);\n    console.log(candidate);\n    addIceCandidate(candidate);\n  }\n});\nchannel.bind(\"client-sdp\", function (msg) {\n  // alert(msg.room + ' and ' + userId);\n  if (msg.room === userId) {\n    store.dispatch({\n      type: actionTypes.ON_INCOMING_CALL,\n      callType: msg.callType,\n      caller: msg.from\n    }); // console.log(store);   \n    // setTimeout(() => {\n    //     channel.trigger(\"client-reject\", { room: msg.room, rejected: userId });\n    // }, 15000)\n    // while (!state){\n    // }\n\n    config.room = msg.room;\n    config.sdp = msg.sdp;\n    config.state = 'answerCall';\n  }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  // alert('line 48--' + answer.room, room);\n  if (answer.room === config.room) {\n    // alert(\"answer received\");\n    var sessionDesc = new RTCSessionDescription(answer.sdp);\n    setRemoteDescription(sessionDesc);\n  }\n});\nexport var callAccepted = function callAccepted() {\n  // alert('call accepted in room--57 ' + config.room);\n  return function (dispatch) {\n    config.state = 'answerCall';\n    var sessionDesc = new RTCSessionDescription(config.sdp);\n    setRemoteDescription(sessionDesc);\n    getCam();\n    dispatch({\n      type: actionTypes.CALL_ACCEPTED\n    });\n  };\n};\nexport var callRejected = function callRejected() {\n  return function (dispatch) {\n    channel.trigger(\"client-reject\", {\n      room: config.room,\n      rejected: userId\n    });\n    dispatch({\n      type: actionTypes.CALL_REJECTED\n    });\n  };\n};\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n}; //Create and send offer to remote peer on button click\n\n\nexport var callUser = function callUser(user, type) {\n  config.room = user;\n  config.callType = type;\n  config.state = 'makeCall';\n  return function (dispatch) {\n    getCam();\n    dispatch({\n      type: actionTypes.CALL_INIT\n    });\n  };\n};\n\nvar getCam = function getCam() {\n  // alert('line 86--' + room);\n  getMedia().then(function (stream) {\n    store.dispatch(onLocalStream(stream));\n    stream.getTracks().forEach(function (track) {\n      caller.addTrack(track, stream);\n    });\n\n    if (config.state === 'makeCall') {\n      createOffer();\n    } else {\n      // let sessionDesc = new RTCSessionDescription(config.sdp);\n      // setRemoteDescription(sessionDesc);\n      createAnswer();\n      config.state = null;\n    }\n  }).catch(function (error) {\n    console.log(\"an error occured\", error);\n  });\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: config.callType === 'video' ? {\n      width: 1280,\n      height: 720,\n      frameRate: 15\n    } : false,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {// return dispatch => {\n  //  dispatch(prepareCaller(channel));\n  // //Listen for ICE Candidates and send them to remote peers\n  // // caller.onicecandidate = evt => {\n  // //   if (!evt.candidate) return;\n  // //   alert('candidate')\n  // //   onIceCandidate(caller, evt);\n  // // };\n  // // caller.onnegotiationneeded = async () => {\n  // //     try {\n  // //       await caller.setLocalDescription(await createOffer());\n  // //       // send the offer to the other peer\n  // //       channel.emit('', {desc: pc.localDescription});\n  // //     } catch (err) {\n  // //       console.error(err);\n  // //     }\n  // //   };\n  // //ontrack handler to receive remote feed and show in remoteview video element\n  // // caller.ontrack = evt => {\n  // //     dispatch(onTrack(evt));\n  // // };\n  // }\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nvar addIceCandidate = function addIceCandidate(iceCandidate) {\n  caller.addIceCandidate(iceCandidate);\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate,\n      room: config.room\n    });\n  }\n};\n\nvar setLocalDescription = function setLocalDescription(sessionDesc) {\n  return caller.setLocalDescription(sessionDesc);\n};\n\nvar setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  return caller.setRemoteDescription(sessionDesc);\n};\n\nvar addTrack = function addTrack(track, stream) {\n  caller.addTrack(track, stream);\n};\n\nvar createAnswer = function createAnswer() {\n  // alert('createAnswer room: ' + receiver);\n  caller.createAnswer().then(function (sdp) {\n    var sessionDesc = new RTCSessionDescription(sdp);\n    setLocalDescription(sessionDesc);\n    channel.trigger(\"client-answer\", {\n      sdp: sdp,\n      room: config.room\n    });\n    console.log(caller.signalingState);\n  });\n  ;\n};\n\nvar createOffer = function createOffer() {\n  // alert('createOffer room--180: ' + room)    \n  caller.createOffer({\n    offerToReceiveVideo: true,\n    offerToReceiveAudio: true\n  }).then(function (desc) {\n    var sessionDesc = new RTCSessionDescription(desc);\n    setLocalDescription(sessionDesc); // console.log(config);\n    // alert('createOffer room--184: ' + config.room) \n\n    channel.trigger(\"client-sdp\", {\n      sdp: desc,\n      room: config.room,\n      from: userId,\n      callType: config.callType\n    });\n    console.log(caller.signalingState);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\n\nexport var endCall = function endCall() {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.END_CALL\n    });\n  };\n}; // setInterval(() => {\n//     console.log(caller.signalingState);\n// }, 3000);","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","store","channel","subscribe","caller","window","RTCPeerConnection","userId","localStorage","getItem","config","onicecandidate","evt","candidate","onIceCandidate","ontrack","dispatch","onTrack","bind","members","member","console","log","id","room","msg","RTCIceCandidate","addIceCandidate","type","ON_INCOMING_CALL","callType","from","sdp","state","answer","sessionDesc","RTCSessionDescription","setRemoteDescription","callAccepted","getCam","CALL_ACCEPTED","callRejected","trigger","rejected","CALL_REJECTED","onLocalStream","stream","ON_LOCAL_STREAM","callUser","user","CALL_INIT","getMedia","then","getTracks","forEach","track","addTrack","createOffer","createAnswer","catch","error","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","audio","prepareCaller","PREPARE_CALLER","getCallerReady","ON_TRACK","remoteStream","streams","iceCandidate","peer","setLocalDescription","signalingState","offerToReceiveVideo","offerToReceiveAudio","desc","err","endCall","END_CALL"],"mappings":"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","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store }  from '../../../index';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\nconst userId = localStorage.getItem('userId');\n\nconst config = {}\n\ncaller.onicecandidate = evt => {\n    if (!evt.candidate) return;\n    // alert('candidate')\n    onIceCandidate(caller, evt);\n  };\n  caller.ontrack = evt => {\n    store.dispatch(onTrack(evt));\n};\n\n//setInterval(()=> console.log(caller.signalingState), 4000);\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n     \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n    console.log(member);\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n    if (member.id === config.room) {\n    //   alert('call Ended');\n    }\n    \n});\nchannel.bind(\"client-candidate\", msg => {\n    if (msg.room === config.room) {\n        let candidate = new RTCIceCandidate(msg.candidate);\n        console.log(candidate);\n      addIceCandidate(candidate);\n    }\n});\nchannel.bind(\"client-sdp\", msg => {\n    // alert(msg.room + ' and ' + userId);\n    if (msg.room === userId) {\n        store.dispatch({type: actionTypes.ON_INCOMING_CALL, callType: msg.callType, caller: msg.from});\n        // console.log(store);   \n        // setTimeout(() => {\n            //     channel.trigger(\"client-reject\", { room: msg.room, rejected: userId });\n            // }, 15000)\n        // while (!state){\n\n        // }\n        config.room = msg.room;\n        config.sdp = msg.sdp;\n        config.state = 'answerCall';\n        }\n});\n\n    channel.bind(\"client-answer\", answer => {\n        // alert('line 48--' + answer.room, room);\n        if (answer.room === config.room) {\n            // alert(\"answer received\");\n            let sessionDesc = new RTCSessionDescription(answer.sdp);\n            setRemoteDescription(sessionDesc);\n        }\n        });\n    \nexport const callAccepted = () => {\n    // alert('call accepted in room--57 ' + config.room);\n    return dispatch => {\n        config.state = 'answerCall';\n        let sessionDesc = new RTCSessionDescription(config.sdp);\n        setRemoteDescription(sessionDesc);\n        getCam();\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\nexport const callRejected = () => {\n    return dispatch => {\n        channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\n//Create and send offer to remote peer on button click\nexport const callUser = (user, type) => {\n    config.room = user;\n    config.callType = type;\n    config.state = 'makeCall';\n    return dispatch => {\n        getCam();\n        dispatch({type: actionTypes.CALL_INIT})\n    }\n  }    \nconst getCam = () => {\n    // alert('line 86--' + room);\n    getMedia().then(stream => {\n        store.dispatch(onLocalStream(stream));\n        stream.getTracks().forEach(track => {\n            caller.addTrack(track, stream)\n        });    \n            if (config.state === 'makeCall'){\n                createOffer();\n            } else {\n        // let sessionDesc = new RTCSessionDescription(config.sdp);\n        // setRemoteDescription(sessionDesc);\n        createAnswer();\n        config.state = null;\n            }\n        })\n        .catch(error => {\n          console.log(\"an error occured\", error);\n        });\n}\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: config.callType === 'video' ? {width: 1280,\n            height: 720,\n            frameRate: 15}: false,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\n\nexport const getCallerReady = () => {\n    // return dispatch => {\n    //  dispatch(prepareCaller(channel));\n    // //Listen for ICE Candidates and send them to remote peers\n    // // caller.onicecandidate = evt => {\n    // //   if (!evt.candidate) return;\n    // //   alert('candidate')\n    // //   onIceCandidate(caller, evt);\n    // // };\n    // // caller.onnegotiationneeded = async () => {\n    // //     try {\n    // //       await caller.setLocalDescription(await createOffer());\n    // //       // send the offer to the other peer\n    // //       channel.emit('', {desc: pc.localDescription});\n    // //     } catch (err) {\n    // //       console.error(err);\n    // //     }\n    // //   };\n    // //ontrack handler to receive remote feed and show in remoteview video element\n    // // caller.ontrack = evt => {\n    // //     dispatch(onTrack(evt));\n    // // };\n    // }\n}\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\nconst addIceCandidate = iceCandidate => {\n    caller.addIceCandidate(iceCandidate);\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {   \n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        room: config.room\n      });\n    }\n  }\n\nconst setLocalDescription = sessionDesc => {\n    return caller.setLocalDescription(sessionDesc);\n}\n\nconst setRemoteDescription = sessionDesc => {\n    return caller.setRemoteDescription(sessionDesc);\n}\n\nconst addTrack = (track, stream) => {\n  caller.addTrack(track, stream);\n}\n\nconst createAnswer = () => {\n    // alert('createAnswer room: ' + receiver);\n    caller.createAnswer().then(sdp => {\n        let sessionDesc = new RTCSessionDescription(sdp);\n        setLocalDescription(sessionDesc);\n        channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: config.room\n        });\n        console.log(caller.signalingState);\n    });;\n}\n\nconst createOffer = () => {    \n    // alert('createOffer room--180: ' + room)    \n    caller.createOffer({offerToReceiveVideo: true, offerToReceiveAudio: true}).then(desc => {\n        let sessionDesc = new RTCSessionDescription(desc);\n        setLocalDescription(sessionDesc);\n        // console.log(config);\n        // alert('createOffer room--184: ' + config.room) \n        channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: config.room,\n            from: userId,\n            callType: config.callType\n        });\n        console.log(caller.signalingState);\n    })\n    .catch(err => console.log(err));\n}\nexport const endCall = () => {\n    return dispatch => {\n        dispatch({type: actionTypes.END_CALL});\n    }\n    \n}\n\n// setInterval(() => {\n//     console.log(caller.signalingState);\n// }, 3000);"]},"metadata":{},"sourceType":"module"}