{"ast":null,"code":"import { store } from '../../../index';\nimport * as actionTypes from '../actions';\nimport io from 'socket.io-client';\nvar name;\nvar connectedUser;\nvar config = {}; //connecting to our signaling server\n\nvar conn = io('http://localhost:8082');\nvar configuration = {\n  \"iceServers\": [{\n    \"url\": \"stun:stun2.1.google.com:19302\"\n  }]\n};\nvar yourConn = new RTCPeerConnection(configuration);\nvar stream = null;\nconsole.log(conn);\nconn.on('connection', function () {\n  console.log(\"Connected to the signaling server\");\n});\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    //when a remote user adds stream to the peer connection, we display it \n    yourConn.ontrack = function (stream) {\n      console.log('got remote stream');\n      console.log(stream);\n      dispatch(onTrack(stream));\n    }; // Setup ice handling \n\n\n    yourConn.onicecandidate = function (event) {\n      if (event.candidate) {\n        send({\n          type: \"candidate\",\n          candidate: event.candidate\n        });\n      }\n    };\n\n    dispatch(prepareCaller(conn));\n  };\n}; //when we got a message from a signaling server \n\nconn.on('message', function (msg) {\n  console.log(\"Got message\", msg);\n  var data = JSON.parse(msg);\n\n  switch (data.type) {\n    case \"login\":\n      //  handleLogin(data.success); \n      console.log('logged in');\n      break;\n    //when somebody wants to call us \n\n    case \"offer\":\n      setTimeout(function () {\n        return handleOffer(data.offer, data.name);\n      }, 10000);\n      break;\n\n    case \"answer\":\n      handleAnswer(data.answer, data.from);\n      break;\n    //when a remote peer sends an ice candidate to us \n\n    case \"candidate\":\n      handleCandidate(data.candidate);\n      break;\n\n    case \"leave\":\n      handleLeave();\n      break;\n\n    default:\n      break;\n  }\n});\n\nconn.onerror = function (err) {\n  console.log(\"Got error\", err);\n}; //alias for sending JSON encoded messages \n\n\nfunction send(message) {\n  //attach the other peer username to our messages \n  if (connectedUser) {\n    message.name = connectedUser;\n  }\n\n  conn.send(JSON.stringify(message));\n}\n\n;\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: config.callType === 'video' ? {\n      width: 1280,\n      height: 720,\n      frameRate: 15\n    } : false,\n    audio: true\n  });\n};\n\nexport var callUser = function callUser(user, type) {\n  config.room = user;\n  config.type = type;\n  console.log('calling ' + callToUsername + '....');\n  return function (dispatch) {\n    getMedia().then(gotStream).catch(function (e) {\n      return alert(\"getUserMedia() error: \".concat(e.name));\n    });\n    dispatch({\n      type: actionTypes.CALL_INIT\n    });\n    yourConn.createOffer(function (offer) {\n      send({\n        type: \"offer\",\n        offer: offer\n      });\n      yourConn.setLocalDescription(offer);\n    }, function (error) {\n      alert(\"Error when creating an offer\");\n    });\n  };\n};\n\nvar gotStream = function gotStream(stream) {\n  console.log('Received local stream');\n  store.dispatch(onLocalStream(stream));\n  stream.getTracks().forEach(function (track) {\n    caller.addTrack(track, stream);\n  });\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n};\n\nfunction handleOffer(offer, name) {\n  connectedUser = name;\n  console.log('Accepting offer from ' + connectedUser);\n  yourConn.setRemoteDescription(new RTCSessionDescription(offer)); //create an answer to an offer \n\n  console.log('Creating and sending answer to ' + connectedUser);\n  yourConn.createAnswer(function (answer) {\n    getMedia().then(gotStream);\n    yourConn.setLocalDescription(answer);\n    send({\n      type: \"answer\",\n      answer: answer,\n      from: name\n    });\n  }, function (error) {\n    alert(\"Error when creating an answer\");\n  });\n}\n\nexport var callAccepted = function callAccepted() {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.CALL_ACCEPTED\n    });\n  };\n};\nexport var callRejected = function callRejected() {\n  return function (dispatch) {\n    // channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n    dispatch({\n      type: actionTypes.CALL_REJECTED\n    });\n  };\n};\n\nfunction handleAnswer(answer, name) {\n  console.log('Accepting answer from ' + name);\n  yourConn.setRemoteDescription(new RTCSessionDescription(answer));\n}\n\n;\n\nfunction handleCandidate(candidate) {\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate));\n}\n\n;\nexport var endCall = function endCall() {\n  return function (dispatch) {\n    send({\n      type: \"leave\",\n      name: name\n    });\n    handleLeave();\n  };\n};\n\nfunction handleLeave() {\n  connectedUser = null;\n  stream.getTracks().forEach(function (track) {\n    return track.stop();\n  });\n  yourConn.close();\n  yourConn.onicecandidate = null;\n  yourConn.onaddTrack = null;\n}\n\n;","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/store/actions/actionCreators/callActionCreatorss.js"],"names":["store","actionTypes","io","name","connectedUser","config","conn","configuration","yourConn","RTCPeerConnection","stream","console","log","on","prepareCaller","channel","type","PREPARE_CALLER","getCallerReady","dispatch","ontrack","onTrack","onicecandidate","event","candidate","send","msg","data","JSON","parse","setTimeout","handleOffer","offer","handleAnswer","answer","from","handleCandidate","handleLeave","onerror","err","message","stringify","getMedia","navigator","mediaDevices","getUserMedia","video","callType","width","height","frameRate","audio","callUser","user","room","callToUsername","then","gotStream","catch","e","alert","CALL_INIT","createOffer","setLocalDescription","error","onLocalStream","getTracks","forEach","track","caller","addTrack","ON_TRACK","remoteStream","streams","ON_LOCAL_STREAM","setRemoteDescription","RTCSessionDescription","createAnswer","callAccepted","CALL_ACCEPTED","callRejected","CALL_REJECTED","addIceCandidate","RTCIceCandidate","endCall","stop","close","onaddTrack"],"mappings":"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","sourcesContent":["import { store }  from '../../../index';\nimport * as actionTypes from '../actions';\nimport io from 'socket.io-client'; \nlet name; \nlet connectedUser;\nconst config = {};\n//connecting to our signaling server\nconst conn = io('http://localhost:8082')\nconst configuration = { \n    \"iceServers\": [{ \"url\": \"stun:stun2.1.google.com:19302\" }]\n };   \nconst yourConn = new RTCPeerConnection(configuration);\nconst stream = null;\nconsole.log(conn);\nconn.on('connection', function () { \n   console.log(\"Connected to the signaling server\"); \n});\n\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n        //when a remote user adds stream to the peer connection, we display it \n        yourConn.ontrack = function (stream) { \n            console.log('got remote stream');\n            console.log(stream)\n           dispatch(onTrack(stream));\n        };\n           \n        // Setup ice handling \n        yourConn.onicecandidate = function (event) { \n           if (event.candidate) { \n              send({ \n                 type: \"candidate\", \n                 candidate: event.candidate \n              }); \n           } \n        };   \n        dispatch(prepareCaller(conn));\n    }\n}\n//when we got a message from a signaling server \nconn.on('message', function (msg) { \n\n   console.log(\"Got message\", msg);\n\t\n   const data = JSON.parse(msg); \n\t\n   switch(data.type) { \n      case \"login\": \n        //  handleLogin(data.success); \n        console.log('logged in')\n         break; \n      //when somebody wants to call us \n      case \"offer\": \n         setTimeout(() => handleOffer(data.offer, data.name), 10000); \n         break; \n      case \"answer\": \n         handleAnswer(data.answer, data.from); \n         break; \n      //when a remote peer sends an ice candidate to us \n      case \"candidate\": \n         handleCandidate(data.candidate); \n         break; \n      case \"leave\": \n         handleLeave(); \n         break; \n      default: \n         break; \n   }\n});\n  \nconn.onerror = function (err) { \n   console.log(\"Got error\", err); \n};\n  \n//alias for sending JSON encoded messages \nfunction send(message) { \n   //attach the other peer username to our messages \n   if (connectedUser) { \n      message.name = connectedUser; \n   } \n\t\n   conn.send(JSON.stringify(message)); \n};\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: config.callType === 'video' ? {width: 1280,\n            height: 720,\n            frameRate: 15}: false,\n        audio: true\n      });\n}\n\nexport const callUser = (user, type) => {\n    config.room = user;\n    config.type = type;\n    console.log('calling ' + callToUsername + '....' );\n    return dispatch => {\n        getMedia().then(gotStream)\n        .catch(e => alert(`getUserMedia() error: ${e.name}`));\n        dispatch({type: actionTypes.CALL_INIT})\n        yourConn.createOffer(function (offer) { \n            send({ \n               type: \"offer\", \n               offer: offer \n            }); \n               \n            yourConn.setLocalDescription(offer); \n         }, function (error) { \n            alert(\"Error when creating an offer\"); \n         });         \n    }\n  }  \n\nconst gotStream = stream => {\n    console.log('Received local stream');\n    store.dispatch(onLocalStream(stream));\n        stream.getTracks().forEach(track => {\n            caller.addTrack(track, stream)\n        });\n}\n\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\n\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\nfunction handleOffer(offer, name) { \n    connectedUser = name; \n \n    console.log('Accepting offer from ' + connectedUser);\n    yourConn.setRemoteDescription(new RTCSessionDescription(offer));\n     \n    //create an answer to an offer \n    console.log('Creating and sending answer to ' + connectedUser);\n    yourConn.createAnswer(function (answer) { \n        getMedia().then(gotStream);\n        yourConn.setLocalDescription(answer); \n         \n        send({ \n            type: \"answer\", \n            answer: answer,\n            from: name \n       }); \n         \n    }, function (error) { \n       alert(\"Error when creating an answer\"); \n    }); \n}\nexport const callAccepted = () => {\n    return dispatch => {\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\nexport const callRejected = () => {\n    return dispatch => {\n        // channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nfunction handleAnswer(answer, name) { \n    console.log('Accepting answer from ' + name)\n   yourConn.setRemoteDescription(new RTCSessionDescription(answer)); \n};\nfunction handleCandidate(candidate) { \n    yourConn.addIceCandidate(new RTCIceCandidate(candidate)); \n };\n\nexport const endCall = () => {\n    return dispatch => {\n        send({ \n            type: \"leave\",\n            name: name \n         }); \n        handleLeave(); \n    }\n}\n\nfunction handleLeave() { \n    connectedUser = null; \n    stream.getTracks().forEach(track => track.stop());\n     \n    yourConn.close(); \n    yourConn.onicecandidate = null; \n    yourConn.onaddTrack = null;\n };"]},"metadata":{},"sourceType":"module"}