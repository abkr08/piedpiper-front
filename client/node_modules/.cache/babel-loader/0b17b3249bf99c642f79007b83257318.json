{"ast":null,"code":"import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store } from '../../../index';\nvar channel = pusher.subscribe('presence-videocall');\nvar caller = new window.RTCPeerConnection({\n  'iceServers': [{\n    'urls': 'stun:stun.l.google.com:19302'\n  }]\n});\nvar userId = localStorage.getItem('userId');\nvar config = {};\n\ncaller.onicecandidate = function (evt) {\n  if (!evt.candidate) return; // alert('candidate')\n\n  onIceCandidate(caller, evt);\n};\n\ncaller.ontrack = function (evt) {\n  store.dispatch(onTrack(evt));\n}; //setInterval(()=> console.log(caller.signalingState), 4000);\n\n\nchannel.bind(\"pusher:subscription_succeeded\", function (members) {//this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n});\nchannel.bind(\"pusher:member_added\", function (member) {\n  console.log(member);\n});\nchannel.bind(\"pusher:member_removed\", function (member) {\n  if (member.id === config.room) {//   alert('call Ended');\n  }\n});\nchannel.bind(\"client-candidate\", function (msg) {\n  if (msg.room === config.room && !config.initiator) {\n    // let candidate = new RTCIceCandidate(msg.candidate);\n    // console.log(candidate);\n    //   addIceCandidate(candidate);\n    caller.addIceCandidate(msg.candidate).then(function () {\n      return onAddIceCandidateSuccess(msg.room);\n    }, function (err) {\n      return onAddIceCandidateError(msg.room, err);\n    });\n    console.log(\"\".concat(msg.room, \" ICE candidate:\\n\").concat(msg.candidate ? msg.candidate.candidate : '(null)'));\n  }\n});\n\nfunction onAddIceCandidateSuccess(pc) {\n  console.log(\"\".concat(pc, \" addIceCandidate success\"));\n}\n\nfunction onAddIceCandidateError(pc, error) {\n  console.log(\"\".concat(pc, \" failed to add ICE Candidate: \").concat(error.toString()));\n}\n\nchannel.bind(\"client-sdp\", function (msg) {\n  if (msg.room === userId) {\n    store.dispatch({\n      type: actionTypes.ON_INCOMING_CALL,\n      callType: msg.callType,\n      caller: msg.from\n    });\n    config.room = msg.room;\n    config.sdp = msg.sdp;\n    config.state = 'answerCall';\n  }\n});\nchannel.bind(\"client-answer\", function (answer) {\n  if (answer.room === config.room) {\n    // let sessionDesc = new RTCSessionDescription(answer.sdp);\n    // setRemoteDescription(sessionDesc);\n    console.log('pc1 setRemoteDescription start');\n    caller.setRemoteDescription(answer.sdp).then(function () {\n      return onSetRemoteSuccess();\n    }, onSetSessionDescriptionError);\n  }\n});\nexport var callAccepted = function callAccepted() {\n  return function (dispatch) {\n    config.state = 'answerCall'; // let sessionDesc = new RTCSessionDescription(config.sdp);\n    // setRemoteDescription(sessionDesc);\n    // getCam();\n\n    console.log(\"\".concat(userId, \" setRemoteDescription start\"));\n    caller.setRemoteDescription(desc).then(function () {\n      return onSetRemoteSuccess(pc2);\n    }, onSetSessionDescriptionError);\n    console.log(\"\".concat(userId, \" createAnswer start\")); // Since the 'remote' side has no media stream we need\n    // to pass in the right constraints in order for it to\n    // accept the incoming offer of audio and video.\n\n    caller.createAnswer().then(onCreateAnswerSuccess, onCreateSessionDescriptionError);\n    dispatch({\n      type: actionTypes.CALL_ACCEPTED\n    });\n  };\n};\n\nvar onCreateAnswerSuccess = function onCreateAnswerSuccess(desc) {\n  console.log(\"Answer from \".concat(userId, \":\\n\").concat(desc.sdp));\n  console.log(\"\".concat(userId, \" setLocalDescription start\"));\n  caller.setLocalDescription(desc).then(function () {\n    return onSetLocalSuccess();\n  }, onSetSessionDescriptionError);\n  channel.trigger(\"client-answer\", {\n    sdp: sdp,\n    room: config.room\n  });\n};\n\nfunction onSetLocalSuccess() {\n  console.log(\"\".concat(userId, \" setLocalDescription complete\"));\n}\n\nfunction onSetRemoteSuccess() {\n  console.log(\"\".concat(userId, \" setRemoteDescription complete\"));\n}\n\nfunction onSetSessionDescriptionError(error) {\n  console.log(\"Failed to set session description: \".concat(error.toString()));\n}\n\nexport var callRejected = function callRejected() {\n  return function (dispatch) {\n    channel.trigger(\"client-reject\", {\n      room: config.room,\n      rejected: userId\n    });\n    dispatch({\n      type: actionTypes.CALL_REJECTED\n    });\n  };\n};\n\nvar onLocalStream = function onLocalStream(stream) {\n  return {\n    type: actionTypes.ON_LOCAL_STREAM,\n    stream: stream\n  };\n}; //Create and send offer to remote peer on button click\n\n\nexport var callUser = function callUser(user, type) {\n  config.room = user;\n  config.callType = type;\n  config.state = 'makeCall';\n  config.initiator = true;\n  console.log('Requesting local stream');\n  return function (dispatch) {\n    // getCam();\n    getMedia().then(gotStream).catch(function (e) {\n      return alert(\"getUserMedia() error: \".concat(e.name));\n    });\n    dispatch({\n      type: actionTypes.CALL_INIT\n    });\n    var offerOptions = {\n      offerToReceiveVideo: true,\n      offerToReceiveAudio: true\n    };\n    caller.createOffer(offerOptions).then(onCreateOfferSuccess, onCreateSessionDescriptionError);\n  };\n};\n\nvar onCreateOfferSuccess = function onCreateOfferSuccess(desc) {\n  console.log(\"Offer from \".concat(userId, \"\\n\").concat(desc.sdp));\n  console.log(\"\".concat(userId, \" setLocalDescription start\"));\n  caller.setLocalDescription(desc).then(function () {\n    return onSetLocalSuccess(pc1);\n  }, onSetSessionDescriptionError);\n  channel.trigger(\"client-sdp\", {\n    sdp: desc,\n    room: config.room,\n    from: userId,\n    callType: config.callType\n  });\n};\n\nvar gotStream = function gotStream(stream) {\n  console.log('Received local stream');\n  store.dispatch(onLocalStream(stream));\n  stream.getTracks().forEach(function (track) {\n    caller.addTrack(track, stream);\n  });\n};\n\nvar getCam = function getCam() {\n  // alert('line 86--' + room);\n  getMedia().then(function (stream) {\n    store.dispatch(onLocalStream(stream));\n    stream.getTracks().forEach(function (track) {\n      caller.addTrack(track, stream);\n    });\n\n    if (config.state === 'makeCall') {\n      createOffer();\n    } else {\n      // let sessionDesc = new RTCSessionDescription(config.sdp);\n      // setRemoteDescription(sessionDesc);\n      createAnswer();\n      config.state = null;\n    }\n  }).catch(function (error) {\n    console.log(\"an error occured\", error);\n  });\n};\n\nvar getMedia = function getMedia() {\n  return navigator.mediaDevices.getUserMedia({\n    video: config.callType === 'video' ? {\n      width: 1280,\n      height: 720,\n      frameRate: 15\n    } : false,\n    audio: true\n  });\n};\n\nvar prepareCaller = function prepareCaller(channel) {\n  return {\n    type: actionTypes.PREPARE_CALLER,\n    channel: channel\n  };\n};\n\nexport var getCallerReady = function getCallerReady() {\n  return function (dispatch) {\n    dispatch(prepareCaller(channel)); //Listen for ICE Candidates and send them to remote peers\n    // caller.onicecandidate = evt => {\n    //   if (!evt.candidate) return;\n    //   alert('candidate')\n    //   onIceCandidate(caller, evt);\n    // };\n    // caller.onnegotiationneeded = async () => {\n    //     try {\n    //       await caller.setLocalDescription(await createOffer());\n    //       // send the offer to the other peer\n    //       channel.emit('', {desc: pc.localDescription});\n    //     } catch (err) {\n    //       console.error(err);\n    //     }\n    //   };\n    //ontrack handler to receive remote feed and show in remoteview video element\n    // caller.ontrack = evt => {\n    //     dispatch(onTrack(evt));\n    // };\n  };\n};\n\nvar onTrack = function onTrack(track) {\n  return {\n    type: actionTypes.ON_TRACK,\n    remoteStream: track.streams[0]\n  };\n};\n\nvar addIceCandidate = function addIceCandidate(iceCandidate) {\n  caller.addIceCandidate(iceCandidate);\n};\n\nvar onIceCandidate = function onIceCandidate(peer, evt) {\n  if (evt.candidate) {\n    channel.trigger(\"client-candidate\", {\n      candidate: evt.candidate,\n      room: config.room\n    });\n  }\n};\n\nvar setLocalDescription = function setLocalDescription(sessionDesc) {\n  return caller.setLocalDescription(sessionDesc);\n};\n\nvar setRemoteDescription = function setRemoteDescription(sessionDesc) {\n  return caller.setRemoteDescription(sessionDesc);\n};\n\nvar addTrack = function addTrack(track, stream) {\n  caller.addTrack(track, stream);\n};\n\nvar createAnswer = function createAnswer() {\n  // alert('createAnswer room: ' + receiver);\n  caller.createAnswer().then(function (sdp) {\n    var sessionDesc = new RTCSessionDescription(sdp);\n    setLocalDescription(sessionDesc);\n    channel.trigger(\"client-answer\", {\n      sdp: sdp,\n      room: config.room\n    });\n    console.log(caller.signalingState);\n  });\n  ;\n};\n\nvar createOffer = function createOffer() {\n  // alert('createOffer room--180: ' + room)    \n  caller.createOffer({\n    offerToReceiveVideo: true,\n    offerToReceiveAudio: true\n  }).then(function (desc) {\n    var sessionDesc = new RTCSessionDescription(desc);\n    setLocalDescription(sessionDesc); // console.log(config);\n    // alert('createOffer room--184: ' + config.room) \n\n    channel.trigger(\"client-sdp\", {\n      sdp: desc,\n      room: config.room,\n      from: userId,\n      callType: config.callType\n    });\n    console.log(caller.signalingState);\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\n\nexport var endCall = function endCall() {\n  return function (dispatch) {\n    dispatch({\n      type: actionTypes.END_CALL\n    });\n  };\n}; // setInterval(() => {\n//     console.log(caller.signalingState);\n// }, 3000);","map":{"version":3,"sources":["/Users/Gotzil/Desktop/React/PiperChat/piedpiper/client/src/store/actions/actionCreators/callActionCreators.js"],"names":["pusher","actionTypes","store","channel","subscribe","caller","window","RTCPeerConnection","userId","localStorage","getItem","config","onicecandidate","evt","candidate","onIceCandidate","ontrack","dispatch","onTrack","bind","members","member","console","log","id","room","msg","initiator","addIceCandidate","then","onAddIceCandidateSuccess","err","onAddIceCandidateError","pc","error","toString","type","ON_INCOMING_CALL","callType","from","sdp","state","answer","setRemoteDescription","onSetRemoteSuccess","onSetSessionDescriptionError","callAccepted","desc","pc2","createAnswer","onCreateAnswerSuccess","onCreateSessionDescriptionError","CALL_ACCEPTED","setLocalDescription","onSetLocalSuccess","trigger","callRejected","rejected","CALL_REJECTED","onLocalStream","stream","ON_LOCAL_STREAM","callUser","user","getMedia","gotStream","catch","e","alert","name","CALL_INIT","offerOptions","offerToReceiveVideo","offerToReceiveAudio","createOffer","onCreateOfferSuccess","pc1","getTracks","forEach","track","addTrack","getCam","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","audio","prepareCaller","PREPARE_CALLER","getCallerReady","ON_TRACK","remoteStream","streams","iceCandidate","peer","sessionDesc","RTCSessionDescription","signalingState","endCall","END_CALL"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAO,KAAKC,WAAZ,MAA6B,YAA7B;AACA,SAASC,KAAT,QAAuB,gBAAvB;AAEA,IAAMC,OAAO,GAAGH,MAAM,CAACI,SAAP,CAAiB,oBAAjB,CAAhB;AACA,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,iBAAX,CAA6B;AAAC,gBAAa,CAAC;AAAC,YAAO;AAAR,GAAD;AAAd,CAA7B,CAAf;AACA,IAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;AAEA,IAAMC,MAAM,GAAG,EAAf;;AAEAN,MAAM,CAACO,cAAP,GAAwB,UAAAC,GAAG,EAAI;AAC3B,MAAI,CAACA,GAAG,CAACC,SAAT,EAAoB,OADO,CAE3B;;AACAC,EAAAA,cAAc,CAACV,MAAD,EAASQ,GAAT,CAAd;AACD,CAJH;;AAKER,MAAM,CAACW,OAAP,GAAiB,UAAAH,GAAG,EAAI;AACtBX,EAAAA,KAAK,CAACe,QAAN,CAAeC,OAAO,CAACL,GAAD,CAAtB;AACH,CAFC,C,CAIF;;;AACAV,OAAO,CAACgB,IAAR,CAAa,+BAAb,EAA8C,UAAAC,OAAO,EAAI,CAErD;AAED,CAJH;AAMAjB,OAAO,CAACgB,IAAR,CAAa,qBAAb,EAAoC,UAAAE,MAAM,EAAI;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,CAFH;AAIAlB,OAAO,CAACgB,IAAR,CAAa,uBAAb,EAAsC,UAAAE,MAAM,EAAI;AAC5C,MAAIA,MAAM,CAACG,EAAP,KAAcb,MAAM,CAACc,IAAzB,EAA+B,CAC/B;AACC;AAEJ,CALD;AAMAtB,OAAO,CAACgB,IAAR,CAAa,kBAAb,EAAiC,UAAAO,GAAG,EAAI;AACpC,MAAIA,GAAG,CAACD,IAAJ,KAAad,MAAM,CAACc,IAApB,IAA4B,CAACd,MAAM,CAACgB,SAAxC,EAAmD;AAC/C;AACA;AACJ;AACEtB,IAAAA,MAAM,CAACuB,eAAP,CAAuBF,GAAG,CAACZ,SAA3B,EACCe,IADD,CACM;AAAA,aAAMC,wBAAwB,CAACJ,GAAG,CAACD,IAAL,CAA9B;AAAA,KADN,EACgD,UAAAM,GAAG;AAAA,aAAIC,sBAAsB,CAACN,GAAG,CAACD,IAAL,EAAWM,GAAX,CAA1B;AAAA,KADnD;AAEFT,IAAAA,OAAO,CAACC,GAAR,WAAeG,GAAG,CAACD,IAAnB,8BAA2CC,GAAG,CAACZ,SAAJ,GAAgBY,GAAG,CAACZ,SAAJ,CAAcA,SAA9B,GAA0C,QAArF;AACC;AACJ,CATD;;AAUA,SAASgB,wBAAT,CAAkCG,EAAlC,EAAsC;AAClCX,EAAAA,OAAO,CAACC,GAAR,WAAeU,EAAf;AACD;;AAED,SAASD,sBAAT,CAAgCC,EAAhC,EAAoCC,KAApC,EAA2C;AACzCZ,EAAAA,OAAO,CAACC,GAAR,WAAeU,EAAf,2CAAkDC,KAAK,CAACC,QAAN,EAAlD;AACD;;AACHhC,OAAO,CAACgB,IAAR,CAAa,YAAb,EAA2B,UAAAO,GAAG,EAAI;AAC9B,MAAIA,GAAG,CAACD,IAAJ,KAAajB,MAAjB,EAAyB;AACrBN,IAAAA,KAAK,CAACe,QAAN,CAAe;AAACmB,MAAAA,IAAI,EAAEnC,WAAW,CAACoC,gBAAnB;AAAqCC,MAAAA,QAAQ,EAAEZ,GAAG,CAACY,QAAnD;AAA6DjC,MAAAA,MAAM,EAAEqB,GAAG,CAACa;AAAzE,KAAf;AACA5B,IAAAA,MAAM,CAACc,IAAP,GAAcC,GAAG,CAACD,IAAlB;AACAd,IAAAA,MAAM,CAAC6B,GAAP,GAAad,GAAG,CAACc,GAAjB;AACA7B,IAAAA,MAAM,CAAC8B,KAAP,GAAe,YAAf;AACC;AACR,CAPD;AASItC,OAAO,CAACgB,IAAR,CAAa,eAAb,EAA8B,UAAAuB,MAAM,EAAI;AACpC,MAAIA,MAAM,CAACjB,IAAP,KAAgBd,MAAM,CAACc,IAA3B,EAAiC;AAC7B;AACA;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAlB,IAAAA,MAAM,CAACsC,oBAAP,CAA4BD,MAAM,CAACF,GAAnC,EAAwCX,IAAxC,CAA6C;AAAA,aAAMe,kBAAkB,EAAxB;AAAA,KAA7C,EAAyEC,4BAAzE;AAEH;AACA,CARL;AAUJ,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,UAAA7B,QAAQ,EAAI;AACfN,IAAAA,MAAM,CAAC8B,KAAP,GAAe,YAAf,CADe,CAEf;AACA;AACA;;AACAnB,IAAAA,OAAO,CAACC,GAAR,WAAef,MAAf;AACAH,IAAAA,MAAM,CAACsC,oBAAP,CAA4BI,IAA5B,EAAkClB,IAAlC,CAAuC;AAAA,aAAMe,kBAAkB,CAACI,GAAD,CAAxB;AAAA,KAAvC,EAAsEH,4BAAtE;AACAvB,IAAAA,OAAO,CAACC,GAAR,WAAef,MAAf,0BAPe,CAQf;AACA;AACA;;AACAH,IAAAA,MAAM,CAAC4C,YAAP,GAAsBpB,IAAtB,CAA2BqB,qBAA3B,EAAkDC,+BAAlD;AACAlC,IAAAA,QAAQ,CAAC;AAACmB,MAAAA,IAAI,EAAEnC,WAAW,CAACmD;AAAnB,KAAD,CAAR;AACH,GAbD;AAcH,CAfM;;AAiBP,IAAMF,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAH,IAAI,EAAI;AAClCzB,EAAAA,OAAO,CAACC,GAAR,uBAA2Bf,MAA3B,gBAAuCuC,IAAI,CAACP,GAA5C;AACAlB,EAAAA,OAAO,CAACC,GAAR,WAAef,MAAf;AACAH,EAAAA,MAAM,CAACgD,mBAAP,CAA2BN,IAA3B,EAAiClB,IAAjC,CAAsC;AAAA,WAAMyB,iBAAiB,EAAvB;AAAA,GAAtC,EAAiET,4BAAjE;AAEA1C,EAAAA,OAAO,CAACoD,OAAR,CAAgB,eAAhB,EAAiC;AAC7Bf,IAAAA,GAAG,EAAEA,GADwB;AAE7Bf,IAAAA,IAAI,EAAEd,MAAM,CAACc;AAFgB,GAAjC;AAIH,CATD;;AAWA,SAAS6B,iBAAT,GAA6B;AACzBhC,EAAAA,OAAO,CAACC,GAAR,WAAef,MAAf;AACD;;AAED,SAASoC,kBAAT,GAA8B;AAC5BtB,EAAAA,OAAO,CAACC,GAAR,WAAef,MAAf;AACD;;AAED,SAASqC,4BAAT,CAAsCX,KAAtC,EAA6C;AAC3CZ,EAAAA,OAAO,CAACC,GAAR,8CAAkDW,KAAK,CAACC,QAAN,EAAlD;AACD;;AACH,OAAO,IAAMqB,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,UAAAvC,QAAQ,EAAI;AACfd,IAAAA,OAAO,CAACoD,OAAR,CAAgB,eAAhB,EAAiC;AAAE9B,MAAAA,IAAI,EAAEd,MAAM,CAACc,IAAf;AAAqBgC,MAAAA,QAAQ,EAAEjD;AAA/B,KAAjC;AACAS,IAAAA,QAAQ,CAAC;AAACmB,MAAAA,IAAI,EAAEnC,WAAW,CAACyD;AAAnB,KAAD,CAAR;AACH,GAHD;AAIH,CALM;;AAMP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,MAAM,EAAI;AAC5B,SAAO;AACHxB,IAAAA,IAAI,EAAEnC,WAAW,CAAC4D,eADf;AAEHD,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALD,C,CAMA;;;AACA,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAO3B,IAAP,EAAgB;AACpCzB,EAAAA,MAAM,CAACc,IAAP,GAAcsC,IAAd;AACApD,EAAAA,MAAM,CAAC2B,QAAP,GAAkBF,IAAlB;AACAzB,EAAAA,MAAM,CAAC8B,KAAP,GAAe,UAAf;AACA9B,EAAAA,MAAM,CAACgB,SAAP,GAAmB,IAAnB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,SAAO,UAAAN,QAAQ,EAAI;AACf;AACA+C,IAAAA,QAAQ,GAAGnC,IAAX,CAAgBoC,SAAhB,EACCC,KADD,CACO,UAAAC,CAAC;AAAA,aAAIC,KAAK,iCAA0BD,CAAC,CAACE,IAA5B,EAAT;AAAA,KADR;AAEApD,IAAAA,QAAQ,CAAC;AAACmB,MAAAA,IAAI,EAAEnC,WAAW,CAACqE;AAAnB,KAAD,CAAR;AAEA,QAAIC,YAAY,GAAG;AAACC,MAAAA,mBAAmB,EAAE,IAAtB;AAA4BC,MAAAA,mBAAmB,EAAE;AAAjD,KAAnB;AACApE,IAAAA,MAAM,CAACqE,WAAP,CAAmBH,YAAnB,EAAiC1C,IAAjC,CAAsC8C,oBAAtC,EAA4DxB,+BAA5D;AACH,GARD;AASD,CAfI;;AAgBP,IAAOwB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA5B,IAAI,EAAK;AACnCzB,EAAAA,OAAO,CAACC,GAAR,sBAA0Bf,MAA1B,eAAqCuC,IAAI,CAACP,GAA1C;AACAlB,EAAAA,OAAO,CAACC,GAAR,WAAef,MAAf;AACAH,EAAAA,MAAM,CAACgD,mBAAP,CAA2BN,IAA3B,EAAiClB,IAAjC,CAAsC;AAAA,WAAMyB,iBAAiB,CAACsB,GAAD,CAAvB;AAAA,GAAtC,EAAoE/B,4BAApE;AACA1C,EAAAA,OAAO,CAACoD,OAAR,CAAgB,YAAhB,EAA8B;AAC1Bf,IAAAA,GAAG,EAAEO,IADqB;AAE1BtB,IAAAA,IAAI,EAAEd,MAAM,CAACc,IAFa;AAG1Bc,IAAAA,IAAI,EAAE/B,MAHoB;AAI1B8B,IAAAA,QAAQ,EAAE3B,MAAM,CAAC2B;AAJS,GAA9B;AAMH,CAVD;;AAYA,IAAM2B,SAAS,GAAG,SAAZA,SAAY,CAAAL,MAAM,EAAI;AACxBtC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACArB,EAAAA,KAAK,CAACe,QAAN,CAAe0C,aAAa,CAACC,MAAD,CAA5B;AACIA,EAAAA,MAAM,CAACiB,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAChC1E,IAAAA,MAAM,CAAC2E,QAAP,CAAgBD,KAAhB,EAAuBnB,MAAvB;AACH,GAFD;AAGP,CAND;;AAOA,IAAMqB,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB;AACAjB,EAAAA,QAAQ,GAAGnC,IAAX,CAAgB,UAAA+B,MAAM,EAAI;AACtB1D,IAAAA,KAAK,CAACe,QAAN,CAAe0C,aAAa,CAACC,MAAD,CAA5B;AACAA,IAAAA,MAAM,CAACiB,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAChC1E,MAAAA,MAAM,CAAC2E,QAAP,CAAgBD,KAAhB,EAAuBnB,MAAvB;AACH,KAFD;;AAGI,QAAIjD,MAAM,CAAC8B,KAAP,KAAiB,UAArB,EAAgC;AAC5BiC,MAAAA,WAAW;AACd,KAFD,MAEO;AACX;AACA;AACAzB,MAAAA,YAAY;AACZtC,MAAAA,MAAM,CAAC8B,KAAP,GAAe,IAAf;AACK;AACJ,GAbL,EAcKyB,KAdL,CAcW,UAAAhC,KAAK,EAAI;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCW,KAAhC;AACD,GAhBL;AAiBH,CAnBD;;AAqBA,IAAM8B,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,SAAOkB,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACvCC,IAAAA,KAAK,EAAE1E,MAAM,CAAC2B,QAAP,KAAoB,OAApB,GAA8B;AAACgD,MAAAA,KAAK,EAAE,IAAR;AACjCC,MAAAA,MAAM,EAAE,GADyB;AAEjCC,MAAAA,SAAS,EAAE;AAFsB,KAA9B,GAEa,KAHmB;AAIvCC,IAAAA,KAAK,EAAE;AAJgC,GAApC,CAAP;AAMH,CAPD;;AAQA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAvF,OAAO,EAAI;AAC7B,SAAO;AACHiC,IAAAA,IAAI,EAAEnC,WAAW,CAAC0F,cADf;AAEHxF,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,IAAMyF,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAChC,SAAO,UAAA3E,QAAQ,EAAI;AAClBA,IAAAA,QAAQ,CAACyE,aAAa,CAACvF,OAAD,CAAd,CAAR,CADkB,CAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,GArBD;AAsBH,CAvBM;;AAwBP,IAAMe,OAAO,GAAG,SAAVA,OAAU,CAAA6D,KAAK,EAAI;AACrB,SAAO;AACH3C,IAAAA,IAAI,EAAEnC,WAAW,CAAC4F,QADf;AAEHC,IAAAA,YAAY,EAAEf,KAAK,CAACgB,OAAN,CAAc,CAAd;AAFX,GAAP;AAIH,CALD;;AAMA,IAAMnE,eAAe,GAAG,SAAlBA,eAAkB,CAAAoE,YAAY,EAAI;AACpC3F,EAAAA,MAAM,CAACuB,eAAP,CAAuBoE,YAAvB;AACH,CAFD;;AAIA,IAAMjF,cAAc,GAAG,SAAjBA,cAAiB,CAACkF,IAAD,EAAOpF,GAAP,EAAe;AAClC,MAAIA,GAAG,CAACC,SAAR,EAAmB;AACjBX,IAAAA,OAAO,CAACoD,OAAR,CAAgB,kBAAhB,EAAoC;AAClCzC,MAAAA,SAAS,EAAED,GAAG,CAACC,SADmB;AAElCW,MAAAA,IAAI,EAAEd,MAAM,CAACc;AAFqB,KAApC;AAID;AACF,CAPH;;AAUA,IAAM4B,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA6C,WAAW,EAAI;AACvC,SAAO7F,MAAM,CAACgD,mBAAP,CAA2B6C,WAA3B,CAAP;AACH,CAFD;;AAIA,IAAMvD,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAuD,WAAW,EAAI;AACxC,SAAO7F,MAAM,CAACsC,oBAAP,CAA4BuD,WAA5B,CAAP;AACH,CAFD;;AAIA,IAAMlB,QAAQ,GAAG,SAAXA,QAAW,CAACD,KAAD,EAAQnB,MAAR,EAAmB;AAClCvD,EAAAA,MAAM,CAAC2E,QAAP,CAAgBD,KAAhB,EAAuBnB,MAAvB;AACD,CAFD;;AAIA,IAAMX,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB;AACA5C,EAAAA,MAAM,CAAC4C,YAAP,GAAsBpB,IAAtB,CAA2B,UAAAW,GAAG,EAAI;AAC9B,QAAI0D,WAAW,GAAG,IAAIC,qBAAJ,CAA0B3D,GAA1B,CAAlB;AACAa,IAAAA,mBAAmB,CAAC6C,WAAD,CAAnB;AACA/F,IAAAA,OAAO,CAACoD,OAAR,CAAgB,eAAhB,EAAiC;AAC7Bf,MAAAA,GAAG,EAAEA,GADwB;AAE7Bf,MAAAA,IAAI,EAAEd,MAAM,CAACc;AAFgB,KAAjC;AAIAH,IAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAM,CAAC+F,cAAnB;AACH,GARD;AAQG;AACN,CAXD;;AAaA,IAAM1B,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB;AACArE,EAAAA,MAAM,CAACqE,WAAP,CAAmB;AAACF,IAAAA,mBAAmB,EAAE,IAAtB;AAA4BC,IAAAA,mBAAmB,EAAE;AAAjD,GAAnB,EAA2E5C,IAA3E,CAAgF,UAAAkB,IAAI,EAAI;AACpF,QAAImD,WAAW,GAAG,IAAIC,qBAAJ,CAA0BpD,IAA1B,CAAlB;AACAM,IAAAA,mBAAmB,CAAC6C,WAAD,CAAnB,CAFoF,CAGpF;AACA;;AACA/F,IAAAA,OAAO,CAACoD,OAAR,CAAgB,YAAhB,EAA8B;AAC1Bf,MAAAA,GAAG,EAAEO,IADqB;AAE1BtB,MAAAA,IAAI,EAAEd,MAAM,CAACc,IAFa;AAG1Bc,MAAAA,IAAI,EAAE/B,MAHoB;AAI1B8B,MAAAA,QAAQ,EAAE3B,MAAM,CAAC2B;AAJS,KAA9B;AAMAhB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAM,CAAC+F,cAAnB;AACH,GAZD,EAaClC,KAbD,CAaO,UAAAnC,GAAG;AAAA,WAAIT,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CAAJ;AAAA,GAbV;AAcH,CAhBD;;AAiBA,OAAO,IAAMsE,OAAO,GAAG,SAAVA,OAAU,GAAM;AACzB,SAAO,UAAApF,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAAC;AAACmB,MAAAA,IAAI,EAAEnC,WAAW,CAACqG;AAAnB,KAAD,CAAR;AACH,GAFD;AAIH,CALM,C,CAOP;AACA;AACA","sourcesContent":["import pusher from '../../../pusherConfig';\nimport * as actionTypes from '../actions';\nimport { store }  from '../../../index';\n\nconst channel = pusher.subscribe('presence-videocall');\nconst caller = new window.RTCPeerConnection({'iceServers':[{'urls':'stun:stun.l.google.com:19302'}]});\nconst userId = localStorage.getItem('userId');\n\nconst config = {}\n\ncaller.onicecandidate = evt => {\n    if (!evt.candidate) return;\n    // alert('candidate')\n    onIceCandidate(caller, evt);\n  };\n  caller.ontrack = evt => {\n    store.dispatch(onTrack(evt));\n};\n\n//setInterval(()=> console.log(caller.signalingState), 4000);\nchannel.bind(\"pusher:subscription_succeeded\", members => {\n     \n    //this.setState({id: this.props.channel.members.me.id, room: this.props.callTo});\n    \n  });\n\nchannel.bind(\"pusher:member_added\", member => {\n    console.log(member);\n  });\n\nchannel.bind(\"pusher:member_removed\", member => {\n    if (member.id === config.room) {\n    //   alert('call Ended');\n    }\n    \n});\nchannel.bind(\"client-candidate\", msg => {\n    if (msg.room === config.room && !config.initiator) {\n        // let candidate = new RTCIceCandidate(msg.candidate);\n        // console.log(candidate);\n    //   addIceCandidate(candidate);\n      caller.addIceCandidate(msg.candidate)\n      .then(() => onAddIceCandidateSuccess(msg.room), err => onAddIceCandidateError(msg.room, err));\n    console.log(`${msg.room} ICE candidate:\\n${msg.candidate ? msg.candidate.candidate : '(null)'}`);\n    }\n});\nfunction onAddIceCandidateSuccess(pc) {\n    console.log(`${pc} addIceCandidate success`);\n  }\n  \n  function onAddIceCandidateError(pc, error) {\n    console.log(`${pc} failed to add ICE Candidate: ${error.toString()}`);\n  }\nchannel.bind(\"client-sdp\", msg => {\n    if (msg.room === userId) {\n        store.dispatch({type: actionTypes.ON_INCOMING_CALL, callType: msg.callType, caller: msg.from});\n        config.room = msg.room;\n        config.sdp = msg.sdp;\n        config.state = 'answerCall';\n        }\n});\n\n    channel.bind(\"client-answer\", answer => {\n        if (answer.room === config.room) {\n            // let sessionDesc = new RTCSessionDescription(answer.sdp);\n            // setRemoteDescription(sessionDesc);\n            console.log('pc1 setRemoteDescription start');\n            caller.setRemoteDescription(answer.sdp).then(() => onSetRemoteSuccess(), onSetSessionDescriptionError);\n  \n        }\n        });\n    \nexport const callAccepted = () => {\n    return dispatch => {\n        config.state = 'answerCall';\n        // let sessionDesc = new RTCSessionDescription(config.sdp);\n        // setRemoteDescription(sessionDesc);\n        // getCam();\n        console.log(`${userId} setRemoteDescription start`);\n        caller.setRemoteDescription(desc).then(() => onSetRemoteSuccess(pc2), onSetSessionDescriptionError);\n        console.log(`${userId} createAnswer start`);\n        // Since the 'remote' side has no media stream we need\n        // to pass in the right constraints in order for it to\n        // accept the incoming offer of audio and video.\n        caller.createAnswer().then(onCreateAnswerSuccess, onCreateSessionDescriptionError);\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\n\nconst onCreateAnswerSuccess = desc => {\n    console.log(`Answer from ${userId}:\\n${desc.sdp}`);\n    console.log(`${userId} setLocalDescription start`);\n    caller.setLocalDescription(desc).then(() => onSetLocalSuccess(), onSetSessionDescriptionError);\n    \n    channel.trigger(\"client-answer\", {\n        sdp: sdp,\n        room: config.room\n    });\n}\n\nfunction onSetLocalSuccess() {\n    console.log(`${userId} setLocalDescription complete`);\n  }\n  \n  function onSetRemoteSuccess() {\n    console.log(`${userId} setRemoteDescription complete`);\n  }\n  \n  function onSetSessionDescriptionError(error) {\n    console.log(`Failed to set session description: ${error.toString()}`);\n  }\nexport const callRejected = () => {\n    return dispatch => {\n        channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\n//Create and send offer to remote peer on button click\nexport const callUser = (user, type) => {\n    config.room = user;\n    config.callType = type;\n    config.state = 'makeCall';\n    config.initiator = true;\n    console.log('Requesting local stream');\n    return dispatch => {\n        // getCam();\n        getMedia().then(gotStream)\n        .catch(e => alert(`getUserMedia() error: ${e.name}`));\n        dispatch({type: actionTypes.CALL_INIT})\n\n        let offerOptions = {offerToReceiveVideo: true, offerToReceiveAudio: true}\n        caller.createOffer(offerOptions).then(onCreateOfferSuccess, onCreateSessionDescriptionError);\n    }\n  }  \nconst  onCreateOfferSuccess = desc =>  {\n    console.log(`Offer from ${userId}\\n${desc.sdp}`);\n    console.log(`${userId} setLocalDescription start`);\n    caller.setLocalDescription(desc).then(() => onSetLocalSuccess(pc1), onSetSessionDescriptionError);\n    channel.trigger(\"client-sdp\", {\n        sdp: desc,\n        room: config.room,\n        from: userId,\n        callType: config.callType\n    });\n}\n  \nconst gotStream = stream => {\n    console.log('Received local stream');\n    store.dispatch(onLocalStream(stream));\n        stream.getTracks().forEach(track => {\n            caller.addTrack(track, stream)\n        });\n}\nconst getCam = () => {\n    // alert('line 86--' + room);\n    getMedia().then(stream => {\n        store.dispatch(onLocalStream(stream));\n        stream.getTracks().forEach(track => {\n            caller.addTrack(track, stream)\n        });    \n            if (config.state === 'makeCall'){\n                createOffer();\n            } else {\n        // let sessionDesc = new RTCSessionDescription(config.sdp);\n        // setRemoteDescription(sessionDesc);\n        createAnswer();\n        config.state = null;\n            }\n        })\n        .catch(error => {\n          console.log(\"an error occured\", error);\n        });\n}\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: config.callType === 'video' ? {width: 1280,\n            height: 720,\n            frameRate: 15}: false,\n        audio: true\n      });\n}\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\n\nexport const getCallerReady = () => {\n    return dispatch => {\n     dispatch(prepareCaller(channel));\n    //Listen for ICE Candidates and send them to remote peers\n    // caller.onicecandidate = evt => {\n    //   if (!evt.candidate) return;\n    //   alert('candidate')\n    //   onIceCandidate(caller, evt);\n    // };\n    // caller.onnegotiationneeded = async () => {\n    //     try {\n    //       await caller.setLocalDescription(await createOffer());\n    //       // send the offer to the other peer\n    //       channel.emit('', {desc: pc.localDescription});\n    //     } catch (err) {\n    //       console.error(err);\n    //     }\n    //   };\n    //ontrack handler to receive remote feed and show in remoteview video element\n    // caller.ontrack = evt => {\n    //     dispatch(onTrack(evt));\n    // };\n    }\n}\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\nconst addIceCandidate = iceCandidate => {\n    caller.addIceCandidate(iceCandidate);\n}\n\nconst onIceCandidate = (peer, evt) => {\n    if (evt.candidate) {   \n      channel.trigger(\"client-candidate\", {\n        candidate: evt.candidate,\n        room: config.room\n      });\n    }\n  }\n\n\nconst setLocalDescription = sessionDesc => {\n    return caller.setLocalDescription(sessionDesc);\n}\n\nconst setRemoteDescription = sessionDesc => {\n    return caller.setRemoteDescription(sessionDesc);\n}\n\nconst addTrack = (track, stream) => {\n  caller.addTrack(track, stream);\n}\n\nconst createAnswer = () => {\n    // alert('createAnswer room: ' + receiver);\n    caller.createAnswer().then(sdp => {\n        let sessionDesc = new RTCSessionDescription(sdp);\n        setLocalDescription(sessionDesc);\n        channel.trigger(\"client-answer\", {\n            sdp: sdp,\n            room: config.room\n        });\n        console.log(caller.signalingState);\n    });;\n}\n\nconst createOffer = () => {    \n    // alert('createOffer room--180: ' + room)    \n    caller.createOffer({offerToReceiveVideo: true, offerToReceiveAudio: true}).then(desc => {\n        let sessionDesc = new RTCSessionDescription(desc);\n        setLocalDescription(sessionDesc);\n        // console.log(config);\n        // alert('createOffer room--184: ' + config.room) \n        channel.trigger(\"client-sdp\", {\n            sdp: desc,\n            room: config.room,\n            from: userId,\n            callType: config.callType\n        });\n        console.log(caller.signalingState);\n    })\n    .catch(err => console.log(err));\n}\nexport const endCall = () => {\n    return dispatch => {\n        dispatch({type: actionTypes.END_CALL});\n    }\n    \n}\n\n// setInterval(() => {\n//     console.log(caller.signalingState);\n// }, 3000);"]},"metadata":{},"sourceType":"module"}