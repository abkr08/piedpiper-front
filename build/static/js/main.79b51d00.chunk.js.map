{"version":3,"sources":["components/UI/SideDrawer/SideDrawer.module.css","components/UI/Navigation/Navbar.module.css","store/actions/actionCreators/callActionCreatorss.js","components/UI/Button/Button.js","containers/Call/IncomingCallNotification/IncomingCall.js","Axios.js","store/actions/actionCreators/authActionCreators.js","store/actions/actions.js","store/actions/actionCreators/chatActionCreators.js","components/UI/Input/Input.js","shared/utility.js","components/Auth/Register/Register.js","components/UI/ErrorBox/ErrorBox.js","components/Auth/Login/Login.js","components/Auth/Logout/Logout.js","components/UI/Navigation/Navbar.js","components/UI/OptionsDropbar/OptionsDropbar.js","containers/PiperChat/Contact.js","containers/PiperChat/Chat.js","components/UI/SideDrawer/JoinableRooms/JoinableRoom/JoinableRoom.js","components/UI/SideDrawer/JoinableRooms/JoinableRooms.js","components/UI/SideDrawer/SideDrawer.js","containers/Modal/Modal.js","containers/Call/Call.js","components/ChatScreenBar/ChatScreenBar.js","components/UI/Spinner/Spinner.js","containers/PiperChat/ChatScreen.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/callReducer.js","store/reducers/chatReducer.js","index.js","containers/PiperChat/ChatScreen.module.css","components/UI/Input/Input.module.css","containers/Call/Call.module.css","containers/PiperChat/Contact.module.css","containers/PiperChat/Chat.module.css","components/UI/Button/Button.module.css","containers/Call/IncomingCallNotification/IncomingCall.module.css","components/ChatScreenBar/ChatScreenBar.module.css","components/Auth/Register/Register.module.css","components/Auth/Login/Login.module.css","components/UI/ErrorBox/ErrorBox.module.css","assets/images/p37605.png","components/UI/OptionsDropbar/OptionsDropbar.module.css","components/UI/SideDrawer/JoinableRooms/JoinableRoom/JoinableRoom.module.css","containers/Modal/Modal.module.css","components/UI/Backdrop/Backdrop.module.css","components/UI/Spinner/Spinner.module.css","assets/audio/iphone_trap_remix.mp3"],"names":["module","exports","SideDrawer","Open","Close","PP","divs","RoomsList","Navbar","navIcon","fa","NavItem","Brand","connectedUser","yourConn","button","props","react_default","a","createElement","onClick","clicked","disabled","className","classes","Button","btnType","join","children","IncomingCall","callType","caller","Buttons","acceptCall","rejectCall","instance","axios","create","baseURL","checkTokenValidity","expiresIn","dispatch","setTimeout","localStorage","removeItem","logout","logInFailed","err","type","error","userId","getItem","config","conn","io","configuration","iceServers","url","stream","console","log","on","msg","candidate","offer","name","data","JSON","parse","from","handleRequest","createOffer","setRemoteDescription","RTCSessionDescription","createAnswer","answer","setLocalDescription","send","alert","handleAnswer","addIceCandidate","RTCIceCandidate","handleLeave","onerror","to","store","RTCPeerConnection","ontrack","onTrack","onicecandidate","event","getMedia","then","gotStream","catch","message","stringify","navigator","mediaDevices","getUserMedia","video","width","height","frameRate","audio","myStream","onLocalStream","getTracks","forEach","track","addTrack","remoteStream","streams","callEnded","stop","close","onaddTrack","currentUser","getRooms","contacts","rooms","map","room","obj","isPrivate","split","filter","id","length","Object","objectSpread","chatInitSuccess","subscribeToRooms","user","getState","con","subscribeToRoom","roomId","hooks","onMessage","belongsToCurrentRoom","currentRoom","chat","onNewMessage","messageLimit","getMessages","fetchMessages","direction","limit","messages","fetchMessagesSuccess","concat","input","inputElement","inputClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","assign","elementConfig","value","onChange","changed","options","option","key","displayValue","Input","Label","label","updateObject","oldObject","updatedProperties","checkValidity","rules","isValid","required","trim","minLength","maxLength","isEmail","test","isNumeric","Register","state","controls","placeholder","validation","valid","email","username","password","password2","isEqual","formIsValid","inputIdentifier","target","updatedFormElement","_this","updatedForm","defineProperty","setState","onSubmit","preventDefault","_this$state$controls","control","onRegister","this","registrationSuccess","history","_this2","formElements","form","formElement","RegisterBox","Component","connect","auth","post","res","registrationFailed","actionCreators","errorBox","errorMessage","response","authError","ErrorBox","Login","e","onLogIn","redirect","isLoggedIn","es_Redirect","sort","b","localeCompare","token","_res$data","expirationDate","Date","getTime","setItem","logInSuccess","Logout","displayedElements","Link","data-text","OptionsDropbar","hideOptions","optionsRef","contains","optionClicked","deleteChat","document","addEventListener","window","onresize","removeEventListener","show","ref","ul","style","top","position","y","left","x","i","leaveRoom","chatActionCreators","_useState","useState","_useState2","slicedToArray","showOptions","toggleShowOptions","_useState3","_useState4","updatePosition","attachedClasses","Contact","unreadMessages","Active","unopenedMessages","contact","ImageContainter","src","img","alt","lastMessage","FloatedRight","stopPropagation","pos","clientX","clientY","UI_OptionsDropbar_OptionsDropbar","Chat","byCurrentUser","ByCurrentUser","Sender","sender","Text","text","joinRoom","JoinableRoom","groupImage","joinableRooms","Fragment","showCreateForm","showNewChatForm","groupName","participants","potentialParticipants","newGroupChatParticipants","privateChatParticipant","ShowJoinableRoomsList","createNewGroupHandler","chatParticipants","pp","prevState","onCreateNewGroup","keys","j","startNewChatHandler","onStartNewChat","chatParticipant","joinGroup","getJoinableRooms","onPPChange","_event$target","checked","groupParticipants","display","isTouched","htmlFor","JoinableRooms","createRoom","private","addUserIds","customData","foo","createGroupFailed","get","headers","x-auth-token","displayImage","avatar","startNewChatFailed","Modal","modal","Call","endCall","role","closeModal","callUser","callTo","channel","localVideoRef","srcObject","localStream","remoteVideoRef","localAudioRef","remoteAudioRef","_this3","call","videoContainer","LocalVideo","autoPlay","muted","lVid","RemoteVideo","rVid","incomingCall","callActionCreators","ChatScreenBar","showModal","isVideo","onVideoCallInit","onVoiceCallInit","optionsDropbar","FA","containers_Modal_Modal","containers_Call_Call","callStarted","callOngoing","spinner","Spinner","ChatScreen","showSideDrawer","scrollToBottom","scrollRef","lastElement","scrollIntoView","sendMessage","toggleSideDrawer","chatInit","components_ChatScreenBar_ChatScreenBar","Msgs","div","senderId","contactsPane","chatkitUser","ContactsPane","UI_SideDrawer_SideDrawer","MenuBar","textAlign","ChatManager","instanceLocator","tokenProvider","TokenProvider","onAddedToRoom","App","showCallNotification","ringtoneRef","pause","currentTime","callAccepted","callRejected","onAuth","getCallerReady","chatScreen","play","IncomingCallNotification_IncomingCall","PiperChat_ChatScreen","Navigation_Navbar","ringtone","loop","ring","Switch","Route","path","component","Redirect","withRouter","authSuccess","Boolean","location","hostname","match","initialState","authReducer","arguments","undefined","action","callReducer","chatReducer","item","reduce","acc","toConsumableArray","unopenedMessagesCopy","hasOwnProperty","__webpack_require__","d","__webpack_exports__","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","createStore","applyMiddleware","thunk","ReactDOM","render","es","BrowserRouter","src_App_0","getElementById","serviceWorker","ready","registration","unregister","ImageContainer","Success","Danger","registerBox","p","Backdrop"],"mappings":"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","file":"static/js/main.79b51d00.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__dbIRY\",\"Open\":\"SideDrawer_Open__2WcxM\",\"Close\":\"SideDrawer_Close__g0gN6\",\"PP\":\"SideDrawer_PP__2CF3U\",\"divs\":\"SideDrawer_divs__1xfzY\",\"RoomsList\":\"SideDrawer_RoomsList__2HbRj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__aDuUt\",\"navIcon\":\"Navbar_navIcon__2U2Hh\",\"fa\":\"Navbar_fa__voAjJ\",\"NavItem\":\"Navbar_NavItem__1tVnh\",\"Brand\":\"Navbar_Brand__2R68w\"};","import { store }  from '../../../index';\nimport * as actionTypes from '../actions';\nimport io from 'socket.io-client'; \n\nlet name; \nlet connectedUser;\nconst userId = localStorage.getItem('userId');\nconst config = {};\n\n//connecting to our signaling server\n// const conn = io('http://localhost:8082')\nconst conn = io('https://piedpiperchat.herokuapp.com:8082')\nconst configuration = { \n    \"iceServers\": [{ \"url\": \"stun:stun2.1.google.com:19302\" }]\n};\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 1\n};\nlet yourConn;\nlet stream = null;\n\nconsole.log(conn);\nconn.on('connection', function () { \n   console.log(\"Connected to the signaling server\"); \n});\n\nconst prepareCaller = channel => {\n    return {\n        type: actionTypes.PREPARE_CALLER,\n        channel: channel\n    }\n}\nexport const getCallerReady = () => {\n    return dispatch => {\n        send({ \n            type: \"login\", \n            name: userId\n         });   \n        dispatch(prepareCaller(conn));\n    }\n}\n//when we got a message from a signaling server \nconn.on('message', function (msg) { \n\n   console.log(\"Got message\", msg);\n\t\n   const data = JSON.parse(msg); \n\t\n   switch(data.type) { \n    case \"login\": \n        //  handleLogin(data.success); \n        console.log('logged in')\n        break; \n    case \"requestToCall\":\n        //prepare user for call\n        console.log('received a request from ' + data.from);\n        handleRequest(data.from); \n        break;\n    case \"answerToRequest\":\n        //user is ready...send them an offer\n        console.log('received an answer from ' + data.from);\n        createOffer(data.from); \n        break;\n\n    //when somebody wants to call us \n    case \"offer\": \n        handleOffer(data.offer, data.name)\n        break; \n    case \"answer\": \n        handleAnswer(data.answer, data.from); \n        break; \n    //when a remote peer sends an ice candidate to us \n    case \"candidate\": \n        handleCandidate(data.candidate); \n        break; \n    case \"leave\": \n        handleLeave(); \n        break; \n    default: \n        break; \n   }\n});\n  \nconn.onerror = function (err) { \n   console.log(\"Got error\", err); \n};\n\nconst createOffer = to => {\n    // create an offer \n    yourConn.createOffer(function (offer) { \n        send({ \n            type: \"offer\", \n            offer: offer \n        }); \n            \n        yourConn.setLocalDescription(offer); \n        }, function (error) { \n        alert(\"Error when creating an offer\"); \n        });\n}\nconst handleRequest = from => {\n    connectedUser = from;\n    store.dispatch({type: actionTypes.ON_INCOMING_CALL, callType: 'video', caller: from});\n    yourConn = new RTCPeerConnection(configuration);\n        \n        //when a remote user adds stream to the peer connection, we display it \n        yourConn.ontrack = function (stream) { \n            console.log('got remote stream');\n            console.log(stream)\n        store.dispatch(onTrack(stream));\n        };\n        console.log(yourConn);\n        // Setup ice handling \n        yourConn.onicecandidate = function (event) { \n        if (event.candidate) { \n            send({ \n                type: \"candidate\", \n                candidate: event.candidate\n            }); \n        } \n        }\n    getMedia().then(gotStream).catch(err => console.log(err));\n}\n//alias for sending JSON encoded messages \nfunction send(message) { \n   //attach the other peer username to our messages \n   if (connectedUser) { \n      message.name = connectedUser; \n   } \n\t\n   conn.send(JSON.stringify(message)); \n};\n\nconst getMedia = () => {\n    return navigator.mediaDevices.getUserMedia({\n        video: {width: 1280,\n                height: 720,\n                frameRate: 15},\n        // config.callType === 'video' ? {width: 1280,\n        //     height: 720,\n        //     frameRate: 15}: false,\n        audio: true\n      });\n}\n\nexport const callUser = (user, type) => {\n    connectedUser = user;\n    config.type = type;\n    console.log('calling ' + user + '....' );\n    return dispatch => {\n        yourConn = new RTCPeerConnection(configuration);\n        \n        //when a remote user adds stream to the peer connection, we display it \n        yourConn.ontrack = function (stream) { \n            console.log('got remote stream');\n            console.log(stream)\n        store.dispatch(onTrack(stream));\n        };\n        console.log(yourConn);\n        // Setup ice handling \n        yourConn.onicecandidate = function (event) { \n        if (event.candidate) { \n            send({ \n                type: \"candidate\", \n                candidate: event.candidate\n            }); \n        } \n        }\n        getMedia().then(gotStream)\n        .catch(e => console.log(`getUserMedia() error: ${e}`));\n        dispatch({type: actionTypes.CALL_INIT})\n        send({\n            type: 'requestToCall',\n            from: userId,\n            to: connectedUser\n        })        \n    }\n  }  \n\nconst gotStream = myStream => {\n    console.log('Received local stream');\n    stream = myStream;\n    store.dispatch(onLocalStream(myStream));\n    myStream.getTracks().forEach(track => {\n        console.log(track);\n            yourConn.addTrack(track, myStream)\n        });\n}\n\nconst onTrack = track => {\n    return {\n        type: actionTypes.ON_TRACK,\n        remoteStream: track.streams[0]\n    }\n}\n\nconst onLocalStream = stream => {\n    return {\n        type: actionTypes.ON_LOCAL_STREAM,\n        stream: stream\n    }\n}\nfunction handleOffer(offer, name) { \n    console.log('Accepting offer from ' + connectedUser);\n    yourConn.setRemoteDescription(new RTCSessionDescription(offer));\n     \n    //create an answer to an offer \n    console.log('Creating and sending answer to ' + connectedUser);\n    yourConn.createAnswer(function (answer) { \n        yourConn.setLocalDescription(answer); \n        send({ \n            type: \"answer\", \n            answer: answer,\n            from: name \n       }); \n         \n    }, function (error) { \n       alert(\"Error when creating an answer\"); \n    }); \n}\nexport const callAccepted = () => {\n    return dispatch => {\n        send({\n            type: 'answerToRequest',\n            to: connectedUser,\n            from: userId\n        })\n        dispatch({type: actionTypes.CALL_ACCEPTED})\n    }\n}\nexport const callRejected = () => {\n    return dispatch => {\n        // channel.trigger(\"client-reject\", { room: config.room, rejected: userId });\n        dispatch({type: actionTypes.CALL_REJECTED})\n    }\n}\nfunction handleAnswer(answer, name) { \n    console.log('Accepting answer from ' + name)\n   yourConn.setRemoteDescription(new RTCSessionDescription(answer)); \n};\nfunction handleCandidate(candidate) { \n    yourConn.addIceCandidate(new RTCIceCandidate(candidate)); \n};\n\nconst callEnded = () => {\n    return {\n        type: actionTypes.END_CALL\n    }\n}\nexport const endCall = () => {\n    return dispatch => {\n        console.log(connectedUser)\n        send({ \n            type: \"leave\",\n            name: connectedUser \n         }); \n        handleLeave(); \n    }\n}\n\nfunction handleLeave() { \n    connectedUser = null; \n    stream.getTracks().forEach(track => track.stop());\n    store.dispatch(callEnded()); \n    yourConn.close(); \n    yourConn.onicecandidate = null; \n    yourConn.onaddTrack = null;\n };","import React from 'react';\nimport classes from './Button.module.css';\n\nconst button = ( props ) => (\n    <button\n    onClick = {props.clicked}\n    disabled={props.disabled}\n    className={[classes.Button, classes[props.btnType]].join(' ')}\n    >{props.children}</button>\n);\n\nexport default button;","import React from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './IncomingCall.module.css';\n\nconst IncomingCall = props => (\n    <div className={classes.IncomingCall}>\n        <span>Incoming {props.callType} call from {props.caller}</span>\n        <span className={classes.Buttons}>\n            <Button clicked={props.acceptCall} btnType='Success'>Accept</Button>\n            <Button clicked={props.rejectCall} btnType='Danger'>Reject</Button>\n        </span>\n    </div>\n)\n\nexport default IncomingCall;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://piedpiperchat.herokuapp.com/', // 'http://localhost:8080'\n});\n\n\nexport default instance;","import * as actionTypes from '../actions';\nimport axios from '../../../Axios';\n\nconst logInSuccess = (token, userId) => {\n    return {\n        type: actionTypes.LOG_IN,\n        token: token, \n        userId: userId\n    }\n}\nconst checkTokenValidity = expiresIn => {\n    return dispatch => {\n        setTimeout(() => {\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"userId\");\n        localStorage.removeItem(\"expiresIn\");\n            dispatch(logout());\n        }, expiresIn * 1000);\n    }\n}\nexport const onLogIn = (data) => {\n    return dispatch => {\n        axios.post(\"/login\", data)\n         .then(res => {\n           const { userId, token, expiresIn } = res.data;\n           const expirationDate = new Date (new Date().getTime() + expiresIn * 1000);\n           localStorage.setItem(\"token\", token);\n           localStorage.setItem(\"userId\", userId);\n           localStorage.setItem(\"expiresIn\", expirationDate);\n           dispatch(logInSuccess(res.data.token, userId));\n           dispatch(checkTokenValidity(expiresIn));\n         })\n         .catch(err => {\n             dispatch(logInFailed(err))\n         })\n    }\n}\nconst logInFailed = err => {\n    return {\n        type: actionTypes.LOG_IN_FAILED,\n        error: err \n    }\n}\nconst logout = () => {\n    return {\n        type: actionTypes.LOG_OUT\n    }\n}\n\nexport const onLogout = () => {\n    return dispatch => {\n        //delete token saved in local storage\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"userId\");\n        localStorage.removeItem(\"expiresIn\");\n        dispatch(logout());\n    }\n}\n\nconst authSuccess = (token, userId) => {\n    return {\n        type: actionTypes.ON_AUTH,\n        token: token,\n        userId: userId\n    }\n}\nexport const checkAuthState = () => {\n    return dispatch => {\n        let token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date (localStorage.getItem('expiresIn'));\n            if (expirationDate <= new Date()){\n                dispatch(logout)\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkTokenValidity((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n            \n            }\n        }\n    }\n}\nconst registered = () => {\n    return {\n        type: actionTypes.ON_REGISTER,\n        \n    }\n}\nconst registrationFailed = err => {\n    return {\n        type: actionTypes.ON_REGISTRATION_FAILED,\n        error: err\n    }\n}\nexport const onRegister = data => {\n    return dispatch => {\n        axios.post(\"/register\", data)\n            .then(res => {\n                dispatch(registered())\n            })\n            .catch(err => {\n                dispatch(registrationFailed(err))\n            });\n    }\n}","export const LOG_IN = \"LOG_IN\";\nexport const LOG_OUT = \"LOG_OUT\";\nexport const LOG_IN_FAILED = \"LOG_IN_FAILED\";\nexport const ON_AUTH = \"ON_AUTH\";\nexport const ON_REGISTER = \"ON_REGISTER\";\nexport const ON_REGISTRATION_FAILED = 'ON_REGISTRATION_FAILED';\n\nexport const PREPARE_CALLER = 'PREPARE_CALLER';\nexport const CALL_INIT = 'CALL_INIT';\nexport const CALL_ACCEPTED = 'CALL_ACCEPTED';\nexport const CALL_REJECTED = 'CALL_REJECTED';\nexport const ON_TRACK = 'ON_TRACK';\nexport const ON_LOCAL_STREAM = 'ON_LOCAL_STREAM';\nexport const ON_INCOMING_CALL = 'ON_INCOMING_CALL';\nexport const END_CALL = 'END_CALL';\n\nexport const CHAT_INIT_SUCCESS = 'CHAT_INIT_SUCCESS';\nexport const FETCH_MESSAGES_SUCCESS = 'FETCH_MESSAGES_SUCCESS';\nexport const ON_NEW_MESSAGE = 'ON_NEW_MESSAGE';\nexport const CREATE_GROUP_SUCCESS = 'CREATE_GROUP_SUCCESS';\nexport const CREATE_GROUP_FAILED = 'CREATE_GROUP_FAILED';\nexport const START_NEW_CHAT_SUCCESS = 'START_NEW_CHAT_SUCCESS';\nexport const START_NEW_CHAT_FAILED = 'START_NEW_CHAT_FAILED';\nexport const DELETE_CHAT = 'DELETE_CHAT';\nexport const JOIN_ROOM = 'JOIN_ROOM';\n","import * as actionTypes from '../actions';\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\nimport axios from '../../../Axios';\n\nlet currentUser;\nlet user;\nexport const chatInit = () => { \n    return (dispatch, getState) => {\n        const {userId} = getState().auth;\n        user = userId;\n        const chatManager = new ChatManager({\n            instanceLocator: 'v1:us1:64b7dbdb-3e59-4fad-9823-83add90cba65',\n            userId: userId,\n            tokenProvider: new TokenProvider({\n                url: 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/64b7dbdb-3e59-4fad-9823-83add90cba65/token'\n            })\n        });    \n        chatManager\n        .connect({\n            onAddedToRoom: room => {\n                getRooms();\n                // this.setState({showSideDrawer: false, room: room});\n                getMessages(room);\n            }\n        })\n        .then(user => {\n            currentUser = user;\n            dispatch(subscribeToRooms(currentUser))\n            dispatch(chatInitSuccess(currentUser));\n            dispatch(getRooms());\n            // console.log(currentUser.rooms[0].users);\n        })\n        .catch(err => console.log(err));\n    }\n}\nconst getRooms = () => {\n    return dispatch => {\n        const contacts = currentUser.rooms.map(room => {\n            let obj = {};\n            let name = !room.isPrivate ? room.name :\n                        room.name.split('and')\n                            .filter(name => name !== currentUser.id).join('');\n            !name.length ? obj.name = currentUser.id : obj.name = name;\n            obj.id = room.id;\n            return {...room, ...obj};\n        });\n        dispatch({type: 'ON_ROOMS_FETCHED', contacts})\n    }\n}\nconst chatInitSuccess = currentUser => {\n    return {\n        type: actionTypes.CHAT_INIT_SUCCESS,\n        currentUser\n    }\n}\nconst onNewMessage = (message, belongsToCurrentRoom) => {\n    return {\n        type: actionTypes.ON_NEW_MESSAGE,\n        message,\n        belongsToCurrentRoom\n    }\n}\nconst subscribeToRooms = user => {\n    return (dispatch, getState) => {\n        const contacts = user.rooms;\n        contacts.map(con => {\n            return  user.subscribeToRoom({\n                 roomId: con.id,\n                 hooks: {\n                   onMessage: message => {\n                     let belongsToCurrentRoom = false;\n                     const { currentRoom } = getState().chat;\n                    if (currentRoom && currentRoom.id === message.roomId){\n                        belongsToCurrentRoom = true;\n                    } \n                    dispatch(onNewMessage(message, belongsToCurrentRoom));\n                   }\n                 },\n                 messageLimit: 0\n               })\n         })\n    }\n}\n\nconst fetchMessagesSuccess = (messages, room) => {\n    return {\n        type: actionTypes.FETCH_MESSAGES_SUCCESS,\n        messages,\n        room\n    }\n}\nexport const getMessages = room => {\n    return dispatch => {\n        currentUser.fetchMessages({\n            roomId: room['id'],\n            //initialId: 42,\n            direction: 'older',\n            limit: 100,\n          })\n            .then(messages => {\n              dispatch(fetchMessagesSuccess(messages, room));\n            })\n            .catch(err => {\n              console.log(`Error fetching messages: ${err}`);\n            })\n    }\n   \n}\nexport const sendMessage = data => {\n    return dispatch => {\n        currentUser.sendMessage(data);\n    }\n}\nconst createGroupSuccess = () => {\n    return {\n        type: actionTypes.CREATE_GROUP_SUCCESS\n    }\n}\nconst createGroupFailed = err => {\n    return {\n        type: actionTypes.CREATE_GROUP_FAILED,\n        err\n    }\n}\nexport const createNewGroup = data => {\n    return dispatch => {\n        currentUser.createRoom({\n            name: data.name,\n            private: false,\n            addUserIds: data.participants,\n            customData: { foo: 42 },\n          }).then(room => {\n            console.log(`Created room called ${room.name}`);\n            dispatch(createGroupSuccess());\n            dispatch(subscribeToRooms());\n          })\n          .catch(err => {\n            console.log(`Error creating room ${err}`);\n            dispatch(createGroupFailed(err));\n          })\n    }\n}\nconst startNewChatSuccess = () => {\n    return {\n        type: actionTypes.START_NEW_CHAT_SUCCESS\n    }\n}\nconst startNewChatFailed = err => {\n    return {\n        type: actionTypes.START_NEW_CHAT_FAILED,\n        err\n    }\n}\nexport const startNewChat = data => {\n    return dispatch => {\n        let token = localStorage.getItem('token');\n        console.log(data)\n        axios.get(`/search/${data.chatParticipant}`, {headers: {'x-auth-token': token}})\n            .then(res => {\n                currentUser.createRoom({\n                name: `${currentUser.id}and${data.chatParticipant}`,\n                private: true,\n                addUserIds: [data.chatParticipant],\n                customData: {displayImage: res.data.avatar}     \n            })\n                .then(res => {\n                    console.log(res);\n                    dispatch(startNewChatSuccess());\n                    dispatch(subscribeToRooms());\n                })\n                .catch(err => {\n                    console.log(err);\n                    dispatch(startNewChatFailed(err));\n                });\n            })\n            .catch(err => console.log(err));\n    }\n}\nexport const joinRoom = roomId => {\n    return dispatch => {    \n        currentUser.joinRoom({ roomId })\n            .then(room => {\n                console.log(`Joined room with ID: ${room.id}`)\n            })\n            .catch(err => {\n                console.log(`Error joining room ${roomId}: ${err}`)\n            })\n    }\n}\n\nexport const deleteChat = roomId => {\n    return dispatch => {\n        console.log(typeof roomId)\n        currentUser.leaveRoom({ roomId: roomId })\n        .then(() => {\n          console.log(`Deleted room with ID: ${roomId}`);\n          //dispatch(subscribeToRooms());\n        //   dispatch(chatInitSuccess());\n        })\n        .catch(err => {\n          console.log(`Error deleted room ${roomId}: ${err}`)\n        });\n    }\n}","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    let inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                name={props.name}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={classes.InputElement}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div  className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};\n\nexport const checkValidity = (value, rules) => {\n    \n    let isValid = true;\n    if (!rules) {\n        return true;\n    }\n    \n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n\n    if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid\n    }\n\n    return isValid;\n}","import React, { Component } from 'react';\r\nimport classes from './Register.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../../store/actions/actionIndex';\r\nimport Input from '../../UI/Input/Input';\r\nimport { checkValidity, updateObject} from '../../../shared/utility';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nclass Register extends Component {\r\n\r\n    state = {\r\n      controls: {\r\n       name: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n            placeholder: 'Enter your full name',\r\n            type: 'text'\r\n          },\r\n          value: '',\r\n          validation: {\r\n            required: true\r\n          },\r\n          valid: false,\r\n          touched: false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                placeholder: 'Enter your email',\r\n                type: 'email'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        username: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              placeholder: 'Enter username',\r\n              type: 'text'\r\n          },\r\n          value: '',\r\n          validation: {\r\n              required: true\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      },  \r\n        password: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                placeholder: 'Enter your password',\r\n                type: 'password'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 8\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password2: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              placeholder: 'Confirm your password',\r\n              type: 'password'\r\n          }, \r\n          value: '',\r\n          validation: {\r\n              required: true,\r\n              minLength: 8,\r\n              isEqual: false\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      }\r\n           },\r\n        formIsValid: false\r\n  }\r\n\r\n  onChange = (event, inputIdentifier) => {\r\n    const { value } = event.target;\r\n    const updatedFormElement = updateObject(this.state.controls[inputIdentifier], {\r\n      value: value,\r\n      touched: true,\r\n      valid: checkValidity(value, this.state.controls[inputIdentifier].validation)\r\n  })\r\n  const updatedForm = updateObject(this.state.controls, {\r\n      [inputIdentifier]: updatedFormElement\r\n  });\r\n  let formIsValid = true;\r\n  for (let key in updatedForm){\r\n      formIsValid = updatedForm[key].valid && formIsValid;\r\n  }\r\n  this.setState({controls: updatedForm, formIsValid: formIsValid});\r\n  };\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault();\r\n    let { password, password2} = this.state.controls;\r\n    console.log(password.value, password2.value)\r\n    if (password.value !== password2.value){\r\n      alert('passwords do not match');\r\n    } else {\r\n    const controls = { ...this.state.controls };\r\n    const data = {};\r\n    for (let control in controls){\r\n      data[control] = controls[control]['value'];\r\n    }\r\n    this.props.onRegister(data);\r\n    }\r\n    \r\n  };\r\n\r\n  componentDidUpdate () {\r\n    if (this.props.registrationSuccess){\r\n      this.props.history.push('/login');\r\n    }\r\n  }\r\n  render() {\r\n    let formElements = [];\r\n    for (let key in this.state.controls){\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.controls[key] \r\n      });\r\n    }\r\n    let form = formElements.map(formElement => {\r\n      return <Input \r\n          key={formElement.id} elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={ event => this.onChange(event, formElement.id)}\r\n            />\r\n    })\r\n    return (\r\n      <div className={classes.RegisterBox}>\r\n        <h2> Register </h2>\r\n        <form onSubmit={this.onSubmit}>\r\n          {form}\r\n          <Button btnType='Success' disabled={!this.state.formIsValid} >Register</Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    registrationSuccess: state.auth.registrationSuccess\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onRegister: data => dispatch(actionCreators.onRegister(data))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","import React from 'react';\nimport classes from './ErrorBox.module.css'\n\nconst errorBox = error => {\n    \n    let errorMessage = '';\n      if (error.error) {\n        errorMessage = error.error.response.data.authError\n      } else {\n        errorMessage = error.message\n      }\n    return (\n        <div className={classes.ErrorBox}>\n            { errorMessage }\n        </div>\n    )\n}\n\nexport default errorBox;","import React, { Component } from \"react\";\r\nimport {Redirect} from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../../store/actions/actionIndex';\r\nimport classes from './Login.module.css'; \r\nimport Input from '../../UI/Input/Input';\r\nimport { checkValidity, updateObject } from '../../../shared/utility';\r\nimport Button from '../../UI/Button/Button'; \r\nimport ErrorBox from '../../UI/ErrorBox/ErrorBox';\r\n\r\nclass Login extends Component {\r\n\r\n  state = {\r\n      controls: {\r\n        email: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              placeholder: 'Enter your email',\r\n              type: 'email'\r\n          },\r\n          value: '',\r\n          validation: {\r\n              required: true,\r\n              isEmail: true\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n            placeholder: 'Enter your password',\r\n            type: 'password'\r\n        }, \r\n        value: '',\r\n        validation: {\r\n            required: true,\r\n            minLength: 8\r\n        },\r\n        valid: false,\r\n        touched: false\r\n    }\r\n      },\r\n      formIsValid: false\r\n  }\r\n\r\n  onChange = (event, inputIdentifier) => {\r\n    const { value } = event.target;\r\n    const updatedFormElement = updateObject(this.state.controls[inputIdentifier], {\r\n      value: value,\r\n      touched: true,\r\n      valid: checkValidity(value, this.state.controls[inputIdentifier].validation)\r\n    });\r\n    const updatedForm = updateObject(this.state.controls, {\r\n      [inputIdentifier]: updatedFormElement\r\n    });\r\n    let formIsValid = true;\r\n  for (let key in updatedForm){\r\n      formIsValid = updatedForm[key].valid && formIsValid;\r\n  }\r\n  this.setState({controls: updatedForm, formIsValid: formIsValid});\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    const controls = {...this.state.controls}\r\n    const data = {};\r\n    for (let control in controls){\r\n      data[control] = controls[control]['value'];\r\n    }\r\n    this.props.onLogIn(data);\r\n  };\r\n  render() {\r\n    let redirect = null;\r\n    if (this.props.isLoggedIn){\r\n      redirect = <Redirect to=\"/\"/>;\r\n    }\r\n    let formElements = [];\r\n    for (let key in this.state.controls){\r\n      formElements.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n    const form = formElements.sort((a,b) => a.id.localeCompare(b.id)).map(formElement => {\r\n      return <Input \r\n                key={formElement.id} elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={ event => this.onChange(event, formElement.id)}\r\n            />\r\n    })\r\n    return (\r\n      <div className={classes.Login}>\r\n      {redirect}\r\n        <h2> Login </h2>\r\n        { this.props.error && <ErrorBox error={this.props.error}/> }\r\n        <form onSubmit={this.onSubmit}>\r\n          {form}\r\n          <Button btnType='Success' disabled={!this.state.formIsValid}>Log in</Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoggedIn: state.auth.token !== null,\r\n    error: state.auth.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onLogIn: (data) => dispatch(actionCreators.onLogIn(data))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../../store/actions/actionIndex';\n\nclass Logout extends Component {\n    componentDidMount(){\n        this.props.logout();\n        this.props.history.push(\"/\")\n    }\n    render() {\n        return (\n            <div></div>\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: () => dispatch(actionCreators.onLogout())\n    }\n}\nexport default connect(null, mapDispatchToProps)(Logout);","import React, { Component } from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    let displayedElements = (<ul>\r\n          <li>\r\n            <Link to=\"/\">\r\n              {/* <div className=\"navIcon\">\r\n                <i className=\"fa fa-home\" aria-hidden=\"true\" />\r\n              </div> */}\r\n              <div className={[classes.NavItem, classes.Brand].join(' ')}>\r\n                <span data-text=\"PiperChat\"> </span>\r\n                PiperChat\r\n              </div>\r\n              </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/login\">\r\n              {/* <div className=\"navIcon\">\r\n                <i className=\"fa fa-sign-in\" aria-hidden=\"true\" />\r\n              </div> */}\r\n              <div className={classes.NavItem}>\r\n                <span data-text=\"Login\"> </span>\r\n                Login\r\n              </div>\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/register\">\r\n              {/* <div className=\"navIcon\">\r\n                <i className=\"fa fa-user-plus\" aria-hidden=\"true\" />\r\n              </div> */}\r\n              <div className={classes.NavItem}>\r\n                <span data-text=\"Register\"> </span>\r\n                Register\r\n              </div>\r\n            </Link>\r\n          </li>\r\n        </ul>);\r\n        if (this.props.isLoggedIn){\r\n          displayedElements = (<ul>\r\n          <li>\r\n            <Link to=\"/\">\r\n              {/* <div className=\"navIcon\">\r\n                <i className=\"fa fa-home\" aria-hidden=\"true\" />\r\n              </div> */}\r\n              <div className={classes.NavItem}>\r\n                <span data-text=\"PiperChat\"> </span>\r\n               PiperChat\r\n              </div>\r\n              </Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/logout\">\r\n              {/* <div className=\"navIcon\">\r\n                <i className=\"fa fa-sign-out\" aria-hidden=\"true\" />\r\n              </div> */}\r\n              <div className={classes.NavItem}>\r\n                <span data-text=\"Logout\"> </span>\r\n                Logout\r\n              </div>\r\n            </Link>\r\n          </li>\r\n          </ul>);\r\n        }\r\n    return (\r\n      <div className={classes.Navbar}>\r\n        {displayedElements}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoggedIn: state.auth.token !== null\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classes from './OptionsDropbar.module.css';\nimport * as chatActionCreators from '../../../store/actions/actionIndex';\n\nclass OptionsDropbar extends Component {\n\n    state = {\n        options: this.props.options || []\n    }\n    componentDidMount () {\n        document.addEventListener('click', this.hideOptions);\n        window.onresize = this.props.hideOptions;\n    }\n    hideOptions = event => {\n        if (this.optionsRef && !this.optionsRef.contains(event.target)){\n            this.props.hideOptions();\n        }\n    }\n    componentWillUnmount(){\n        document.removeEventListener('click', this.hideOptions);\n    }\n    optionClicked = (event, option) => {\n        switch(option.name){\n            case 'Archive chat':\n                alert('Archive chat');\n                break;\n            case 'Mute': \n                alert('Mute');\n                break;\n            case 'Exit group':\n                this.props.deleteChat(this.props.roomId)\n                break;\n            case 'Delete chat':\n                this.props.deleteChat(this.props.roomId);\n                break;\n            default:\n                break;\n        }\n    }\n    render(){\n        let options = null;\n        if (this.props.show){\n            options = (\n                <ul ref={ ul => this.optionsRef = ul} className={classes.OptionsDropbar} style={{top: this.props.position.y  + 'px',\n                left: this.props.position.x - 200 + 'px'\n                }}>\n                    {this.state.options.map((option, i) => {\n                        return <li key={i} onClick={(event)=>this.optionClicked(event, option)} >{option.name}</li>\n                    })}\n                </ul>\n            )\n        }\n        return options;\n        // <div className={classes.OptionsDropbar}>{options}</div>;\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        deleteChat: roomId => dispatch(chatActionCreators.deleteChat(roomId))\n    }\n}\nexport default connect(null, mapDispatchToProps)(OptionsDropbar);","import React, { useState, useEffect } from 'react';\nimport classes from './Contact.module.css';\nimport img from '../../assets/images/p37605.png'\nimport { connect } from 'react-redux';\nimport OptionsDropbar from '../../components/UI/OptionsDropbar/OptionsDropbar';\n\nconst contact = props => {\n    const [showOptions, toggleShowOptions] = useState(false);\n    const [position, updatePosition] = useState({});\n    \n    const showOptionsHandler = event => {\n        event.stopPropagation();\n        let pos = {};\n        pos.x = event.clientX + 200;\n        pos.y = event.clientY;\n        toggleShowOptions(true);\n        updatePosition(pos)\n    }\n    const hideOptions = () => {\n        toggleShowOptions(false);\n        updatePosition({})\n    }\n    let attachedClasses = [classes.Contact];\n    let unreadMessages = \"\";\n    if (props.Active){\n        attachedClasses.push(classes.Active); \n    }\n    if (props.unopenedMessages[props.id]){\n        unreadMessages = props.unopenedMessages[props.id].length;\n    }\n    let contact = null;\n    if (props.room){\n        contact = (<div className={attachedClasses.join(' ')} onClick={props.clicked}>\n        <span className={classes.ImageContainter}><img src={img} alt=''/></span>\n        <div>\n            <p>{props.room.name}</p>\n            <p>{props.lastMessage}</p>\n        </div>\n        <div className={classes.FloatedRight}>\n            <span>{unreadMessages}</span>\n            <i onClick={showOptionsHandler} className=\"fa fa-angle-down\"></i>\n            { showOptions && \n                <OptionsDropbar position={position} \n                        roomId={props.room.id}\n                        show={showOptions} \n                        hideOptions={hideOptions}\n                        options={[{name: 'Archive chat'},\n                        {name: 'Mute'},\n                        {name: !props.room.isPrivate ? 'Exit group':'Delete chat'},\n                        {name: 'Pin chat'},\n                        {name: 'Mark as unread'}\n                        ]}/>}\n        </div>\n    </div>\n        )\n    }\n    return contact; \n}\nconst mapStateToProps = state => {\n    return {\n         userId: state.auth.userId\n    }\n}\nexport default connect(mapStateToProps)(contact);","import React from 'react';\nimport classes from './Chat.module.css';\n\n\nconst chat = props => {\n    let attachedClasses = [classes.Chat];\n    if (props.byCurrentUser){\n        attachedClasses = [classes.ByCurrentUser];\n    }\n    return (\n        // <div className={classes.Wrapper} style={{position: 'relative'}}>\n            <div className={attachedClasses.join('')}>\n                <li>\n                    <span className={classes.Sender}>{props.sender}</span>\n                    <br />\n                    <span className={classes.Text}>{props.text}</span>\n                </li>        \n            </div>\n        // </div>\n    )\n}\n\nexport default chat;","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as chatActionCreators from '../../../../../store/actions/actionIndex';\nimport classes from './JoinableRoom.module.css';\n\nconst joinableRoom = props => {\n    return (\n    <span onClick={props.joinRoom(props.id)} className={classes.JoinableRoom}>\n        <img src={props.groupImage} alt='' />\n        <span>\n            <p>{props.name}</p>\n            <p>{props.lastMessage}</p>\n        </span>\n    </span>\n    )\n}\n\nconst mapDispatchtoProps = dispatch => {\n    return {\n        joinRoom: id => dispatch(chatActionCreators.joinRoom(id))\n    }\n}\nexport default connect(null,mapDispatchtoProps)(joinableRoom);","import React from 'react';\nimport JoinableRoom from './JoinableRoom/JoinableRoom';\nconst joinableRooms = props => {\n    return (\n    <React.Fragment>\n        {props.joinableRooms.map((room, i) => {\n            return <JoinableRoom key={i} groupImage={room.groupImage} \n            name={room.name} id={room.id} lastMessage={room.lastMessage}/>\n        })}\n    </React.Fragment>)\n}\n\nexport default joinableRooms;","import React, {Component} from 'react'; \nimport classes from './SideDrawer.module.css';\nimport axios from '../../../Axios';\nimport { connect } from 'react-redux';\nimport JoinableRooms from './JoinableRooms/JoinableRooms';  \nimport * as actionCreators from '../../../store/actions/actionIndex';\nimport Input from '../Input/Input';\nimport Button from '../Button/Button'\n\n\nclass SideDrawer extends Component {\n        state = {\n            showCreateForm: false,\n            showNewChatForm: false,\n            groupName: '',\n            participants: [],\n            potentialParticipants: [],\n            newGroupChatParticipants: {},\n            privateChatParticipant: '',\n            joinableRooms: [],\n            ShowJoinableRoomsList: false,\n            touched: false,\n            isValid: false\n        }\n        createNewGroupHandler = () => {\n            let potentialParticipants = this.props.user.rooms.filter(user => user.isPrivate && user.name !== this.props.userId);\n            let chatParticipants = {};\n            potentialParticipants.forEach(pp => chatParticipants[pp.name] = false);\n            this.setState(prevState => {\n                return {\n                showCreateForm: !prevState.showCreateForm, \n                potentialParticipants, \n                ShowJoinableRoomsList: false,\n                showNewChatForm: false,\n                newGroupChatParticipants: chatParticipants \n             }\n            });\n            \n        }\n        onChange = (event) => {\n            // let valid = false; \n            // if (this.state[name] !== \"\"){\n            //     valid = true;\n            // }\n            this.setState({[event.target.name]: event.target.value});\n            \n        }\n        onCreateNewGroup = event => {\n            event.preventDefault();\n            let obj = {...this.state.newGroupChatParticipants};\n            let participants = Object.keys(obj).filter(j => obj[j]);\n            this.props.onCreateNewGroup({participants, name: this.state.groupName});\n            this.setState({groupName: '', newGroupChatParticipants: {}});\n        }\n        startNewChatHandler = () => {\n            this.setState(prevState => {\n                return {\n                showNewChatForm: !prevState.showNewChatForm, \n                ShowJoinableRoomsList: false, \n                showCreateForm: false\n            }})\n            \n        }\n        onStartNewChat = event => {\n            event.preventDefault();\n            let data = {chatParticipant: this.state.privateChatParticipant};\n            this.props.onStartNewChat(data);\n        }\n        joinGroup = () => {\n            this.props.user.getJoinableRooms()\n            .then(rooms => {\n                this.setState(prevState => {\n                    return {\n                        joinableRooms: rooms, \n                        ShowJoinableRoomsList: !prevState.ShowJoinableRoomsList,\n                        showCreateForm: false,\n                        showNewChatForm: false\n                    }\n                });\n              \n            })\n            .catch(err => {\n              console.log(`Error getting joinable rooms: ${err}`)\n            })\n        }\n        onPPChange = event => {\n            let { name, checked } = event.target;\n            let groupParticipants = {...this.state.newGroupChatParticipants};\n            groupParticipants[name] = checked;\n            this.setState({newGroupChatParticipants: groupParticipants});\n        } \n    render (){\n        let attachedClasses = [classes.SideDrawer, classes.Close];\n        if (this.props.show){\n            attachedClasses = [classes.SideDrawer, classes.Open];\n        }\n       return  (\n        <div className={attachedClasses.join(' ')}>\n            <div className={classes.divs} onClick={this.createNewGroupHandler}>Create a new group</div>\n            <form onSubmit={this.onCreateNewGroup} style={{display: this.state.showCreateForm ? 'block' : 'none'}}>\n                <Input \n                elementType='input'\n                elementConfig={{placeholder: 'Enter group name', type: 'text'}}\n                value={this.state.groupName}\n                invalid={this.state.isTouched && !this.state.isValid}\n                shouldValidate={true}\n                touched={this.state.isTouched}\n                name='groupName'\n                changed={ event => this.onChange(event, 'groupName')}\n            />\n                <h3>Add participants</h3>\n                {this.state.potentialParticipants.map((pp, i) => {\n                    return (\n                        <span key={i} className={classes.PP}>\n                            <input onChange={this.onPPChange} type=\"checkbox\" name={pp.name} checked={this.state.newGroupChatParticipants[pp.name]}/>\n                            <label htmlFor={pp.name}>{pp.name}</label>\n                        </span>\n                    )\n                })}\n                \n                <Button /*disabled={!this.state.groupName  && \n                !Object.keys(this.state.newGroupChatParticipants).map(key => {\n                    return this.state.newGroupChatParticipants[key]\n                }).includes(true)}*/ btnType='Success'>Create</Button>\n            </form>\n            <div className={classes.divs} onClick={this.joinGroup}>Join a group</div>\n            <span style={{display: this.state.ShowJoinableRoomsList ? 'block' : 'none'}} className={classes.RoomsList}>\n                <JoinableRooms joinableRooms={this.state.joinableRooms} />  \n            </span>\n            <div className={classes.divs} onClick={this.startNewChatHandler}>Start a new chat</div>\n            <form onSubmit={this.onStartNewChat} style={{display: this.state.showNewChatForm ? 'block' : 'none'}}>\n                <input onChange={this.onChange} type='text' name='privateChatParticipant' placeholder='Who do you wanna chat with?' />    \n                <button>Submit</button>\n            </form>\n        </div>\n        );\n    \n}\n}\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCreateNewGroup: data => dispatch(actionCreators.createNewGroup(data)),\n        onStartNewChat: data => dispatch(actionCreators.startNewChat(data)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SideDrawer);","import React, {Component} from 'react';\nimport classes from './Modal.module.css';\nimport Backdrop from '../../components/UI/Backdrop/Backdrop';\nclass Modal extends Component {\n    render(){\n        let modal = null;\n        if (this.props.show){\n            modal = (\n            <React.Fragment>\n                {/* <Backdrop show={this.props.show} clicked={this.props.backdropClicked}/> */}\n                <div className={classes.Modal}>{this.props.children}</div>\n            </React.Fragment>\n        );\n        } \n        return modal;\n    \n    }\n}\n\nexport default Modal;","import React, { Component} from 'react';\nimport classes from './Call.module.css';\nimport { connect } from 'react-redux';\nimport * as callActionCreators from '../../store/actions/actionIndex'\n\nimport Button from '../../components/UI/Button/Button';\n\nclass Call extends Component {\n    \n    state = {\n          id: null,\n          room: null\n    }\n       \n    componentDidMount (){\n        if (this.props.role === 'callee'){\n            this.setState({room: this.props.caller});\n        } else {\n            this.props.callUser(this.props.callTo, this.props.callType);\n            this.setState({room: this.props.callTo});\n        }\n        this.props.channel.on('message', data => {\n            if (JSON.parse(data).type === 'leave'){\n                if (!this.props.role){\n                    this.props.closeModal();\n                }\n            }\n        })\n    }\n       \n    \n    endCall = () => {\n        this.setState({room: null});\n        this.props.endCall();\n        if (!this.props.role){\n            this.props.closeModal();\n        }\n    }\n    \n   \n    \n    \n    componentDidUpdate () {\n        if (this.props.callType === 'video'){\n            this.localVideoRef.srcObject = this.props.localStream;\n            this.remoteVideoRef.srcObject = this.props.remoteStream;\n        } else {\n            this.localAudioRef.srcObject = this.props.localStream;\n            this.remoteAudioRef.srcObject = this.props.remoteStream;\n        }\n    }\n       \n    render () {\n        let call = null;\n        if (this.props.callType === 'video'){\n            call = (\n                <React.Fragment>\n                    <div className={classes.videoContainer}>\n                        <video className={classes.LocalVideo} autoPlay muted  \n                            ref={(lVid)=> this.localVideoRef = lVid}>\n                        </video>\n\n                        <video className={classes.RemoteVideo} autoPlay  \n                        ref={(rVid)=> this.remoteVideoRef = rVid}>\n                        </video>\n                    </div>\n                </React.Fragment>\n            );\n        } else {\n            call = (\n                <React.Fragment>\n                    <audio autoPlay src={this.props.localStream} muted ref={audio => this.localAudioRef = audio} />\n                    <audio autoPlay src={this.props.remoteStream} ref={audio => this.remoteAudioRef = audio} />\n                </React.Fragment>\n            )\n        }\n        return (\n            <div className={classes.Call}>\n                {call}\n                <div className={classes.Buttons}>\n                    {/* <span style={{color: 'red'}}><i class=\"fas fa-window-close\"></i></span> */}\n                    <Button clicked={this.endCall} btnType='Danger'>End Call</Button>\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        channel: state.call.channel,\n        remoteStream: state.call.remoteStream,\n        localStream: state.call.localStream,\n        incomingCall: state.call.incomingCall,\n        caller: state.call.caller\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        callUser: (user, callType) => dispatch(callActionCreators.callUser(user, callType)),\n        endCall: () => dispatch(callActionCreators.endCall())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Call);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport classes from './ChatScreenBar.module.css';\nimport Modal from '../../containers/Modal/Modal';\nimport Call from '../../containers/Call/Call';\nimport OptionsDropbar from '../UI/OptionsDropbar/OptionsDropbar';\n\n\nclass ChatScreenBar extends Component {\n    state = {\n        showModal: false,\n        isVideo: false,\n        callType: '',\n        showOptions: false,\n        position: {}\n    }\n    \n    onVideoCallInit = () => {\n            this.setState({showModal: true, callType: 'video', isVideo: true});\n    }\n\n    onVoiceCallInit = () => {\n        this.setState({showModal: true, isVideo: false, callType: 'audio'});\n    }\n\n    showOptions = event => {\n        let pos = {...this.state.position};\n        pos.x = event.clientX;\n        pos.y = event.clientY;\n        this.setState({showOptions: true, position: pos})\n    }\n    hideOptions = () => {\n        this.setState({showOptions: false, position:{}})\n    }\n    \n    endCall = () => {\n        this.setState({showModal: false})\n    }\n    render() {\n        let optionsDropbar = null;\n        if (this.state.showOptions){\n           optionsDropbar = <OptionsDropbar hideOptions={this.hideOptions} \n                                position={this.state.position} \n                                show={this.state.showOptions} \n                                options={[{name: 'Contact info'},\n                                {name: 'Select messages'},\n                                {name: 'Mute'},\n                                {name: 'Clear messages'},\n                                {name: 'Delete chat'}\n                                ]}/>\n              \n        }\n        return (\n            <div className={classes.ChatScreenBar}>\n            <div>\n                   <img src='https://ichef.bbci.co.uk/images/ic/720x405/p0517py6.jpg' alt=''/>\n                   <span>{this.props.room.name}</span>\n               </div>\n               <div className={classes.FA}>\n                    {  this.props.room.isPrivate &&  <React.Fragment><i onClick={this.onVideoCallInit} className=\"fa fa-video\"></i>\n                    <i onClick={this.onVoiceCallInit} className=\"fa fa-phone\"></i>\n                    </React.Fragment>\n                    }\n                    <i className='fa fa-ellipsis-v' onClick={event => this.showOptions(event)}></i>\n                    {optionsDropbar}\n               </div>\n               <Modal show={this.state.showModal}>\n                    {this.state.callType ? \n                        <Call callTo={this.props.room.name} closeModal={this.endCall} callType={this.state.callType}/> : \n                        null\n                    }\n                </Modal>\n            </div>\n        )\n    } \n}\nconst mapStateToProps = state => {\n    return {\n        callEnded: state.call.callEnded,\n        callStarted: state.call.callOngoing\n    }\n}\n export default connect(mapStateToProps)(ChatScreenBar);","import React from 'react';\nimport classes from './Spinner.module.css';\n\n\nconst spinner = ( props ) => (\n    <div className={classes.Spinner}><div></div><div></div></div>\n);\n\nexport default spinner;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Contact from './Contact';\nimport Chat from './Chat';\nimport classes from './ChatScreen.module.css';\nimport SideDrawer from '../../components/UI/SideDrawer/SideDrawer';\nimport ChatScreenBar from '../../components/ChatScreenBar/ChatScreenBar';\nimport Modal from '../Modal/Modal';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actionCreators from '../../store/actions/actionIndex';\n\n\n\nclass ChatScreen extends Component {\n\n    state = {\n        text: '',\n        showSideDrawer: false,\n        contacts: []\n    }\n    componentDidMount () {\n        this.props.chatInit();\n        this.scrollToBottom();\n    }\n    scrollToBottom = () => {\n       if (this.scrollRef && this.props.messages.length > 0){\n        let lastElement = this.scrollRef.children[this.scrollRef.children.length-1];\n        lastElement.scrollIntoView();\n        console.log(lastElement);\n    }\n}\n    getMessages = room => { \n        this.props.getMessages(room);\n        this.scrollToBottom();\n    }\n\n    onChange = event => {\n        this.setState({text: event.target.value});\n    }\n    onSubmit = event => {\n        event.preventDefault();\n        let data = {\n            text: this.state.text,\n            roomId: this.props.currentRoom.id\n        }\n        this.props.sendMessage(data);\n        this.setState({text: ''});\n    }\n\n   toggleSideDrawer = () => {\n        this.setState(prevState => {\n            return {showSideDrawer: !prevState.showSideDrawer}});\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom();\n    }\n    render () {  \n        console.log(this.state.contacts);\n        let chat = <Modal show={true}>\n                        <Spinner />\n                    </Modal>\n        if (this.props.currentRoom){\n            chat = (\n            <div className={classes.Chat}>\n                <ChatScreenBar room={this.props.currentRoom} endCall={this.props.endCall}/>\n                <div className={classes.Msgs} ref={(div) => {this.scrollRef = div}}>\n                {\n                    this.props.messages.map(msg => {\n                        return (\n                            <Chat sender={msg.senderId} byCurrentUser={this.props.userId === msg.senderId}\n                            text={msg.text} key={msg.id} />\n                        )\n\n                    })\n                }\n                </div>\n           \n            <form onSubmit={this.onSubmit}>\n                <input onChange={this.onChange} value={this.state.text} name='text' type=\"text\" placeholder=\"Enter message\" />\n            </form>\n            </div>\n            );\n        } else {\n            chat = (\n                <div className={classes.Chat}></div>\n            );\n        }\n        let contactsPane = null;\n        if (this.props.chatkitUser){\n            contactsPane = (\n                <div className={classes.ContactsPane} >\n                <SideDrawer show={this.state.showSideDrawer} \n                user={this.props.chatkitUser}\n                />\n                <div className={classes.MenuBar}>\n                    <i onClick = {this.toggleSideDrawer} className=\"fa fa-bars\"></i>\n                </div>\n                <h1 style={{textAlign: 'center'}}>Contacts</h1>\n                {this.props.contacts.length && this.props.contacts.map(con => {\n                    return <Contact key={con.id} name={con.name} \n                                room={con}\n                                user={this.props.userId}\n                                unopenedMessages={this.props.unopenedMessages}\n                                Active={this.props.currentRoom ? \n                                    con.id === this.props.currentRoom.id : \n                                    false } \n                                clicked={() => this.getMessages(con)}\n                            />\n                })}\n                </div>\n            );\n            \n        }\n        return (\n            <div className={classes.ChatScreen}>\n                {contactsPane}\n                {chat}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userId: state.auth.userId,\n        channel: state.call.channel,\n        chatkitUser: state.chat.currentUser,\n        currentRoom: state.chat.currentRoom,\n        messages: state.chat.messages,\n        endCall: state.call.endCall,\n        unopenedMessages: state.chat.unopenedMessages,\n        contacts: state.chat.contacts\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        chatInit: () => dispatch(actionCreators.chatInit()),\n        getMessages: room => dispatch(actionCreators.getMessages(room)),\n        sendMessage: data => dispatch(actionCreators.sendMessage(data))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);","import React, { Component } from \"react\";\nimport {Route, withRouter, Switch, Redirect } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport IncomingCall from './containers/Call/IncomingCallNotification/IncomingCall';\nimport Register from \"./components/Auth/Register/Register\";\nimport Login from \"./components/Auth/Login/Login\";\nimport Logout from \"./components/Auth/Logout/Logout\";\nimport Navbar from \"./components/UI/Navigation/Navbar\";\nimport ChatScreen from './containers/PiperChat/ChatScreen';\nimport * as actionCreators from './store/actions/actionIndex';\nimport Call from './containers/Call/Call';\nimport \"./App.css\";\nimport Modal from \"./containers/Modal/Modal.js\";\n\nimport ringtone from './assets/audio/iphone_trap_remix.mp3';\n\n\nclass App extends Component {\n\n  state = {\n    showCallNotification: false\n  }\n  componentDidMount() {\n    this.props.onAuth();\n    if (!this.props.isLoggedIn){\n      this.props.history.push('/login')\n    } \n  }\n  \n  componentDidUpdate () {\n    if (this.props.isLoggedIn){\n      if (!this.props.channel){\n        this.props.getCallerReady();\n      }\n    }\n  }\n  acceptCall = () => {\n    this.ringtoneRef.pause();\n    this.ringtoneRef.currentTime = 0;\n    this.props.callAccepted();\n  }\n\n  rejectCall = () => {\n    this.ringtoneRef.pause();\n    this.ringtoneRef.currentTime = 0;\n    this.props.callRejected();\n  }\n  render() {\n    let chatScreen = null;\n      if (this.props.isLoggedIn){\n        if (this.props.incomingCall){\n          this.ringtoneRef.play();\n          chatScreen = (\n            <IncomingCall acceptCall={this.acceptCall}\n              rejectCall={this.rejectCall}\n              caller={this.props.caller}\n              callType={this.props.callType}\n            />\n          );\n      } else if (this.props.callOngoing){\n        chatScreen = (\n          <React.Fragment>\n            <Modal show><Call role='callee' callType={this.props.callType}/></Modal>\n            <ChatScreen />\n          </React.Fragment>\n          );\n      } else {\n        chatScreen = <ChatScreen />\n      }\n    } \n    return (\n        <div>\n          <Navbar />\n          <div className=\"container\">\n            {chatScreen}\n            <audio src={ringtone} loop ref={ ring => this.ringtoneRef = ring } />\n            <Switch>\n              <Route path=\"/register\" component={Register} />\n              <Route path=\"/login\" component={Login} />\n              <Route path=\"/logout\" component={Logout} />\n              { !this.props.isLoggedIn && <Redirect to='/login' />}\n            </Switch>\n          </div>\n        </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    isLoggedIn: state.auth.token !== null,\n    incomingCall: state.call.incomingCall,\n    callType: state.call.callType,\n    channel: state.call.channel,\n    caller: state.call.caller,\n    callOngoing: state.call.callOngoing\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: () => dispatch(actionCreators.checkAuthState()),\n    getCallerReady: () => dispatch(actionCreators.getCallerReady()),\n    callAccepted: () => dispatch(actionCreators.callAccepted()),\n    callRejected: () => dispatch(actionCreators.callRejected())\n  }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actions';\n\nconst initialState = {\n    token: null,\n    userId: null,\n    registrationSuccess: false,\n    error: null\n}\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOG_IN:\n           return {\n               ...state, token: action.token, userId: action.userId, error: null\n           }\n        case actionTypes.LOG_OUT:\n            return {\n                ...state, token: null, userId: null\n            }\n        case actionTypes.ON_AUTH:\n            return {\n                ...state, token: action.token, userId: action.userId\n            }\n        case actionTypes.ON_REGISTER: \n            return {\n                ...state, registrationSuccess: true\n            }\n        case actionTypes.LOG_IN_FAILED: \n        return {\n            ...state, error: action.error\n        }\n        default: \n            return state;\n    }\n}\n\nexport default authReducer;","import * as actionTypes from '../actions/actions';\n\nconst initialState = {\n    channel: null,\n    remoteStream: null,\n    localStream: null,\n    incomingCall: false,\n    callType: null,\n    caller: null,\n    callOngoing: false,\n    callStarted: false,\n    callEnded: false\n}\n\nconst callReducer = (state = initialState, action) => {\n    \n    switch(action.type){\n        case actionTypes.PREPARE_CALLER: \n            \n            return {\n                ...state,\n                channel: action.channel \n            }\n        case actionTypes.CALL_INIT: \n            return {\n                ...state, callStarted: true, callEnded: false\n            }\n        case actionTypes.ON_TRACK: \n            return {\n                ...state, remoteStream: action.remoteStream\n            }\n        case actionTypes.ON_LOCAL_STREAM:\n            return {\n                ...state, localStream: action.stream\n            }\n        case actionTypes.ON_INCOMING_CALL:\n            return {\n                ...state, incomingCall: true, callType: action.callType, caller: action.caller\n            }\n        case actionTypes.CALL_ACCEPTED: \n            return {\n                ...state, incomingCall: false, callOngoing: true\n            }\n        case actionTypes.CALL_REJECTED: \n            return {\n                ...state, incomingCall: false, callOngoing: false\n            }\n        case actionTypes.END_CALL: \n            return {\n                ...state, callOngoing: false, incomingCall: false, callEnded: true, callStarted: false\n            }\n        default: \n        return state;\n    }\n}\n\nexport default callReducer;","import * as actionTypes from '../actions/actions';\n\n\nconst initialState = {\n    currentUser: null,\n    contacts: [],\n    currentRoom: null,\n    messages: [],\n    unopenedMessages: {}\n};\n\nconst removeItem = (obj, item) => {\n    return Object.keys(obj).reduce((acc, key) => {\n        if (key !== item) {\n          return {...acc, [key]: obj[key]}\n        }\n        return acc;\n      }, {})\n} \nconst chatReducer = (state = initialState, action) => {\n    switch (action.type){\n        case actionTypes.CHAT_INIT_SUCCESS:\n            return {\n                ...state, currentUser: action.currentUser\n            }\n        case actionTypes.FETCH_MESSAGES_SUCCESS: {\n            return {\n                ...state, messages: action.messages, currentRoom: action.room,\n                unopenedMessages: removeItem(state.unopenedMessages, action.room.id)\n            }\n        }\n        case actionTypes.ON_NEW_MESSAGE: \n            if (action.belongsToCurrentRoom){\n                return {\n                    ...state, messages: [...state.messages, action.message]\n                }\n            } else {\n                let unopenedMessagesCopy = {...state.unopenedMessages};\n                if (unopenedMessagesCopy.hasOwnProperty(action.message.roomId)){\n                    unopenedMessagesCopy[action.message.roomId].push(action.message);\n                } else {\n                    unopenedMessagesCopy[action.message.roomId] = [action.message];\n                }\n                return { \n                    ...state, unopenedMessages: unopenedMessagesCopy\n               }  \n            }\n        case 'ON_ROOMS_FETCHED':\n            return {\n                ...state, contacts: action.contacts\n            }\n        default: \n            return state;\n    }\n}\n\nexport default chatReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose, combineReducers  } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport authReducer from './store/reducers/authReducer'\nimport callReducer from './store/reducers/callReducer';\nimport chatReducer from './store/reducers/chatReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    call: callReducer,\n    chat: chatReducer\n})\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(<Provider store={store}><BrowserRouter><App /></BrowserRouter></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatScreen\":\"ChatScreen_ChatScreen__3NJNg\",\"ContactsPane\":\"ChatScreen_ContactsPane__2wBCJ\",\"MenuBar\":\"ChatScreen_MenuBar__xjjtB\",\"Chat\":\"ChatScreen_Chat__9S2DJ\",\"Msgs\":\"ChatScreen_Msgs__20qJ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1qkWX\",\"Label\":\"Input_Label__22HBZ\",\"InputElement\":\"Input_InputElement__3x11B\",\"Invalid\":\"Input_Invalid__2JnXU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Call\":\"Call_Call__3pF_p\",\"videoContainer\":\"Call_videoContainer__pOd87\",\"RemoteVideo\":\"Call_RemoteVideo__6iJ4d\",\"Buttons\":\"Call_Buttons__x6xtm\",\"LocalVideo\":\"Call_LocalVideo__277KJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contact_Contact__I6ygz\",\"Active\":\"Contact_Active__1q391\",\"ImageContainer\":\"Contact_ImageContainer__15hN_\",\"FloatedRight\":\"Contact_FloatedRight__267zm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chat\":\"Chat_Chat__3TzaC\",\"ByCurrentUser\":\"Chat_ByCurrentUser__3isyZ\",\"Sender\":\"Chat_Sender__1gXJ1\",\"Text\":\"Chat_Text__VVd_1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2TE34\",\"Success\":\"Button_Success__2n8wq\",\"Danger\":\"Button_Danger__2Kz76\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IncomingCall\":\"IncomingCall_IncomingCall__1wsfq\",\"Buttons\":\"IncomingCall_Buttons__6-Lpq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatScreenBar\":\"ChatScreenBar_ChatScreenBar__3nwU6\",\"FA\":\"ChatScreenBar_FA__sok0_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RegisterBox\":\"Register_RegisterBox__30el9\",\"registerBox\":\"Register_registerBox__TyBGA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__2hIs6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorBox\":\"ErrorBox_ErrorBox__wKH58\"};","module.exports = __webpack_public_path__ + \"static/media/p37605.8335e87d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OptionsDropbar\":\"OptionsDropbar_OptionsDropbar__2KLcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JoinableRoom\":\"JoinableRoom_JoinableRoom__1Zws2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__3o5hh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3FbGv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__dxPXP\"};","module.exports = __webpack_public_path__ + \"static/media/iphone_trap_remix.d21333e9.mp3\";"],"sourceRoot":""}